// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nodepp.proto

package nodepp;

public final class Nodepp {
  private Nodepp() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface HeadOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint32 magic = 1;
    /**
     * <code>optional uint32 magic = 1;</code>
     *
     * <pre>
     *跟包头的魔数一致，尤其第四个字节，暂不用填
     * </pre>
     */
    boolean hasMagic();
    /**
     * <code>optional uint32 magic = 1;</code>
     *
     * <pre>
     *跟包头的魔数一致，尤其第四个字节，暂不用填
     * </pre>
     */
    int getMagic();

    // optional uint32 seq = 2;
    /**
     * <code>optional uint32 seq = 2;</code>
     *
     * <pre>
     *发送方填写，接收方回传即可
     * </pre>
     */
    boolean hasSeq();
    /**
     * <code>optional uint32 seq = 2;</code>
     *
     * <pre>
     *发送方填写，接收方回传即可
     * </pre>
     */
    int getSeq();

    // optional uint32 cmd = 3;
    /**
     * <code>optional uint32 cmd = 3;</code>
     *
     * <pre>
     *命令字 1心跳，2-15保留。从16开始使用
     * </pre>
     */
    boolean hasCmd();
    /**
     * <code>optional uint32 cmd = 3;</code>
     *
     * <pre>
     *命令字 1心跳，2-15保留。从16开始使用
     * </pre>
     */
    int getCmd();

    // optional uint32 sub_cmd = 4;
    /**
     * <code>optional uint32 sub_cmd = 4;</code>
     *
     * <pre>
     *子命令，0为控制命令，1为查询命令
     * </pre>
     */
    boolean hasSubCmd();
    /**
     * <code>optional uint32 sub_cmd = 4;</code>
     *
     * <pre>
     *子命令，0为控制命令，1为查询命令
     * </pre>
     */
    int getSubCmd();

    // optional uint32 version = 5;
    /**
     * <code>optional uint32 version = 5;</code>
     *
     * <pre>
     *版本 默认1
     * </pre>
     */
    boolean hasVersion();
    /**
     * <code>optional uint32 version = 5;</code>
     *
     * <pre>
     *版本 默认1
     * </pre>
     */
    int getVersion();

    // optional uint64 uid = 6;
    /**
     * <code>optional uint64 uid = 6;</code>
     *
     * <pre>
     *用户id
     * </pre>
     */
    boolean hasUid();
    /**
     * <code>optional uint64 uid = 6;</code>
     *
     * <pre>
     *用户id
     * </pre>
     */
    long getUid();

    // optional uint64 did = 7;
    /**
     * <code>optional uint64 did = 7;</code>
     *
     * <pre>
     *设备id
     * </pre>
     */
    boolean hasDid();
    /**
     * <code>optional uint64 did = 7;</code>
     *
     * <pre>
     *设备id
     * </pre>
     */
    long getDid();

    // optional uint32 time = 8;
    /**
     * <code>optional uint32 time = 8;</code>
     *
     * <pre>
     *时间
     * </pre>
     */
    boolean hasTime();
    /**
     * <code>optional uint32 time = 8;</code>
     *
     * <pre>
     *时间
     * </pre>
     */
    int getTime();

    // optional uint32 result = 10;
    /**
     * <code>optional uint32 result = 10;</code>
     *
     * <pre>
     *结果，0表示成功，其他为错误码
     * </pre>
     */
    boolean hasResult();
    /**
     * <code>optional uint32 result = 10;</code>
     *
     * <pre>
     *结果，0表示成功，其他为错误码
     * </pre>
     */
    int getResult();

    // optional bytes usig = 11;
    /**
     * <code>optional bytes usig = 11;</code>
     *
     * <pre>
     *uid对应的票据，用户身份签名
     * </pre>
     */
    boolean hasUsig();
    /**
     * <code>optional bytes usig = 11;</code>
     *
     * <pre>
     *uid对应的票据，用户身份签名
     * </pre>
     */
    com.google.protobuf.ByteString getUsig();

    // optional bytes dsig = 12;
    /**
     * <code>optional bytes dsig = 12;</code>
     *
     * <pre>
     *did对应的票据，设备身份签名
     * </pre>
     */
    boolean hasDsig();
    /**
     * <code>optional bytes dsig = 12;</code>
     *
     * <pre>
     *did对应的票据，设备身份签名
     * </pre>
     */
    com.google.protobuf.ByteString getDsig();

    // optional uint64 tid = 13;
    /**
     * <code>optional uint64 tid = 13;</code>
     *
     * <pre>
     *临时设备id
     * </pre>
     */
    boolean hasTid();
    /**
     * <code>optional uint64 tid = 13;</code>
     *
     * <pre>
     *临时设备id
     * </pre>
     */
    long getTid();

    // optional uint64 session = 14;
    /**
     * <code>optional uint64 session = 14;</code>
     *
     * <pre>
     *暂时不使用
     * </pre>
     */
    boolean hasSession();
    /**
     * <code>optional uint64 session = 14;</code>
     *
     * <pre>
     *暂时不使用
     * </pre>
     */
    long getSession();

    // optional uint32 special = 15;
    /**
     * <code>optional uint32 special = 15;</code>
     *
     * <pre>
     *暂时不使用
     * </pre>
     */
    boolean hasSpecial();
    /**
     * <code>optional uint32 special = 15;</code>
     *
     * <pre>
     *暂时不使用
     * </pre>
     */
    int getSpecial();

    // optional bytes device_identification = 16;
    /**
     * <code>optional bytes device_identification = 16;</code>
     *
     * <pre>
     *设备的唯一标识，传手机IMEI码，登录的时候上传。用于判断用户是否更换设备登录。更换了手机，才需要从云端拿数据进行设备初始化
     * </pre>
     */
    boolean hasDeviceIdentification();
    /**
     * <code>optional bytes device_identification = 16;</code>
     *
     * <pre>
     *设备的唯一标识，传手机IMEI码，登录的时候上传。用于判断用户是否更换设备登录。更换了手机，才需要从云端拿数据进行设备初始化
     * </pre>
     */
    com.google.protobuf.ByteString getDeviceIdentification();

    // optional bytes random = 17;
    /**
     * <code>optional bytes random = 17;</code>
     */
    boolean hasRandom();
    /**
     * <code>optional bytes random = 17;</code>
     */
    com.google.protobuf.ByteString getRandom();
  }
  /**
   * Protobuf type {@code nodepp.Head}
   */
  public static final class Head extends
      com.google.protobuf.GeneratedMessage
      implements HeadOrBuilder {
    // Use Head.newBuilder() to construct.
    private Head(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Head(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Head defaultInstance;
    public static Head getDefaultInstance() {
      return defaultInstance;
    }

    public Head getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Head(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              magic_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              seq_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              cmd_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              subCmd_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              version_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              uid_ = input.readUInt64();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              did_ = input.readUInt64();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              time_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000100;
              result_ = input.readUInt32();
              break;
            }
            case 90: {
              bitField0_ |= 0x00000200;
              usig_ = input.readBytes();
              break;
            }
            case 98: {
              bitField0_ |= 0x00000400;
              dsig_ = input.readBytes();
              break;
            }
            case 104: {
              bitField0_ |= 0x00000800;
              tid_ = input.readUInt64();
              break;
            }
            case 112: {
              bitField0_ |= 0x00001000;
              session_ = input.readUInt64();
              break;
            }
            case 120: {
              bitField0_ |= 0x00002000;
              special_ = input.readUInt32();
              break;
            }
            case 130: {
              bitField0_ |= 0x00004000;
              deviceIdentification_ = input.readBytes();
              break;
            }
            case 138: {
              bitField0_ |= 0x00008000;
              random_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Nodepp.internal_static_nodepp_Head_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Nodepp.internal_static_nodepp_Head_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Head.class, Builder.class);
    }

    public static com.google.protobuf.Parser<Head> PARSER =
        new com.google.protobuf.AbstractParser<Head>() {
      public Head parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Head(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<Head> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional uint32 magic = 1;
    public static final int MAGIC_FIELD_NUMBER = 1;
    private int magic_;
    /**
     * <code>optional uint32 magic = 1;</code>
     *
     * <pre>
     *跟包头的魔数一致，尤其第四个字节，暂不用填
     * </pre>
     */
    public boolean hasMagic() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 magic = 1;</code>
     *
     * <pre>
     *跟包头的魔数一致，尤其第四个字节，暂不用填
     * </pre>
     */
    public int getMagic() {
      return magic_;
    }

    // optional uint32 seq = 2;
    public static final int SEQ_FIELD_NUMBER = 2;
    private int seq_;
    /**
     * <code>optional uint32 seq = 2;</code>
     *
     * <pre>
     *发送方填写，接收方回传即可
     * </pre>
     */
    public boolean hasSeq() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 seq = 2;</code>
     *
     * <pre>
     *发送方填写，接收方回传即可
     * </pre>
     */
    public int getSeq() {
      return seq_;
    }

    // optional uint32 cmd = 3;
    public static final int CMD_FIELD_NUMBER = 3;
    private int cmd_;
    /**
     * <code>optional uint32 cmd = 3;</code>
     *
     * <pre>
     *命令字 1心跳，2-15保留。从16开始使用
     * </pre>
     */
    public boolean hasCmd() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 cmd = 3;</code>
     *
     * <pre>
     *命令字 1心跳，2-15保留。从16开始使用
     * </pre>
     */
    public int getCmd() {
      return cmd_;
    }

    // optional uint32 sub_cmd = 4;
    public static final int SUB_CMD_FIELD_NUMBER = 4;
    private int subCmd_;
    /**
     * <code>optional uint32 sub_cmd = 4;</code>
     *
     * <pre>
     *子命令，0为控制命令，1为查询命令
     * </pre>
     */
    public boolean hasSubCmd() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 sub_cmd = 4;</code>
     *
     * <pre>
     *子命令，0为控制命令，1为查询命令
     * </pre>
     */
    public int getSubCmd() {
      return subCmd_;
    }

    // optional uint32 version = 5;
    public static final int VERSION_FIELD_NUMBER = 5;
    private int version_;
    /**
     * <code>optional uint32 version = 5;</code>
     *
     * <pre>
     *版本 默认1
     * </pre>
     */
    public boolean hasVersion() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 version = 5;</code>
     *
     * <pre>
     *版本 默认1
     * </pre>
     */
    public int getVersion() {
      return version_;
    }

    // optional uint64 uid = 6;
    public static final int UID_FIELD_NUMBER = 6;
    private long uid_;
    /**
     * <code>optional uint64 uid = 6;</code>
     *
     * <pre>
     *用户id
     * </pre>
     */
    public boolean hasUid() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint64 uid = 6;</code>
     *
     * <pre>
     *用户id
     * </pre>
     */
    public long getUid() {
      return uid_;
    }

    // optional uint64 did = 7;
    public static final int DID_FIELD_NUMBER = 7;
    private long did_;
    /**
     * <code>optional uint64 did = 7;</code>
     *
     * <pre>
     *设备id
     * </pre>
     */
    public boolean hasDid() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint64 did = 7;</code>
     *
     * <pre>
     *设备id
     * </pre>
     */
    public long getDid() {
      return did_;
    }

    // optional uint32 time = 8;
    public static final int TIME_FIELD_NUMBER = 8;
    private int time_;
    /**
     * <code>optional uint32 time = 8;</code>
     *
     * <pre>
     *时间
     * </pre>
     */
    public boolean hasTime() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 time = 8;</code>
     *
     * <pre>
     *时间
     * </pre>
     */
    public int getTime() {
      return time_;
    }

    // optional uint32 result = 10;
    public static final int RESULT_FIELD_NUMBER = 10;
    private int result_;
    /**
     * <code>optional uint32 result = 10;</code>
     *
     * <pre>
     *结果，0表示成功，其他为错误码
     * </pre>
     */
    public boolean hasResult() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 result = 10;</code>
     *
     * <pre>
     *结果，0表示成功，其他为错误码
     * </pre>
     */
    public int getResult() {
      return result_;
    }

    // optional bytes usig = 11;
    public static final int USIG_FIELD_NUMBER = 11;
    private com.google.protobuf.ByteString usig_;
    /**
     * <code>optional bytes usig = 11;</code>
     *
     * <pre>
     *uid对应的票据，用户身份签名
     * </pre>
     */
    public boolean hasUsig() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional bytes usig = 11;</code>
     *
     * <pre>
     *uid对应的票据，用户身份签名
     * </pre>
     */
    public com.google.protobuf.ByteString getUsig() {
      return usig_;
    }

    // optional bytes dsig = 12;
    public static final int DSIG_FIELD_NUMBER = 12;
    private com.google.protobuf.ByteString dsig_;
    /**
     * <code>optional bytes dsig = 12;</code>
     *
     * <pre>
     *did对应的票据，设备身份签名
     * </pre>
     */
    public boolean hasDsig() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional bytes dsig = 12;</code>
     *
     * <pre>
     *did对应的票据，设备身份签名
     * </pre>
     */
    public com.google.protobuf.ByteString getDsig() {
      return dsig_;
    }

    // optional uint64 tid = 13;
    public static final int TID_FIELD_NUMBER = 13;
    private long tid_;
    /**
     * <code>optional uint64 tid = 13;</code>
     *
     * <pre>
     *临时设备id
     * </pre>
     */
    public boolean hasTid() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional uint64 tid = 13;</code>
     *
     * <pre>
     *临时设备id
     * </pre>
     */
    public long getTid() {
      return tid_;
    }

    // optional uint64 session = 14;
    public static final int SESSION_FIELD_NUMBER = 14;
    private long session_;
    /**
     * <code>optional uint64 session = 14;</code>
     *
     * <pre>
     *暂时不使用
     * </pre>
     */
    public boolean hasSession() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional uint64 session = 14;</code>
     *
     * <pre>
     *暂时不使用
     * </pre>
     */
    public long getSession() {
      return session_;
    }

    // optional uint32 special = 15;
    public static final int SPECIAL_FIELD_NUMBER = 15;
    private int special_;
    /**
     * <code>optional uint32 special = 15;</code>
     *
     * <pre>
     *暂时不使用
     * </pre>
     */
    public boolean hasSpecial() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional uint32 special = 15;</code>
     *
     * <pre>
     *暂时不使用
     * </pre>
     */
    public int getSpecial() {
      return special_;
    }

    // optional bytes device_identification = 16;
    public static final int DEVICE_IDENTIFICATION_FIELD_NUMBER = 16;
    private com.google.protobuf.ByteString deviceIdentification_;
    /**
     * <code>optional bytes device_identification = 16;</code>
     *
     * <pre>
     *设备的唯一标识，传手机IMEI码，登录的时候上传。用于判断用户是否更换设备登录。更换了手机，才需要从云端拿数据进行设备初始化
     * </pre>
     */
    public boolean hasDeviceIdentification() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional bytes device_identification = 16;</code>
     *
     * <pre>
     *设备的唯一标识，传手机IMEI码，登录的时候上传。用于判断用户是否更换设备登录。更换了手机，才需要从云端拿数据进行设备初始化
     * </pre>
     */
    public com.google.protobuf.ByteString getDeviceIdentification() {
      return deviceIdentification_;
    }

    // optional bytes random = 17;
    public static final int RANDOM_FIELD_NUMBER = 17;
    private com.google.protobuf.ByteString random_;
    /**
     * <code>optional bytes random = 17;</code>
     */
    public boolean hasRandom() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional bytes random = 17;</code>
     */
    public com.google.protobuf.ByteString getRandom() {
      return random_;
    }

    private void initFields() {
      magic_ = 0;
      seq_ = 0;
      cmd_ = 0;
      subCmd_ = 0;
      version_ = 0;
      uid_ = 0L;
      did_ = 0L;
      time_ = 0;
      result_ = 0;
      usig_ = com.google.protobuf.ByteString.EMPTY;
      dsig_ = com.google.protobuf.ByteString.EMPTY;
      tid_ = 0L;
      session_ = 0L;
      special_ = 0;
      deviceIdentification_ = com.google.protobuf.ByteString.EMPTY;
      random_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, magic_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, seq_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, cmd_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, subCmd_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, version_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt64(6, uid_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt64(7, did_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(8, time_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(10, result_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBytes(11, usig_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBytes(12, dsig_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeUInt64(13, tid_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeUInt64(14, session_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeUInt32(15, special_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeBytes(16, deviceIdentification_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeBytes(17, random_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, magic_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, seq_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, cmd_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, subCmd_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, version_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(6, uid_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(7, did_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, time_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, result_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(11, usig_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(12, dsig_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(13, tid_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(14, session_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(15, special_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(16, deviceIdentification_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(17, random_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static Head parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Head parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Head parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Head parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Head parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Head parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static Head parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static Head parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static Head parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Head parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(Head prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code nodepp.Head}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements HeadOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Nodepp.internal_static_nodepp_Head_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Nodepp.internal_static_nodepp_Head_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Head.class, Builder.class);
      }

      // Construct using nodepp.Nodepp.Head.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        magic_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        seq_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        cmd_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        subCmd_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        version_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        uid_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000020);
        did_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000040);
        time_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        result_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        usig_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000200);
        dsig_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000400);
        tid_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000800);
        session_ = 0L;
        bitField0_ = (bitField0_ & ~0x00001000);
        special_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        deviceIdentification_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00004000);
        random_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00008000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Nodepp.internal_static_nodepp_Head_descriptor;
      }

      public Head getDefaultInstanceForType() {
        return Head.getDefaultInstance();
      }

      public Head build() {
        Head result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public Head buildPartial() {
        Head result = new Head(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.magic_ = magic_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.seq_ = seq_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.cmd_ = cmd_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.subCmd_ = subCmd_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.version_ = version_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.uid_ = uid_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.did_ = did_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.time_ = time_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.result_ = result_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.usig_ = usig_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.dsig_ = dsig_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.tid_ = tid_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.session_ = session_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.special_ = special_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.deviceIdentification_ = deviceIdentification_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.random_ = random_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Head) {
          return mergeFrom((Head)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Head other) {
        if (other == Head.getDefaultInstance()) return this;
        if (other.hasMagic()) {
          setMagic(other.getMagic());
        }
        if (other.hasSeq()) {
          setSeq(other.getSeq());
        }
        if (other.hasCmd()) {
          setCmd(other.getCmd());
        }
        if (other.hasSubCmd()) {
          setSubCmd(other.getSubCmd());
        }
        if (other.hasVersion()) {
          setVersion(other.getVersion());
        }
        if (other.hasUid()) {
          setUid(other.getUid());
        }
        if (other.hasDid()) {
          setDid(other.getDid());
        }
        if (other.hasTime()) {
          setTime(other.getTime());
        }
        if (other.hasResult()) {
          setResult(other.getResult());
        }
        if (other.hasUsig()) {
          setUsig(other.getUsig());
        }
        if (other.hasDsig()) {
          setDsig(other.getDsig());
        }
        if (other.hasTid()) {
          setTid(other.getTid());
        }
        if (other.hasSession()) {
          setSession(other.getSession());
        }
        if (other.hasSpecial()) {
          setSpecial(other.getSpecial());
        }
        if (other.hasDeviceIdentification()) {
          setDeviceIdentification(other.getDeviceIdentification());
        }
        if (other.hasRandom()) {
          setRandom(other.getRandom());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Head parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Head) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional uint32 magic = 1;
      private int magic_ ;
      /**
       * <code>optional uint32 magic = 1;</code>
       *
       * <pre>
       *跟包头的魔数一致，尤其第四个字节，暂不用填
       * </pre>
       */
      public boolean hasMagic() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 magic = 1;</code>
       *
       * <pre>
       *跟包头的魔数一致，尤其第四个字节，暂不用填
       * </pre>
       */
      public int getMagic() {
        return magic_;
      }
      /**
       * <code>optional uint32 magic = 1;</code>
       *
       * <pre>
       *跟包头的魔数一致，尤其第四个字节，暂不用填
       * </pre>
       */
      public Builder setMagic(int value) {
        bitField0_ |= 0x00000001;
        magic_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 magic = 1;</code>
       *
       * <pre>
       *跟包头的魔数一致，尤其第四个字节，暂不用填
       * </pre>
       */
      public Builder clearMagic() {
        bitField0_ = (bitField0_ & ~0x00000001);
        magic_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 seq = 2;
      private int seq_ ;
      /**
       * <code>optional uint32 seq = 2;</code>
       *
       * <pre>
       *发送方填写，接收方回传即可
       * </pre>
       */
      public boolean hasSeq() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 seq = 2;</code>
       *
       * <pre>
       *发送方填写，接收方回传即可
       * </pre>
       */
      public int getSeq() {
        return seq_;
      }
      /**
       * <code>optional uint32 seq = 2;</code>
       *
       * <pre>
       *发送方填写，接收方回传即可
       * </pre>
       */
      public Builder setSeq(int value) {
        bitField0_ |= 0x00000002;
        seq_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 seq = 2;</code>
       *
       * <pre>
       *发送方填写，接收方回传即可
       * </pre>
       */
      public Builder clearSeq() {
        bitField0_ = (bitField0_ & ~0x00000002);
        seq_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 cmd = 3;
      private int cmd_ ;
      /**
       * <code>optional uint32 cmd = 3;</code>
       *
       * <pre>
       *命令字 1心跳，2-15保留。从16开始使用
       * </pre>
       */
      public boolean hasCmd() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 cmd = 3;</code>
       *
       * <pre>
       *命令字 1心跳，2-15保留。从16开始使用
       * </pre>
       */
      public int getCmd() {
        return cmd_;
      }
      /**
       * <code>optional uint32 cmd = 3;</code>
       *
       * <pre>
       *命令字 1心跳，2-15保留。从16开始使用
       * </pre>
       */
      public Builder setCmd(int value) {
        bitField0_ |= 0x00000004;
        cmd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 cmd = 3;</code>
       *
       * <pre>
       *命令字 1心跳，2-15保留。从16开始使用
       * </pre>
       */
      public Builder clearCmd() {
        bitField0_ = (bitField0_ & ~0x00000004);
        cmd_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 sub_cmd = 4;
      private int subCmd_ ;
      /**
       * <code>optional uint32 sub_cmd = 4;</code>
       *
       * <pre>
       *子命令，0为控制命令，1为查询命令
       * </pre>
       */
      public boolean hasSubCmd() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 sub_cmd = 4;</code>
       *
       * <pre>
       *子命令，0为控制命令，1为查询命令
       * </pre>
       */
      public int getSubCmd() {
        return subCmd_;
      }
      /**
       * <code>optional uint32 sub_cmd = 4;</code>
       *
       * <pre>
       *子命令，0为控制命令，1为查询命令
       * </pre>
       */
      public Builder setSubCmd(int value) {
        bitField0_ |= 0x00000008;
        subCmd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 sub_cmd = 4;</code>
       *
       * <pre>
       *子命令，0为控制命令，1为查询命令
       * </pre>
       */
      public Builder clearSubCmd() {
        bitField0_ = (bitField0_ & ~0x00000008);
        subCmd_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 version = 5;
      private int version_ ;
      /**
       * <code>optional uint32 version = 5;</code>
       *
       * <pre>
       *版本 默认1
       * </pre>
       */
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 version = 5;</code>
       *
       * <pre>
       *版本 默认1
       * </pre>
       */
      public int getVersion() {
        return version_;
      }
      /**
       * <code>optional uint32 version = 5;</code>
       *
       * <pre>
       *版本 默认1
       * </pre>
       */
      public Builder setVersion(int value) {
        bitField0_ |= 0x00000010;
        version_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 version = 5;</code>
       *
       * <pre>
       *版本 默认1
       * </pre>
       */
      public Builder clearVersion() {
        bitField0_ = (bitField0_ & ~0x00000010);
        version_ = 0;
        onChanged();
        return this;
      }

      // optional uint64 uid = 6;
      private long uid_ ;
      /**
       * <code>optional uint64 uid = 6;</code>
       *
       * <pre>
       *用户id
       * </pre>
       */
      public boolean hasUid() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint64 uid = 6;</code>
       *
       * <pre>
       *用户id
       * </pre>
       */
      public long getUid() {
        return uid_;
      }
      /**
       * <code>optional uint64 uid = 6;</code>
       *
       * <pre>
       *用户id
       * </pre>
       */
      public Builder setUid(long value) {
        bitField0_ |= 0x00000020;
        uid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 uid = 6;</code>
       *
       * <pre>
       *用户id
       * </pre>
       */
      public Builder clearUid() {
        bitField0_ = (bitField0_ & ~0x00000020);
        uid_ = 0L;
        onChanged();
        return this;
      }

      // optional uint64 did = 7;
      private long did_ ;
      /**
       * <code>optional uint64 did = 7;</code>
       *
       * <pre>
       *设备id
       * </pre>
       */
      public boolean hasDid() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint64 did = 7;</code>
       *
       * <pre>
       *设备id
       * </pre>
       */
      public long getDid() {
        return did_;
      }
      /**
       * <code>optional uint64 did = 7;</code>
       *
       * <pre>
       *设备id
       * </pre>
       */
      public Builder setDid(long value) {
        bitField0_ |= 0x00000040;
        did_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 did = 7;</code>
       *
       * <pre>
       *设备id
       * </pre>
       */
      public Builder clearDid() {
        bitField0_ = (bitField0_ & ~0x00000040);
        did_ = 0L;
        onChanged();
        return this;
      }

      // optional uint32 time = 8;
      private int time_ ;
      /**
       * <code>optional uint32 time = 8;</code>
       *
       * <pre>
       *时间
       * </pre>
       */
      public boolean hasTime() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 time = 8;</code>
       *
       * <pre>
       *时间
       * </pre>
       */
      public int getTime() {
        return time_;
      }
      /**
       * <code>optional uint32 time = 8;</code>
       *
       * <pre>
       *时间
       * </pre>
       */
      public Builder setTime(int value) {
        bitField0_ |= 0x00000080;
        time_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 time = 8;</code>
       *
       * <pre>
       *时间
       * </pre>
       */
      public Builder clearTime() {
        bitField0_ = (bitField0_ & ~0x00000080);
        time_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 result = 10;
      private int result_ ;
      /**
       * <code>optional uint32 result = 10;</code>
       *
       * <pre>
       *结果，0表示成功，其他为错误码
       * </pre>
       */
      public boolean hasResult() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 result = 10;</code>
       *
       * <pre>
       *结果，0表示成功，其他为错误码
       * </pre>
       */
      public int getResult() {
        return result_;
      }
      /**
       * <code>optional uint32 result = 10;</code>
       *
       * <pre>
       *结果，0表示成功，其他为错误码
       * </pre>
       */
      public Builder setResult(int value) {
        bitField0_ |= 0x00000100;
        result_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 result = 10;</code>
       *
       * <pre>
       *结果，0表示成功，其他为错误码
       * </pre>
       */
      public Builder clearResult() {
        bitField0_ = (bitField0_ & ~0x00000100);
        result_ = 0;
        onChanged();
        return this;
      }

      // optional bytes usig = 11;
      private com.google.protobuf.ByteString usig_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes usig = 11;</code>
       *
       * <pre>
       *uid对应的票据，用户身份签名
       * </pre>
       */
      public boolean hasUsig() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional bytes usig = 11;</code>
       *
       * <pre>
       *uid对应的票据，用户身份签名
       * </pre>
       */
      public com.google.protobuf.ByteString getUsig() {
        return usig_;
      }
      /**
       * <code>optional bytes usig = 11;</code>
       *
       * <pre>
       *uid对应的票据，用户身份签名
       * </pre>
       */
      public Builder setUsig(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        usig_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes usig = 11;</code>
       *
       * <pre>
       *uid对应的票据，用户身份签名
       * </pre>
       */
      public Builder clearUsig() {
        bitField0_ = (bitField0_ & ~0x00000200);
        usig_ = getDefaultInstance().getUsig();
        onChanged();
        return this;
      }

      // optional bytes dsig = 12;
      private com.google.protobuf.ByteString dsig_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes dsig = 12;</code>
       *
       * <pre>
       *did对应的票据，设备身份签名
       * </pre>
       */
      public boolean hasDsig() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional bytes dsig = 12;</code>
       *
       * <pre>
       *did对应的票据，设备身份签名
       * </pre>
       */
      public com.google.protobuf.ByteString getDsig() {
        return dsig_;
      }
      /**
       * <code>optional bytes dsig = 12;</code>
       *
       * <pre>
       *did对应的票据，设备身份签名
       * </pre>
       */
      public Builder setDsig(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
        dsig_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes dsig = 12;</code>
       *
       * <pre>
       *did对应的票据，设备身份签名
       * </pre>
       */
      public Builder clearDsig() {
        bitField0_ = (bitField0_ & ~0x00000400);
        dsig_ = getDefaultInstance().getDsig();
        onChanged();
        return this;
      }

      // optional uint64 tid = 13;
      private long tid_ ;
      /**
       * <code>optional uint64 tid = 13;</code>
       *
       * <pre>
       *临时设备id
       * </pre>
       */
      public boolean hasTid() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional uint64 tid = 13;</code>
       *
       * <pre>
       *临时设备id
       * </pre>
       */
      public long getTid() {
        return tid_;
      }
      /**
       * <code>optional uint64 tid = 13;</code>
       *
       * <pre>
       *临时设备id
       * </pre>
       */
      public Builder setTid(long value) {
        bitField0_ |= 0x00000800;
        tid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 tid = 13;</code>
       *
       * <pre>
       *临时设备id
       * </pre>
       */
      public Builder clearTid() {
        bitField0_ = (bitField0_ & ~0x00000800);
        tid_ = 0L;
        onChanged();
        return this;
      }

      // optional uint64 session = 14;
      private long session_ ;
      /**
       * <code>optional uint64 session = 14;</code>
       *
       * <pre>
       *暂时不使用
       * </pre>
       */
      public boolean hasSession() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional uint64 session = 14;</code>
       *
       * <pre>
       *暂时不使用
       * </pre>
       */
      public long getSession() {
        return session_;
      }
      /**
       * <code>optional uint64 session = 14;</code>
       *
       * <pre>
       *暂时不使用
       * </pre>
       */
      public Builder setSession(long value) {
        bitField0_ |= 0x00001000;
        session_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 session = 14;</code>
       *
       * <pre>
       *暂时不使用
       * </pre>
       */
      public Builder clearSession() {
        bitField0_ = (bitField0_ & ~0x00001000);
        session_ = 0L;
        onChanged();
        return this;
      }

      // optional uint32 special = 15;
      private int special_ ;
      /**
       * <code>optional uint32 special = 15;</code>
       *
       * <pre>
       *暂时不使用
       * </pre>
       */
      public boolean hasSpecial() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional uint32 special = 15;</code>
       *
       * <pre>
       *暂时不使用
       * </pre>
       */
      public int getSpecial() {
        return special_;
      }
      /**
       * <code>optional uint32 special = 15;</code>
       *
       * <pre>
       *暂时不使用
       * </pre>
       */
      public Builder setSpecial(int value) {
        bitField0_ |= 0x00002000;
        special_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 special = 15;</code>
       *
       * <pre>
       *暂时不使用
       * </pre>
       */
      public Builder clearSpecial() {
        bitField0_ = (bitField0_ & ~0x00002000);
        special_ = 0;
        onChanged();
        return this;
      }

      // optional bytes device_identification = 16;
      private com.google.protobuf.ByteString deviceIdentification_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes device_identification = 16;</code>
       *
       * <pre>
       *设备的唯一标识，传手机IMEI码，登录的时候上传。用于判断用户是否更换设备登录。更换了手机，才需要从云端拿数据进行设备初始化
       * </pre>
       */
      public boolean hasDeviceIdentification() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional bytes device_identification = 16;</code>
       *
       * <pre>
       *设备的唯一标识，传手机IMEI码，登录的时候上传。用于判断用户是否更换设备登录。更换了手机，才需要从云端拿数据进行设备初始化
       * </pre>
       */
      public com.google.protobuf.ByteString getDeviceIdentification() {
        return deviceIdentification_;
      }
      /**
       * <code>optional bytes device_identification = 16;</code>
       *
       * <pre>
       *设备的唯一标识，传手机IMEI码，登录的时候上传。用于判断用户是否更换设备登录。更换了手机，才需要从云端拿数据进行设备初始化
       * </pre>
       */
      public Builder setDeviceIdentification(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00004000;
        deviceIdentification_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes device_identification = 16;</code>
       *
       * <pre>
       *设备的唯一标识，传手机IMEI码，登录的时候上传。用于判断用户是否更换设备登录。更换了手机，才需要从云端拿数据进行设备初始化
       * </pre>
       */
      public Builder clearDeviceIdentification() {
        bitField0_ = (bitField0_ & ~0x00004000);
        deviceIdentification_ = getDefaultInstance().getDeviceIdentification();
        onChanged();
        return this;
      }

      // optional bytes random = 17;
      private com.google.protobuf.ByteString random_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes random = 17;</code>
       */
      public boolean hasRandom() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional bytes random = 17;</code>
       */
      public com.google.protobuf.ByteString getRandom() {
        return random_;
      }
      /**
       * <code>optional bytes random = 17;</code>
       */
      public Builder setRandom(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00008000;
        random_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes random = 17;</code>
       */
      public Builder clearRandom() {
        bitField0_ = (bitField0_ & ~0x00008000);
        random_ = getDefaultInstance().getRandom();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:nodepp.Head)
    }

    static {
      defaultInstance = new Head(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:nodepp.Head)
  }

  public interface TimerOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint32 time_set = 1;
    /**
     * <code>optional uint32 time_set = 1;</code>
     *
     * <pre>
     *按位处理 0-6为分别表示星期天、星期一-星期六,每位为1表示设置定时
     * </pre>
     */
    boolean hasTimeSet();
    /**
     * <code>optional uint32 time_set = 1;</code>
     *
     * <pre>
     *按位处理 0-6为分别表示星期天、星期一-星期六,每位为1表示设置定时
     * </pre>
     */
    int getTimeSet();

    // optional uint32 time_repeat = 2;
    /**
     * <code>optional uint32 time_repeat = 2;</code>
     *
     * <pre>
     *按位处理 0-6为分别表示星期天、星期一-星期六,每位为1表示重复定时
     * </pre>
     */
    boolean hasTimeRepeat();
    /**
     * <code>optional uint32 time_repeat = 2;</code>
     *
     * <pre>
     *按位处理 0-6为分别表示星期天、星期一-星期六,每位为1表示重复定时
     * </pre>
     */
    int getTimeRepeat();

    // optional uint32 time_operate = 3;
    /**
     * <code>optional uint32 time_operate = 3;</code>
     *
     * <pre>
     *按位处理 彩灯和单路都是用最低位，6路分别对应0-5位, 该位0表示关，1表示开
     * </pre>
     */
    boolean hasTimeOperate();
    /**
     * <code>optional uint32 time_operate = 3;</code>
     *
     * <pre>
     *按位处理 彩灯和单路都是用最低位，6路分别对应0-5位, 该位0表示关，1表示开
     * </pre>
     */
    int getTimeOperate();

    // repeated uint32 time_stamp = 4;
    /**
     * <code>repeated uint32 time_stamp = 4;</code>
     *
     * <pre>
     *表示7个uint32，依次为星期天、星期一-星期六，记录7天中设置的时间戳，比如我设置了周一定时操作，0,1400000000,0,0,0,0,0
     * </pre>
     */
    java.util.List<Integer> getTimeStampList();
    /**
     * <code>repeated uint32 time_stamp = 4;</code>
     *
     * <pre>
     *表示7个uint32，依次为星期天、星期一-星期六，记录7天中设置的时间戳，比如我设置了周一定时操作，0,1400000000,0,0,0,0,0
     * </pre>
     */
    int getTimeStampCount();
    /**
     * <code>repeated uint32 time_stamp = 4;</code>
     *
     * <pre>
     *表示7个uint32，依次为星期天、星期一-星期六，记录7天中设置的时间戳，比如我设置了周一定时操作，0,1400000000,0,0,0,0,0
     * </pre>
     */
    int getTimeStamp(int index);

    // optional uint32 time_isopen = 5;
    /**
     * <code>optional uint32 time_isopen = 5;</code>
     *
     * <pre>
     *表示客户端设置的是定时状态，0表示设置的是定时关闭，1表示设置的是定时开启
     * </pre>
     */
    boolean hasTimeIsopen();
    /**
     * <code>optional uint32 time_isopen = 5;</code>
     *
     * <pre>
     *表示客户端设置的是定时状态，0表示设置的是定时关闭，1表示设置的是定时开启
     * </pre>
     */
    int getTimeIsopen();

    // optional uint32 operate_index = 6;
    /**
     * <code>optional uint32 operate_index = 6;</code>
     *
     * <pre>
     *表示operate执行的对应位是否执行，operate_index:0000001表示执行operate的第一位，即第一位
     * </pre>
     */
    boolean hasOperateIndex();
    /**
     * <code>optional uint32 operate_index = 6;</code>
     *
     * <pre>
     *表示operate执行的对应位是否执行，operate_index:0000001表示执行operate的第一位，即第一位
     * </pre>
     */
    int getOperateIndex();
  }
  /**
   * Protobuf type {@code nodepp.Timer}
   */
  public static final class Timer extends
      com.google.protobuf.GeneratedMessage
      implements TimerOrBuilder {
    // Use Timer.newBuilder() to construct.
    private Timer(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Timer(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Timer defaultInstance;
    public static Timer getDefaultInstance() {
      return defaultInstance;
    }

    public Timer getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Timer(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              timeSet_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              timeRepeat_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              timeOperate_ = input.readUInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                timeStamp_ = new java.util.ArrayList<Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              timeStamp_.add(input.readUInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                timeStamp_ = new java.util.ArrayList<Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                timeStamp_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              timeIsopen_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              operateIndex_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          timeStamp_ = java.util.Collections.unmodifiableList(timeStamp_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Nodepp.internal_static_nodepp_Timer_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Nodepp.internal_static_nodepp_Timer_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Timer.class, Builder.class);
    }

    public static com.google.protobuf.Parser<Timer> PARSER =
        new com.google.protobuf.AbstractParser<Timer>() {
      public Timer parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Timer(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<Timer> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional uint32 time_set = 1;
    public static final int TIME_SET_FIELD_NUMBER = 1;
    private int timeSet_;
    /**
     * <code>optional uint32 time_set = 1;</code>
     *
     * <pre>
     *按位处理 0-6为分别表示星期天、星期一-星期六,每位为1表示设置定时
     * </pre>
     */
    public boolean hasTimeSet() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 time_set = 1;</code>
     *
     * <pre>
     *按位处理 0-6为分别表示星期天、星期一-星期六,每位为1表示设置定时
     * </pre>
     */
    public int getTimeSet() {
      return timeSet_;
    }

    // optional uint32 time_repeat = 2;
    public static final int TIME_REPEAT_FIELD_NUMBER = 2;
    private int timeRepeat_;
    /**
     * <code>optional uint32 time_repeat = 2;</code>
     *
     * <pre>
     *按位处理 0-6为分别表示星期天、星期一-星期六,每位为1表示重复定时
     * </pre>
     */
    public boolean hasTimeRepeat() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 time_repeat = 2;</code>
     *
     * <pre>
     *按位处理 0-6为分别表示星期天、星期一-星期六,每位为1表示重复定时
     * </pre>
     */
    public int getTimeRepeat() {
      return timeRepeat_;
    }

    // optional uint32 time_operate = 3;
    public static final int TIME_OPERATE_FIELD_NUMBER = 3;
    private int timeOperate_;
    /**
     * <code>optional uint32 time_operate = 3;</code>
     *
     * <pre>
     *按位处理 彩灯和单路都是用最低位，6路分别对应0-5位, 该位0表示关，1表示开
     * </pre>
     */
    public boolean hasTimeOperate() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 time_operate = 3;</code>
     *
     * <pre>
     *按位处理 彩灯和单路都是用最低位，6路分别对应0-5位, 该位0表示关，1表示开
     * </pre>
     */
    public int getTimeOperate() {
      return timeOperate_;
    }

    // repeated uint32 time_stamp = 4;
    public static final int TIME_STAMP_FIELD_NUMBER = 4;
    private java.util.List<Integer> timeStamp_;
    /**
     * <code>repeated uint32 time_stamp = 4;</code>
     *
     * <pre>
     *表示7个uint32，依次为星期天、星期一-星期六，记录7天中设置的时间戳，比如我设置了周一定时操作，0,1400000000,0,0,0,0,0
     * </pre>
     */
    public java.util.List<Integer>
        getTimeStampList() {
      return timeStamp_;
    }
    /**
     * <code>repeated uint32 time_stamp = 4;</code>
     *
     * <pre>
     *表示7个uint32，依次为星期天、星期一-星期六，记录7天中设置的时间戳，比如我设置了周一定时操作，0,1400000000,0,0,0,0,0
     * </pre>
     */
    public int getTimeStampCount() {
      return timeStamp_.size();
    }
    /**
     * <code>repeated uint32 time_stamp = 4;</code>
     *
     * <pre>
     *表示7个uint32，依次为星期天、星期一-星期六，记录7天中设置的时间戳，比如我设置了周一定时操作，0,1400000000,0,0,0,0,0
     * </pre>
     */
    public int getTimeStamp(int index) {
      return timeStamp_.get(index);
    }

    // optional uint32 time_isopen = 5;
    public static final int TIME_ISOPEN_FIELD_NUMBER = 5;
    private int timeIsopen_;
    /**
     * <code>optional uint32 time_isopen = 5;</code>
     *
     * <pre>
     *表示客户端设置的是定时状态，0表示设置的是定时关闭，1表示设置的是定时开启
     * </pre>
     */
    public boolean hasTimeIsopen() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 time_isopen = 5;</code>
     *
     * <pre>
     *表示客户端设置的是定时状态，0表示设置的是定时关闭，1表示设置的是定时开启
     * </pre>
     */
    public int getTimeIsopen() {
      return timeIsopen_;
    }

    // optional uint32 operate_index = 6;
    public static final int OPERATE_INDEX_FIELD_NUMBER = 6;
    private int operateIndex_;
    /**
     * <code>optional uint32 operate_index = 6;</code>
     *
     * <pre>
     *表示operate执行的对应位是否执行，operate_index:0000001表示执行operate的第一位，即第一位
     * </pre>
     */
    public boolean hasOperateIndex() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 operate_index = 6;</code>
     *
     * <pre>
     *表示operate执行的对应位是否执行，operate_index:0000001表示执行operate的第一位，即第一位
     * </pre>
     */
    public int getOperateIndex() {
      return operateIndex_;
    }

    private void initFields() {
      timeSet_ = 0;
      timeRepeat_ = 0;
      timeOperate_ = 0;
      timeStamp_ = java.util.Collections.emptyList();
      timeIsopen_ = 0;
      operateIndex_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, timeSet_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, timeRepeat_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, timeOperate_);
      }
      for (int i = 0; i < timeStamp_.size(); i++) {
        output.writeUInt32(4, timeStamp_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(5, timeIsopen_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(6, operateIndex_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, timeSet_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, timeRepeat_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, timeOperate_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < timeStamp_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(timeStamp_.get(i));
        }
        size += dataSize;
        size += 1 * getTimeStampList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, timeIsopen_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, operateIndex_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static Timer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Timer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Timer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Timer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Timer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Timer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static Timer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static Timer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static Timer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Timer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(Timer prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code nodepp.Timer}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements TimerOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Nodepp.internal_static_nodepp_Timer_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Nodepp.internal_static_nodepp_Timer_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Timer.class, Builder.class);
      }

      // Construct using nodepp.Nodepp.Timer.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        timeSet_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        timeRepeat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        timeOperate_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        timeStamp_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        timeIsopen_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        operateIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Nodepp.internal_static_nodepp_Timer_descriptor;
      }

      public Timer getDefaultInstanceForType() {
        return Timer.getDefaultInstance();
      }

      public Timer build() {
        Timer result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public Timer buildPartial() {
        Timer result = new Timer(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.timeSet_ = timeSet_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.timeRepeat_ = timeRepeat_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.timeOperate_ = timeOperate_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          timeStamp_ = java.util.Collections.unmodifiableList(timeStamp_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.timeStamp_ = timeStamp_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.timeIsopen_ = timeIsopen_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.operateIndex_ = operateIndex_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Timer) {
          return mergeFrom((Timer)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Timer other) {
        if (other == Timer.getDefaultInstance()) return this;
        if (other.hasTimeSet()) {
          setTimeSet(other.getTimeSet());
        }
        if (other.hasTimeRepeat()) {
          setTimeRepeat(other.getTimeRepeat());
        }
        if (other.hasTimeOperate()) {
          setTimeOperate(other.getTimeOperate());
        }
        if (!other.timeStamp_.isEmpty()) {
          if (timeStamp_.isEmpty()) {
            timeStamp_ = other.timeStamp_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureTimeStampIsMutable();
            timeStamp_.addAll(other.timeStamp_);
          }
          onChanged();
        }
        if (other.hasTimeIsopen()) {
          setTimeIsopen(other.getTimeIsopen());
        }
        if (other.hasOperateIndex()) {
          setOperateIndex(other.getOperateIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Timer parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Timer) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional uint32 time_set = 1;
      private int timeSet_ ;
      /**
       * <code>optional uint32 time_set = 1;</code>
       *
       * <pre>
       *按位处理 0-6为分别表示星期天、星期一-星期六,每位为1表示设置定时
       * </pre>
       */
      public boolean hasTimeSet() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 time_set = 1;</code>
       *
       * <pre>
       *按位处理 0-6为分别表示星期天、星期一-星期六,每位为1表示设置定时
       * </pre>
       */
      public int getTimeSet() {
        return timeSet_;
      }
      /**
       * <code>optional uint32 time_set = 1;</code>
       *
       * <pre>
       *按位处理 0-6为分别表示星期天、星期一-星期六,每位为1表示设置定时
       * </pre>
       */
      public Builder setTimeSet(int value) {
        bitField0_ |= 0x00000001;
        timeSet_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 time_set = 1;</code>
       *
       * <pre>
       *按位处理 0-6为分别表示星期天、星期一-星期六,每位为1表示设置定时
       * </pre>
       */
      public Builder clearTimeSet() {
        bitField0_ = (bitField0_ & ~0x00000001);
        timeSet_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 time_repeat = 2;
      private int timeRepeat_ ;
      /**
       * <code>optional uint32 time_repeat = 2;</code>
       *
       * <pre>
       *按位处理 0-6为分别表示星期天、星期一-星期六,每位为1表示重复定时
       * </pre>
       */
      public boolean hasTimeRepeat() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 time_repeat = 2;</code>
       *
       * <pre>
       *按位处理 0-6为分别表示星期天、星期一-星期六,每位为1表示重复定时
       * </pre>
       */
      public int getTimeRepeat() {
        return timeRepeat_;
      }
      /**
       * <code>optional uint32 time_repeat = 2;</code>
       *
       * <pre>
       *按位处理 0-6为分别表示星期天、星期一-星期六,每位为1表示重复定时
       * </pre>
       */
      public Builder setTimeRepeat(int value) {
        bitField0_ |= 0x00000002;
        timeRepeat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 time_repeat = 2;</code>
       *
       * <pre>
       *按位处理 0-6为分别表示星期天、星期一-星期六,每位为1表示重复定时
       * </pre>
       */
      public Builder clearTimeRepeat() {
        bitField0_ = (bitField0_ & ~0x00000002);
        timeRepeat_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 time_operate = 3;
      private int timeOperate_ ;
      /**
       * <code>optional uint32 time_operate = 3;</code>
       *
       * <pre>
       *按位处理 彩灯和单路都是用最低位，6路分别对应0-5位, 该位0表示关，1表示开
       * </pre>
       */
      public boolean hasTimeOperate() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 time_operate = 3;</code>
       *
       * <pre>
       *按位处理 彩灯和单路都是用最低位，6路分别对应0-5位, 该位0表示关，1表示开
       * </pre>
       */
      public int getTimeOperate() {
        return timeOperate_;
      }
      /**
       * <code>optional uint32 time_operate = 3;</code>
       *
       * <pre>
       *按位处理 彩灯和单路都是用最低位，6路分别对应0-5位, 该位0表示关，1表示开
       * </pre>
       */
      public Builder setTimeOperate(int value) {
        bitField0_ |= 0x00000004;
        timeOperate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 time_operate = 3;</code>
       *
       * <pre>
       *按位处理 彩灯和单路都是用最低位，6路分别对应0-5位, 该位0表示关，1表示开
       * </pre>
       */
      public Builder clearTimeOperate() {
        bitField0_ = (bitField0_ & ~0x00000004);
        timeOperate_ = 0;
        onChanged();
        return this;
      }

      // repeated uint32 time_stamp = 4;
      private java.util.List<Integer> timeStamp_ = java.util.Collections.emptyList();
      private void ensureTimeStampIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          timeStamp_ = new java.util.ArrayList<Integer>(timeStamp_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated uint32 time_stamp = 4;</code>
       *
       * <pre>
       *表示7个uint32，依次为星期天、星期一-星期六，记录7天中设置的时间戳，比如我设置了周一定时操作，0,1400000000,0,0,0,0,0
       * </pre>
       */
      public java.util.List<Integer>
          getTimeStampList() {
        return java.util.Collections.unmodifiableList(timeStamp_);
      }
      /**
       * <code>repeated uint32 time_stamp = 4;</code>
       *
       * <pre>
       *表示7个uint32，依次为星期天、星期一-星期六，记录7天中设置的时间戳，比如我设置了周一定时操作，0,1400000000,0,0,0,0,0
       * </pre>
       */
      public int getTimeStampCount() {
        return timeStamp_.size();
      }
      /**
       * <code>repeated uint32 time_stamp = 4;</code>
       *
       * <pre>
       *表示7个uint32，依次为星期天、星期一-星期六，记录7天中设置的时间戳，比如我设置了周一定时操作，0,1400000000,0,0,0,0,0
       * </pre>
       */
      public int getTimeStamp(int index) {
        return timeStamp_.get(index);
      }
      /**
       * <code>repeated uint32 time_stamp = 4;</code>
       *
       * <pre>
       *表示7个uint32，依次为星期天、星期一-星期六，记录7天中设置的时间戳，比如我设置了周一定时操作，0,1400000000,0,0,0,0,0
       * </pre>
       */
      public Builder setTimeStamp(
          int index, int value) {
        ensureTimeStampIsMutable();
        timeStamp_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 time_stamp = 4;</code>
       *
       * <pre>
       *表示7个uint32，依次为星期天、星期一-星期六，记录7天中设置的时间戳，比如我设置了周一定时操作，0,1400000000,0,0,0,0,0
       * </pre>
       */
      public Builder addTimeStamp(int value) {
        ensureTimeStampIsMutable();
        timeStamp_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 time_stamp = 4;</code>
       *
       * <pre>
       *表示7个uint32，依次为星期天、星期一-星期六，记录7天中设置的时间戳，比如我设置了周一定时操作，0,1400000000,0,0,0,0,0
       * </pre>
       */
      public Builder addAllTimeStamp(
          Iterable<? extends Integer> values) {
        ensureTimeStampIsMutable();
        super.addAll(values, timeStamp_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 time_stamp = 4;</code>
       *
       * <pre>
       *表示7个uint32，依次为星期天、星期一-星期六，记录7天中设置的时间戳，比如我设置了周一定时操作，0,1400000000,0,0,0,0,0
       * </pre>
       */
      public Builder clearTimeStamp() {
        timeStamp_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // optional uint32 time_isopen = 5;
      private int timeIsopen_ ;
      /**
       * <code>optional uint32 time_isopen = 5;</code>
       *
       * <pre>
       *表示客户端设置的是定时状态，0表示设置的是定时关闭，1表示设置的是定时开启
       * </pre>
       */
      public boolean hasTimeIsopen() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 time_isopen = 5;</code>
       *
       * <pre>
       *表示客户端设置的是定时状态，0表示设置的是定时关闭，1表示设置的是定时开启
       * </pre>
       */
      public int getTimeIsopen() {
        return timeIsopen_;
      }
      /**
       * <code>optional uint32 time_isopen = 5;</code>
       *
       * <pre>
       *表示客户端设置的是定时状态，0表示设置的是定时关闭，1表示设置的是定时开启
       * </pre>
       */
      public Builder setTimeIsopen(int value) {
        bitField0_ |= 0x00000010;
        timeIsopen_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 time_isopen = 5;</code>
       *
       * <pre>
       *表示客户端设置的是定时状态，0表示设置的是定时关闭，1表示设置的是定时开启
       * </pre>
       */
      public Builder clearTimeIsopen() {
        bitField0_ = (bitField0_ & ~0x00000010);
        timeIsopen_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 operate_index = 6;
      private int operateIndex_ ;
      /**
       * <code>optional uint32 operate_index = 6;</code>
       *
       * <pre>
       *表示operate执行的对应位是否执行，operate_index:0000001表示执行operate的第一位，即第一位
       * </pre>
       */
      public boolean hasOperateIndex() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 operate_index = 6;</code>
       *
       * <pre>
       *表示operate执行的对应位是否执行，operate_index:0000001表示执行operate的第一位，即第一位
       * </pre>
       */
      public int getOperateIndex() {
        return operateIndex_;
      }
      /**
       * <code>optional uint32 operate_index = 6;</code>
       *
       * <pre>
       *表示operate执行的对应位是否执行，operate_index:0000001表示执行operate的第一位，即第一位
       * </pre>
       */
      public Builder setOperateIndex(int value) {
        bitField0_ |= 0x00000020;
        operateIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 operate_index = 6;</code>
       *
       * <pre>
       *表示operate执行的对应位是否执行，operate_index:0000001表示执行operate的第一位，即第一位
       * </pre>
       */
      public Builder clearOperateIndex() {
        bitField0_ = (bitField0_ & ~0x00000020);
        operateIndex_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:nodepp.Timer)
    }

    static {
      defaultInstance = new Timer(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:nodepp.Timer)
  }

  public interface RgbOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint32 w = 1;
    /**
     * <code>optional uint32 w = 1;</code>
     *
     * <pre>
     *根据数值大小调节白色灯的亮暗
     * </pre>
     */
    boolean hasW();
    /**
     * <code>optional uint32 w = 1;</code>
     *
     * <pre>
     *根据数值大小调节白色灯的亮暗
     * </pre>
     */
    int getW();

    // optional uint32 r = 2;
    /**
     * <code>optional uint32 r = 2;</code>
     *
     * <pre>
     *根据数值大小调节red灯的亮暗
     * </pre>
     */
    boolean hasR();
    /**
     * <code>optional uint32 r = 2;</code>
     *
     * <pre>
     *根据数值大小调节red灯的亮暗
     * </pre>
     */
    int getR();

    // optional uint32 g = 3;
    /**
     * <code>optional uint32 g = 3;</code>
     *
     * <pre>
     *根据数值大小调节green灯的亮暗
     * </pre>
     */
    boolean hasG();
    /**
     * <code>optional uint32 g = 3;</code>
     *
     * <pre>
     *根据数值大小调节green灯的亮暗
     * </pre>
     */
    int getG();

    // optional uint32 b = 4;
    /**
     * <code>optional uint32 b = 4;</code>
     *
     * <pre>
     *根据数值大小调节blue灯的亮暗
     * </pre>
     */
    boolean hasB();
    /**
     * <code>optional uint32 b = 4;</code>
     *
     * <pre>
     *根据数值大小调节blue灯的亮暗
     * </pre>
     */
    int getB();
  }
  /**
   * Protobuf type {@code nodepp.Rgb}
   */
  public static final class Rgb extends
      com.google.protobuf.GeneratedMessage
      implements RgbOrBuilder {
    // Use Rgb.newBuilder() to construct.
    private Rgb(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Rgb(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Rgb defaultInstance;
    public static Rgb getDefaultInstance() {
      return defaultInstance;
    }

    public Rgb getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Rgb(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              w_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              r_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              g_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              b_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Nodepp.internal_static_nodepp_Rgb_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Nodepp.internal_static_nodepp_Rgb_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Rgb.class, Builder.class);
    }

    public static com.google.protobuf.Parser<Rgb> PARSER =
        new com.google.protobuf.AbstractParser<Rgb>() {
      public Rgb parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Rgb(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<Rgb> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional uint32 w = 1;
    public static final int W_FIELD_NUMBER = 1;
    private int w_;
    /**
     * <code>optional uint32 w = 1;</code>
     *
     * <pre>
     *根据数值大小调节白色灯的亮暗
     * </pre>
     */
    public boolean hasW() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 w = 1;</code>
     *
     * <pre>
     *根据数值大小调节白色灯的亮暗
     * </pre>
     */
    public int getW() {
      return w_;
    }

    // optional uint32 r = 2;
    public static final int R_FIELD_NUMBER = 2;
    private int r_;
    /**
     * <code>optional uint32 r = 2;</code>
     *
     * <pre>
     *根据数值大小调节red灯的亮暗
     * </pre>
     */
    public boolean hasR() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 r = 2;</code>
     *
     * <pre>
     *根据数值大小调节red灯的亮暗
     * </pre>
     */
    public int getR() {
      return r_;
    }

    // optional uint32 g = 3;
    public static final int G_FIELD_NUMBER = 3;
    private int g_;
    /**
     * <code>optional uint32 g = 3;</code>
     *
     * <pre>
     *根据数值大小调节green灯的亮暗
     * </pre>
     */
    public boolean hasG() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 g = 3;</code>
     *
     * <pre>
     *根据数值大小调节green灯的亮暗
     * </pre>
     */
    public int getG() {
      return g_;
    }

    // optional uint32 b = 4;
    public static final int B_FIELD_NUMBER = 4;
    private int b_;
    /**
     * <code>optional uint32 b = 4;</code>
     *
     * <pre>
     *根据数值大小调节blue灯的亮暗
     * </pre>
     */
    public boolean hasB() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 b = 4;</code>
     *
     * <pre>
     *根据数值大小调节blue灯的亮暗
     * </pre>
     */
    public int getB() {
      return b_;
    }

    private void initFields() {
      w_ = 0;
      r_ = 0;
      g_ = 0;
      b_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, w_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, r_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, g_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, b_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, w_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, r_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, g_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, b_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static Rgb parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Rgb parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Rgb parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Rgb parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Rgb parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Rgb parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static Rgb parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static Rgb parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static Rgb parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Rgb parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(Rgb prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code nodepp.Rgb}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements RgbOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Nodepp.internal_static_nodepp_Rgb_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Nodepp.internal_static_nodepp_Rgb_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Rgb.class, Builder.class);
      }

      // Construct using nodepp.Nodepp.Rgb.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        w_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        r_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        g_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        b_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Nodepp.internal_static_nodepp_Rgb_descriptor;
      }

      public Rgb getDefaultInstanceForType() {
        return Rgb.getDefaultInstance();
      }

      public Rgb build() {
        Rgb result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public Rgb buildPartial() {
        Rgb result = new Rgb(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.w_ = w_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.r_ = r_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.g_ = g_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.b_ = b_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Rgb) {
          return mergeFrom((Rgb)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Rgb other) {
        if (other == Rgb.getDefaultInstance()) return this;
        if (other.hasW()) {
          setW(other.getW());
        }
        if (other.hasR()) {
          setR(other.getR());
        }
        if (other.hasG()) {
          setG(other.getG());
        }
        if (other.hasB()) {
          setB(other.getB());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Rgb parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Rgb) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional uint32 w = 1;
      private int w_ ;
      /**
       * <code>optional uint32 w = 1;</code>
       *
       * <pre>
       *根据数值大小调节白色灯的亮暗
       * </pre>
       */
      public boolean hasW() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 w = 1;</code>
       *
       * <pre>
       *根据数值大小调节白色灯的亮暗
       * </pre>
       */
      public int getW() {
        return w_;
      }
      /**
       * <code>optional uint32 w = 1;</code>
       *
       * <pre>
       *根据数值大小调节白色灯的亮暗
       * </pre>
       */
      public Builder setW(int value) {
        bitField0_ |= 0x00000001;
        w_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 w = 1;</code>
       *
       * <pre>
       *根据数值大小调节白色灯的亮暗
       * </pre>
       */
      public Builder clearW() {
        bitField0_ = (bitField0_ & ~0x00000001);
        w_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 r = 2;
      private int r_ ;
      /**
       * <code>optional uint32 r = 2;</code>
       *
       * <pre>
       *根据数值大小调节red灯的亮暗
       * </pre>
       */
      public boolean hasR() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 r = 2;</code>
       *
       * <pre>
       *根据数值大小调节red灯的亮暗
       * </pre>
       */
      public int getR() {
        return r_;
      }
      /**
       * <code>optional uint32 r = 2;</code>
       *
       * <pre>
       *根据数值大小调节red灯的亮暗
       * </pre>
       */
      public Builder setR(int value) {
        bitField0_ |= 0x00000002;
        r_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 r = 2;</code>
       *
       * <pre>
       *根据数值大小调节red灯的亮暗
       * </pre>
       */
      public Builder clearR() {
        bitField0_ = (bitField0_ & ~0x00000002);
        r_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 g = 3;
      private int g_ ;
      /**
       * <code>optional uint32 g = 3;</code>
       *
       * <pre>
       *根据数值大小调节green灯的亮暗
       * </pre>
       */
      public boolean hasG() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 g = 3;</code>
       *
       * <pre>
       *根据数值大小调节green灯的亮暗
       * </pre>
       */
      public int getG() {
        return g_;
      }
      /**
       * <code>optional uint32 g = 3;</code>
       *
       * <pre>
       *根据数值大小调节green灯的亮暗
       * </pre>
       */
      public Builder setG(int value) {
        bitField0_ |= 0x00000004;
        g_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 g = 3;</code>
       *
       * <pre>
       *根据数值大小调节green灯的亮暗
       * </pre>
       */
      public Builder clearG() {
        bitField0_ = (bitField0_ & ~0x00000004);
        g_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 b = 4;
      private int b_ ;
      /**
       * <code>optional uint32 b = 4;</code>
       *
       * <pre>
       *根据数值大小调节blue灯的亮暗
       * </pre>
       */
      public boolean hasB() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 b = 4;</code>
       *
       * <pre>
       *根据数值大小调节blue灯的亮暗
       * </pre>
       */
      public int getB() {
        return b_;
      }
      /**
       * <code>optional uint32 b = 4;</code>
       *
       * <pre>
       *根据数值大小调节blue灯的亮暗
       * </pre>
       */
      public Builder setB(int value) {
        bitField0_ |= 0x00000008;
        b_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 b = 4;</code>
       *
       * <pre>
       *根据数值大小调节blue灯的亮暗
       * </pre>
       */
      public Builder clearB() {
        bitField0_ = (bitField0_ & ~0x00000008);
        b_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:nodepp.Rgb)
    }

    static {
      defaultInstance = new Rgb(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:nodepp.Rgb)
  }

  public interface DeviceOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional bytes device_name = 1;
    /**
     * <code>optional bytes device_name = 1;</code>
     *
     * <pre>
     *设备名称
     * </pre>
     */
    boolean hasDeviceName();
    /**
     * <code>optional bytes device_name = 1;</code>
     *
     * <pre>
     *设备名称
     * </pre>
     */
    com.google.protobuf.ByteString getDeviceName();

    // optional uint32 pictureIndex = 2;
    /**
     * <code>optional uint32 pictureIndex = 2;</code>
     *
     * <pre>
     *设备对应的图片
     * </pre>
     */
    boolean hasPictureIndex();
    /**
     * <code>optional uint32 pictureIndex = 2;</code>
     *
     * <pre>
     *设备对应的图片
     * </pre>
     */
    int getPictureIndex();

    // optional uint64 did = 3;
    /**
     * <code>optional uint64 did = 3;</code>
     *
     * <pre>
     *设备did
     * </pre>
     */
    boolean hasDid();
    /**
     * <code>optional uint64 did = 3;</code>
     *
     * <pre>
     *设备did
     * </pre>
     */
    long getDid();

    // optional uint64 tid = 4;
    /**
     * <code>optional uint64 tid = 4;</code>
     *
     * <pre>
     *设备tid
     * </pre>
     */
    boolean hasTid();
    /**
     * <code>optional uint64 tid = 4;</code>
     *
     * <pre>
     *设备tid
     * </pre>
     */
    long getTid();

    // optional uint32 device_type = 5;
    /**
     * <code>optional uint32 device_type = 5;</code>
     *
     * <pre>
     *设备类型，0表示不确定什么类型，1表示普通1路控制灯，2表示普通6路控制灯，3表示彩光灯
     * </pre>
     */
    boolean hasDeviceType();
    /**
     * <code>optional uint32 device_type = 5;</code>
     *
     * <pre>
     *设备类型，0表示不确定什么类型，1表示普通1路控制灯，2表示普通6路控制灯，3表示彩光灯
     * </pre>
     */
    int getDeviceType();

    // optional uint32 conneted_mode = 6;
    /**
     * <code>optional uint32 conneted_mode = 6;</code>
     *
     * <pre>
     *&#47;设备连接类型，0表示互联网连接控制，1表示近场局域网控制
     * </pre>
     */
    boolean hasConnetedMode();
    /**
     * <code>optional uint32 conneted_mode = 6;</code>
     *
     * <pre>
     *&#47;设备连接类型，0表示互联网连接控制，1表示近场局域网控制
     * </pre>
     */
    int getConnetedMode();

    // optional uint32 is_group = 7;
    /**
     * <code>optional uint32 is_group = 7;</code>
     *
     * <pre>
     *0代表不是，1代表是群组控制
     * </pre>
     */
    boolean hasIsGroup();
    /**
     * <code>optional uint32 is_group = 7;</code>
     *
     * <pre>
     *0代表不是，1代表是群组控制
     * </pre>
     */
    int getIsGroup();

    // optional bytes device_group_tids = 8;
    /**
     * <code>optional bytes device_group_tids = 8;</code>
     *
     * <pre>
     *群组设备的tid集合
     * </pre>
     */
    boolean hasDeviceGroupTids();
    /**
     * <code>optional bytes device_group_tids = 8;</code>
     *
     * <pre>
     *群组设备的tid集合
     * </pre>
     */
    com.google.protobuf.ByteString getDeviceGroupTids();

    // optional bytes device_group_dids = 9;
    /**
     * <code>optional bytes device_group_dids = 9;</code>
     *
     * <pre>
     *群组设备的did集合
     * </pre>
     */
    boolean hasDeviceGroupDids();
    /**
     * <code>optional bytes device_group_dids = 9;</code>
     *
     * <pre>
     *群组设备的did集合
     * </pre>
     */
    com.google.protobuf.ByteString getDeviceGroupDids();

    // optional bytes device_ip = 10;
    /**
     * <code>optional bytes device_ip = 10;</code>
     *
     * <pre>
     *单个设备的局域网ip
     * </pre>
     */
    boolean hasDeviceIp();
    /**
     * <code>optional bytes device_ip = 10;</code>
     *
     * <pre>
     *单个设备的局域网ip
     * </pre>
     */
    com.google.protobuf.ByteString getDeviceIp();

    // optional bytes device_ips = 11;
    /**
     * <code>optional bytes device_ips = 11;</code>
     *
     * <pre>
     *群组设备局域网ip集合 （字符串"ip1;ip2;ip3"）
     * </pre>
     */
    boolean hasDeviceIps();
    /**
     * <code>optional bytes device_ips = 11;</code>
     *
     * <pre>
     *群组设备局域网ip集合 （字符串"ip1;ip2;ip3"）
     * </pre>
     */
    com.google.protobuf.ByteString getDeviceIps();

    // optional bytes routerMac = 12;
    /**
     * <code>optional bytes routerMac = 12;</code>
     *
     * <pre>
     *添加设备时的路由器mac地址
     * </pre>
     */
    boolean hasRouterMac();
    /**
     * <code>optional bytes routerMac = 12;</code>
     *
     * <pre>
     *添加设备时的路由器mac地址
     * </pre>
     */
    com.google.protobuf.ByteString getRouterMac();

    // optional uint32 special = 13;
    /**
     * <code>optional uint32 special = 13;</code>
     *
     * <pre>
     *是否是通过共享得到设备，1代表是，0不是
     * </pre>
     */
    boolean hasSpecial();
    /**
     * <code>optional uint32 special = 13;</code>
     *
     * <pre>
     *是否是通过共享得到设备，1代表是，0不是
     * </pre>
     */
    int getSpecial();

    // repeated .nodepp.Timer timers = 14;
    /**
     * <code>repeated .nodepp.Timer timers = 14;</code>
     *
     * <pre>
     *当前定时器设置
     * </pre>
     */
    java.util.List<Timer>
        getTimersList();
    /**
     * <code>repeated .nodepp.Timer timers = 14;</code>
     *
     * <pre>
     *当前定时器设置
     * </pre>
     */
    Timer getTimers(int index);
    /**
     * <code>repeated .nodepp.Timer timers = 14;</code>
     *
     * <pre>
     *当前定时器设置
     * </pre>
     */
    int getTimersCount();
    /**
     * <code>repeated .nodepp.Timer timers = 14;</code>
     *
     * <pre>
     *当前定时器设置
     * </pre>
     */
    java.util.List<? extends TimerOrBuilder>
        getTimersOrBuilderList();
    /**
     * <code>repeated .nodepp.Timer timers = 14;</code>
     *
     * <pre>
     *当前定时器设置
     * </pre>
     */
    TimerOrBuilder getTimersOrBuilder(
            int index);
  }
  /**
   * Protobuf type {@code nodepp.Device}
   */
  public static final class Device extends
      com.google.protobuf.GeneratedMessage
      implements DeviceOrBuilder {
    // Use Device.newBuilder() to construct.
    private Device(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Device(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Device defaultInstance;
    public static Device getDefaultInstance() {
      return defaultInstance;
    }

    public Device getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Device(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              deviceName_ = input.readBytes();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              pictureIndex_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              did_ = input.readUInt64();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              tid_ = input.readUInt64();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              deviceType_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              connetedMode_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              isGroup_ = input.readUInt32();
              break;
            }
            case 66: {
              bitField0_ |= 0x00000080;
              deviceGroupTids_ = input.readBytes();
              break;
            }
            case 74: {
              bitField0_ |= 0x00000100;
              deviceGroupDids_ = input.readBytes();
              break;
            }
            case 82: {
              bitField0_ |= 0x00000200;
              deviceIp_ = input.readBytes();
              break;
            }
            case 90: {
              bitField0_ |= 0x00000400;
              deviceIps_ = input.readBytes();
              break;
            }
            case 98: {
              bitField0_ |= 0x00000800;
              routerMac_ = input.readBytes();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              special_ = input.readUInt32();
              break;
            }
            case 114: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                timers_ = new java.util.ArrayList<Timer>();
                mutable_bitField0_ |= 0x00002000;
              }
              timers_.add(input.readMessage(Timer.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          timers_ = java.util.Collections.unmodifiableList(timers_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Nodepp.internal_static_nodepp_Device_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Nodepp.internal_static_nodepp_Device_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Device.class, Builder.class);
    }

    public static com.google.protobuf.Parser<Device> PARSER =
        new com.google.protobuf.AbstractParser<Device>() {
      public Device parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Device(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<Device> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional bytes device_name = 1;
    public static final int DEVICE_NAME_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString deviceName_;
    /**
     * <code>optional bytes device_name = 1;</code>
     *
     * <pre>
     *设备名称
     * </pre>
     */
    public boolean hasDeviceName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bytes device_name = 1;</code>
     *
     * <pre>
     *设备名称
     * </pre>
     */
    public com.google.protobuf.ByteString getDeviceName() {
      return deviceName_;
    }

    // optional uint32 pictureIndex = 2;
    public static final int PICTUREINDEX_FIELD_NUMBER = 2;
    private int pictureIndex_;
    /**
     * <code>optional uint32 pictureIndex = 2;</code>
     *
     * <pre>
     *设备对应的图片
     * </pre>
     */
    public boolean hasPictureIndex() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 pictureIndex = 2;</code>
     *
     * <pre>
     *设备对应的图片
     * </pre>
     */
    public int getPictureIndex() {
      return pictureIndex_;
    }

    // optional uint64 did = 3;
    public static final int DID_FIELD_NUMBER = 3;
    private long did_;
    /**
     * <code>optional uint64 did = 3;</code>
     *
     * <pre>
     *设备did
     * </pre>
     */
    public boolean hasDid() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint64 did = 3;</code>
     *
     * <pre>
     *设备did
     * </pre>
     */
    public long getDid() {
      return did_;
    }

    // optional uint64 tid = 4;
    public static final int TID_FIELD_NUMBER = 4;
    private long tid_;
    /**
     * <code>optional uint64 tid = 4;</code>
     *
     * <pre>
     *设备tid
     * </pre>
     */
    public boolean hasTid() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint64 tid = 4;</code>
     *
     * <pre>
     *设备tid
     * </pre>
     */
    public long getTid() {
      return tid_;
    }

    // optional uint32 device_type = 5;
    public static final int DEVICE_TYPE_FIELD_NUMBER = 5;
    private int deviceType_;
    /**
     * <code>optional uint32 device_type = 5;</code>
     *
     * <pre>
     *设备类型，0表示不确定什么类型，1表示普通1路控制灯，2表示普通6路控制灯，3表示彩光灯
     * </pre>
     */
    public boolean hasDeviceType() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 device_type = 5;</code>
     *
     * <pre>
     *设备类型，0表示不确定什么类型，1表示普通1路控制灯，2表示普通6路控制灯，3表示彩光灯
     * </pre>
     */
    public int getDeviceType() {
      return deviceType_;
    }

    // optional uint32 conneted_mode = 6;
    public static final int CONNETED_MODE_FIELD_NUMBER = 6;
    private int connetedMode_;
    /**
     * <code>optional uint32 conneted_mode = 6;</code>
     *
     * <pre>
     *&#47;设备连接类型，0表示互联网连接控制，1表示近场局域网控制
     * </pre>
     */
    public boolean hasConnetedMode() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 conneted_mode = 6;</code>
     *
     * <pre>
     *&#47;设备连接类型，0表示互联网连接控制，1表示近场局域网控制
     * </pre>
     */
    public int getConnetedMode() {
      return connetedMode_;
    }

    // optional uint32 is_group = 7;
    public static final int IS_GROUP_FIELD_NUMBER = 7;
    private int isGroup_;
    /**
     * <code>optional uint32 is_group = 7;</code>
     *
     * <pre>
     *0代表不是，1代表是群组控制
     * </pre>
     */
    public boolean hasIsGroup() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 is_group = 7;</code>
     *
     * <pre>
     *0代表不是，1代表是群组控制
     * </pre>
     */
    public int getIsGroup() {
      return isGroup_;
    }

    // optional bytes device_group_tids = 8;
    public static final int DEVICE_GROUP_TIDS_FIELD_NUMBER = 8;
    private com.google.protobuf.ByteString deviceGroupTids_;
    /**
     * <code>optional bytes device_group_tids = 8;</code>
     *
     * <pre>
     *群组设备的tid集合
     * </pre>
     */
    public boolean hasDeviceGroupTids() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional bytes device_group_tids = 8;</code>
     *
     * <pre>
     *群组设备的tid集合
     * </pre>
     */
    public com.google.protobuf.ByteString getDeviceGroupTids() {
      return deviceGroupTids_;
    }

    // optional bytes device_group_dids = 9;
    public static final int DEVICE_GROUP_DIDS_FIELD_NUMBER = 9;
    private com.google.protobuf.ByteString deviceGroupDids_;
    /**
     * <code>optional bytes device_group_dids = 9;</code>
     *
     * <pre>
     *群组设备的did集合
     * </pre>
     */
    public boolean hasDeviceGroupDids() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional bytes device_group_dids = 9;</code>
     *
     * <pre>
     *群组设备的did集合
     * </pre>
     */
    public com.google.protobuf.ByteString getDeviceGroupDids() {
      return deviceGroupDids_;
    }

    // optional bytes device_ip = 10;
    public static final int DEVICE_IP_FIELD_NUMBER = 10;
    private com.google.protobuf.ByteString deviceIp_;
    /**
     * <code>optional bytes device_ip = 10;</code>
     *
     * <pre>
     *单个设备的局域网ip
     * </pre>
     */
    public boolean hasDeviceIp() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional bytes device_ip = 10;</code>
     *
     * <pre>
     *单个设备的局域网ip
     * </pre>
     */
    public com.google.protobuf.ByteString getDeviceIp() {
      return deviceIp_;
    }

    // optional bytes device_ips = 11;
    public static final int DEVICE_IPS_FIELD_NUMBER = 11;
    private com.google.protobuf.ByteString deviceIps_;
    /**
     * <code>optional bytes device_ips = 11;</code>
     *
     * <pre>
     *群组设备局域网ip集合 （字符串"ip1;ip2;ip3"）
     * </pre>
     */
    public boolean hasDeviceIps() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional bytes device_ips = 11;</code>
     *
     * <pre>
     *群组设备局域网ip集合 （字符串"ip1;ip2;ip3"）
     * </pre>
     */
    public com.google.protobuf.ByteString getDeviceIps() {
      return deviceIps_;
    }

    // optional bytes routerMac = 12;
    public static final int ROUTERMAC_FIELD_NUMBER = 12;
    private com.google.protobuf.ByteString routerMac_;
    /**
     * <code>optional bytes routerMac = 12;</code>
     *
     * <pre>
     *添加设备时的路由器mac地址
     * </pre>
     */
    public boolean hasRouterMac() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional bytes routerMac = 12;</code>
     *
     * <pre>
     *添加设备时的路由器mac地址
     * </pre>
     */
    public com.google.protobuf.ByteString getRouterMac() {
      return routerMac_;
    }

    // optional uint32 special = 13;
    public static final int SPECIAL_FIELD_NUMBER = 13;
    private int special_;
    /**
     * <code>optional uint32 special = 13;</code>
     *
     * <pre>
     *是否是通过共享得到设备，1代表是，0不是
     * </pre>
     */
    public boolean hasSpecial() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional uint32 special = 13;</code>
     *
     * <pre>
     *是否是通过共享得到设备，1代表是，0不是
     * </pre>
     */
    public int getSpecial() {
      return special_;
    }

    // repeated .nodepp.Timer timers = 14;
    public static final int TIMERS_FIELD_NUMBER = 14;
    private java.util.List<Timer> timers_;
    /**
     * <code>repeated .nodepp.Timer timers = 14;</code>
     *
     * <pre>
     *当前定时器设置
     * </pre>
     */
    public java.util.List<Timer> getTimersList() {
      return timers_;
    }
    /**
     * <code>repeated .nodepp.Timer timers = 14;</code>
     *
     * <pre>
     *当前定时器设置
     * </pre>
     */
    public java.util.List<? extends TimerOrBuilder>
        getTimersOrBuilderList() {
      return timers_;
    }
    /**
     * <code>repeated .nodepp.Timer timers = 14;</code>
     *
     * <pre>
     *当前定时器设置
     * </pre>
     */
    public int getTimersCount() {
      return timers_.size();
    }
    /**
     * <code>repeated .nodepp.Timer timers = 14;</code>
     *
     * <pre>
     *当前定时器设置
     * </pre>
     */
    public Timer getTimers(int index) {
      return timers_.get(index);
    }
    /**
     * <code>repeated .nodepp.Timer timers = 14;</code>
     *
     * <pre>
     *当前定时器设置
     * </pre>
     */
    public TimerOrBuilder getTimersOrBuilder(
        int index) {
      return timers_.get(index);
    }

    private void initFields() {
      deviceName_ = com.google.protobuf.ByteString.EMPTY;
      pictureIndex_ = 0;
      did_ = 0L;
      tid_ = 0L;
      deviceType_ = 0;
      connetedMode_ = 0;
      isGroup_ = 0;
      deviceGroupTids_ = com.google.protobuf.ByteString.EMPTY;
      deviceGroupDids_ = com.google.protobuf.ByteString.EMPTY;
      deviceIp_ = com.google.protobuf.ByteString.EMPTY;
      deviceIps_ = com.google.protobuf.ByteString.EMPTY;
      routerMac_ = com.google.protobuf.ByteString.EMPTY;
      special_ = 0;
      timers_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, deviceName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, pictureIndex_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt64(3, did_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt64(4, tid_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, deviceType_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, connetedMode_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, isGroup_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBytes(8, deviceGroupTids_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBytes(9, deviceGroupDids_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBytes(10, deviceIp_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBytes(11, deviceIps_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeBytes(12, routerMac_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeUInt32(13, special_);
      }
      for (int i = 0; i < timers_.size(); i++) {
        output.writeMessage(14, timers_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, deviceName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, pictureIndex_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, did_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, tid_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, deviceType_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, connetedMode_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, isGroup_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(8, deviceGroupTids_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(9, deviceGroupDids_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(10, deviceIp_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(11, deviceIps_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(12, routerMac_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(13, special_);
      }
      for (int i = 0; i < timers_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, timers_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static Device parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Device parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Device parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Device parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Device parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Device parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static Device parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static Device parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static Device parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Device parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(Device prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code nodepp.Device}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements DeviceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Nodepp.internal_static_nodepp_Device_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Nodepp.internal_static_nodepp_Device_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Device.class, Builder.class);
      }

      // Construct using nodepp.Nodepp.Device.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTimersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        deviceName_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        pictureIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        did_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        tid_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000008);
        deviceType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        connetedMode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        isGroup_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        deviceGroupTids_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000080);
        deviceGroupDids_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000100);
        deviceIp_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000200);
        deviceIps_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000400);
        routerMac_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000800);
        special_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        if (timersBuilder_ == null) {
          timers_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00002000);
        } else {
          timersBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Nodepp.internal_static_nodepp_Device_descriptor;
      }

      public Device getDefaultInstanceForType() {
        return Device.getDefaultInstance();
      }

      public Device build() {
        Device result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public Device buildPartial() {
        Device result = new Device(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.deviceName_ = deviceName_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.pictureIndex_ = pictureIndex_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.did_ = did_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.tid_ = tid_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.deviceType_ = deviceType_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.connetedMode_ = connetedMode_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.isGroup_ = isGroup_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.deviceGroupTids_ = deviceGroupTids_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.deviceGroupDids_ = deviceGroupDids_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.deviceIp_ = deviceIp_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.deviceIps_ = deviceIps_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.routerMac_ = routerMac_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.special_ = special_;
        if (timersBuilder_ == null) {
          if (((bitField0_ & 0x00002000) == 0x00002000)) {
            timers_ = java.util.Collections.unmodifiableList(timers_);
            bitField0_ = (bitField0_ & ~0x00002000);
          }
          result.timers_ = timers_;
        } else {
          result.timers_ = timersBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Device) {
          return mergeFrom((Device)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Device other) {
        if (other == Device.getDefaultInstance()) return this;
        if (other.hasDeviceName()) {
          setDeviceName(other.getDeviceName());
        }
        if (other.hasPictureIndex()) {
          setPictureIndex(other.getPictureIndex());
        }
        if (other.hasDid()) {
          setDid(other.getDid());
        }
        if (other.hasTid()) {
          setTid(other.getTid());
        }
        if (other.hasDeviceType()) {
          setDeviceType(other.getDeviceType());
        }
        if (other.hasConnetedMode()) {
          setConnetedMode(other.getConnetedMode());
        }
        if (other.hasIsGroup()) {
          setIsGroup(other.getIsGroup());
        }
        if (other.hasDeviceGroupTids()) {
          setDeviceGroupTids(other.getDeviceGroupTids());
        }
        if (other.hasDeviceGroupDids()) {
          setDeviceGroupDids(other.getDeviceGroupDids());
        }
        if (other.hasDeviceIp()) {
          setDeviceIp(other.getDeviceIp());
        }
        if (other.hasDeviceIps()) {
          setDeviceIps(other.getDeviceIps());
        }
        if (other.hasRouterMac()) {
          setRouterMac(other.getRouterMac());
        }
        if (other.hasSpecial()) {
          setSpecial(other.getSpecial());
        }
        if (timersBuilder_ == null) {
          if (!other.timers_.isEmpty()) {
            if (timers_.isEmpty()) {
              timers_ = other.timers_;
              bitField0_ = (bitField0_ & ~0x00002000);
            } else {
              ensureTimersIsMutable();
              timers_.addAll(other.timers_);
            }
            onChanged();
          }
        } else {
          if (!other.timers_.isEmpty()) {
            if (timersBuilder_.isEmpty()) {
              timersBuilder_.dispose();
              timersBuilder_ = null;
              timers_ = other.timers_;
              bitField0_ = (bitField0_ & ~0x00002000);
              timersBuilder_ =
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTimersFieldBuilder() : null;
            } else {
              timersBuilder_.addAllMessages(other.timers_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Device parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Device) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional bytes device_name = 1;
      private com.google.protobuf.ByteString deviceName_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes device_name = 1;</code>
       *
       * <pre>
       *设备名称
       * </pre>
       */
      public boolean hasDeviceName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bytes device_name = 1;</code>
       *
       * <pre>
       *设备名称
       * </pre>
       */
      public com.google.protobuf.ByteString getDeviceName() {
        return deviceName_;
      }
      /**
       * <code>optional bytes device_name = 1;</code>
       *
       * <pre>
       *设备名称
       * </pre>
       */
      public Builder setDeviceName(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        deviceName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes device_name = 1;</code>
       *
       * <pre>
       *设备名称
       * </pre>
       */
      public Builder clearDeviceName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        deviceName_ = getDefaultInstance().getDeviceName();
        onChanged();
        return this;
      }

      // optional uint32 pictureIndex = 2;
      private int pictureIndex_ ;
      /**
       * <code>optional uint32 pictureIndex = 2;</code>
       *
       * <pre>
       *设备对应的图片
       * </pre>
       */
      public boolean hasPictureIndex() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 pictureIndex = 2;</code>
       *
       * <pre>
       *设备对应的图片
       * </pre>
       */
      public int getPictureIndex() {
        return pictureIndex_;
      }
      /**
       * <code>optional uint32 pictureIndex = 2;</code>
       *
       * <pre>
       *设备对应的图片
       * </pre>
       */
      public Builder setPictureIndex(int value) {
        bitField0_ |= 0x00000002;
        pictureIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 pictureIndex = 2;</code>
       *
       * <pre>
       *设备对应的图片
       * </pre>
       */
      public Builder clearPictureIndex() {
        bitField0_ = (bitField0_ & ~0x00000002);
        pictureIndex_ = 0;
        onChanged();
        return this;
      }

      // optional uint64 did = 3;
      private long did_ ;
      /**
       * <code>optional uint64 did = 3;</code>
       *
       * <pre>
       *设备did
       * </pre>
       */
      public boolean hasDid() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint64 did = 3;</code>
       *
       * <pre>
       *设备did
       * </pre>
       */
      public long getDid() {
        return did_;
      }
      /**
       * <code>optional uint64 did = 3;</code>
       *
       * <pre>
       *设备did
       * </pre>
       */
      public Builder setDid(long value) {
        bitField0_ |= 0x00000004;
        did_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 did = 3;</code>
       *
       * <pre>
       *设备did
       * </pre>
       */
      public Builder clearDid() {
        bitField0_ = (bitField0_ & ~0x00000004);
        did_ = 0L;
        onChanged();
        return this;
      }

      // optional uint64 tid = 4;
      private long tid_ ;
      /**
       * <code>optional uint64 tid = 4;</code>
       *
       * <pre>
       *设备tid
       * </pre>
       */
      public boolean hasTid() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint64 tid = 4;</code>
       *
       * <pre>
       *设备tid
       * </pre>
       */
      public long getTid() {
        return tid_;
      }
      /**
       * <code>optional uint64 tid = 4;</code>
       *
       * <pre>
       *设备tid
       * </pre>
       */
      public Builder setTid(long value) {
        bitField0_ |= 0x00000008;
        tid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 tid = 4;</code>
       *
       * <pre>
       *设备tid
       * </pre>
       */
      public Builder clearTid() {
        bitField0_ = (bitField0_ & ~0x00000008);
        tid_ = 0L;
        onChanged();
        return this;
      }

      // optional uint32 device_type = 5;
      private int deviceType_ ;
      /**
       * <code>optional uint32 device_type = 5;</code>
       *
       * <pre>
       *设备类型，0表示不确定什么类型，1表示普通1路控制灯，2表示普通6路控制灯，3表示彩光灯
       * </pre>
       */
      public boolean hasDeviceType() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 device_type = 5;</code>
       *
       * <pre>
       *设备类型，0表示不确定什么类型，1表示普通1路控制灯，2表示普通6路控制灯，3表示彩光灯
       * </pre>
       */
      public int getDeviceType() {
        return deviceType_;
      }
      /**
       * <code>optional uint32 device_type = 5;</code>
       *
       * <pre>
       *设备类型，0表示不确定什么类型，1表示普通1路控制灯，2表示普通6路控制灯，3表示彩光灯
       * </pre>
       */
      public Builder setDeviceType(int value) {
        bitField0_ |= 0x00000010;
        deviceType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 device_type = 5;</code>
       *
       * <pre>
       *设备类型，0表示不确定什么类型，1表示普通1路控制灯，2表示普通6路控制灯，3表示彩光灯
       * </pre>
       */
      public Builder clearDeviceType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        deviceType_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 conneted_mode = 6;
      private int connetedMode_ ;
      /**
       * <code>optional uint32 conneted_mode = 6;</code>
       *
       * <pre>
       *&#47;设备连接类型，0表示互联网连接控制，1表示近场局域网控制
       * </pre>
       */
      public boolean hasConnetedMode() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 conneted_mode = 6;</code>
       *
       * <pre>
       *&#47;设备连接类型，0表示互联网连接控制，1表示近场局域网控制
       * </pre>
       */
      public int getConnetedMode() {
        return connetedMode_;
      }
      /**
       * <code>optional uint32 conneted_mode = 6;</code>
       *
       * <pre>
       *&#47;设备连接类型，0表示互联网连接控制，1表示近场局域网控制
       * </pre>
       */
      public Builder setConnetedMode(int value) {
        bitField0_ |= 0x00000020;
        connetedMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 conneted_mode = 6;</code>
       *
       * <pre>
       *&#47;设备连接类型，0表示互联网连接控制，1表示近场局域网控制
       * </pre>
       */
      public Builder clearConnetedMode() {
        bitField0_ = (bitField0_ & ~0x00000020);
        connetedMode_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 is_group = 7;
      private int isGroup_ ;
      /**
       * <code>optional uint32 is_group = 7;</code>
       *
       * <pre>
       *0代表不是，1代表是群组控制
       * </pre>
       */
      public boolean hasIsGroup() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 is_group = 7;</code>
       *
       * <pre>
       *0代表不是，1代表是群组控制
       * </pre>
       */
      public int getIsGroup() {
        return isGroup_;
      }
      /**
       * <code>optional uint32 is_group = 7;</code>
       *
       * <pre>
       *0代表不是，1代表是群组控制
       * </pre>
       */
      public Builder setIsGroup(int value) {
        bitField0_ |= 0x00000040;
        isGroup_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 is_group = 7;</code>
       *
       * <pre>
       *0代表不是，1代表是群组控制
       * </pre>
       */
      public Builder clearIsGroup() {
        bitField0_ = (bitField0_ & ~0x00000040);
        isGroup_ = 0;
        onChanged();
        return this;
      }

      // optional bytes device_group_tids = 8;
      private com.google.protobuf.ByteString deviceGroupTids_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes device_group_tids = 8;</code>
       *
       * <pre>
       *群组设备的tid集合
       * </pre>
       */
      public boolean hasDeviceGroupTids() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional bytes device_group_tids = 8;</code>
       *
       * <pre>
       *群组设备的tid集合
       * </pre>
       */
      public com.google.protobuf.ByteString getDeviceGroupTids() {
        return deviceGroupTids_;
      }
      /**
       * <code>optional bytes device_group_tids = 8;</code>
       *
       * <pre>
       *群组设备的tid集合
       * </pre>
       */
      public Builder setDeviceGroupTids(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        deviceGroupTids_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes device_group_tids = 8;</code>
       *
       * <pre>
       *群组设备的tid集合
       * </pre>
       */
      public Builder clearDeviceGroupTids() {
        bitField0_ = (bitField0_ & ~0x00000080);
        deviceGroupTids_ = getDefaultInstance().getDeviceGroupTids();
        onChanged();
        return this;
      }

      // optional bytes device_group_dids = 9;
      private com.google.protobuf.ByteString deviceGroupDids_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes device_group_dids = 9;</code>
       *
       * <pre>
       *群组设备的did集合
       * </pre>
       */
      public boolean hasDeviceGroupDids() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional bytes device_group_dids = 9;</code>
       *
       * <pre>
       *群组设备的did集合
       * </pre>
       */
      public com.google.protobuf.ByteString getDeviceGroupDids() {
        return deviceGroupDids_;
      }
      /**
       * <code>optional bytes device_group_dids = 9;</code>
       *
       * <pre>
       *群组设备的did集合
       * </pre>
       */
      public Builder setDeviceGroupDids(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
        deviceGroupDids_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes device_group_dids = 9;</code>
       *
       * <pre>
       *群组设备的did集合
       * </pre>
       */
      public Builder clearDeviceGroupDids() {
        bitField0_ = (bitField0_ & ~0x00000100);
        deviceGroupDids_ = getDefaultInstance().getDeviceGroupDids();
        onChanged();
        return this;
      }

      // optional bytes device_ip = 10;
      private com.google.protobuf.ByteString deviceIp_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes device_ip = 10;</code>
       *
       * <pre>
       *单个设备的局域网ip
       * </pre>
       */
      public boolean hasDeviceIp() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional bytes device_ip = 10;</code>
       *
       * <pre>
       *单个设备的局域网ip
       * </pre>
       */
      public com.google.protobuf.ByteString getDeviceIp() {
        return deviceIp_;
      }
      /**
       * <code>optional bytes device_ip = 10;</code>
       *
       * <pre>
       *单个设备的局域网ip
       * </pre>
       */
      public Builder setDeviceIp(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        deviceIp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes device_ip = 10;</code>
       *
       * <pre>
       *单个设备的局域网ip
       * </pre>
       */
      public Builder clearDeviceIp() {
        bitField0_ = (bitField0_ & ~0x00000200);
        deviceIp_ = getDefaultInstance().getDeviceIp();
        onChanged();
        return this;
      }

      // optional bytes device_ips = 11;
      private com.google.protobuf.ByteString deviceIps_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes device_ips = 11;</code>
       *
       * <pre>
       *群组设备局域网ip集合 （字符串"ip1;ip2;ip3"）
       * </pre>
       */
      public boolean hasDeviceIps() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional bytes device_ips = 11;</code>
       *
       * <pre>
       *群组设备局域网ip集合 （字符串"ip1;ip2;ip3"）
       * </pre>
       */
      public com.google.protobuf.ByteString getDeviceIps() {
        return deviceIps_;
      }
      /**
       * <code>optional bytes device_ips = 11;</code>
       *
       * <pre>
       *群组设备局域网ip集合 （字符串"ip1;ip2;ip3"）
       * </pre>
       */
      public Builder setDeviceIps(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
        deviceIps_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes device_ips = 11;</code>
       *
       * <pre>
       *群组设备局域网ip集合 （字符串"ip1;ip2;ip3"）
       * </pre>
       */
      public Builder clearDeviceIps() {
        bitField0_ = (bitField0_ & ~0x00000400);
        deviceIps_ = getDefaultInstance().getDeviceIps();
        onChanged();
        return this;
      }

      // optional bytes routerMac = 12;
      private com.google.protobuf.ByteString routerMac_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes routerMac = 12;</code>
       *
       * <pre>
       *添加设备时的路由器mac地址
       * </pre>
       */
      public boolean hasRouterMac() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional bytes routerMac = 12;</code>
       *
       * <pre>
       *添加设备时的路由器mac地址
       * </pre>
       */
      public com.google.protobuf.ByteString getRouterMac() {
        return routerMac_;
      }
      /**
       * <code>optional bytes routerMac = 12;</code>
       *
       * <pre>
       *添加设备时的路由器mac地址
       * </pre>
       */
      public Builder setRouterMac(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        routerMac_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes routerMac = 12;</code>
       *
       * <pre>
       *添加设备时的路由器mac地址
       * </pre>
       */
      public Builder clearRouterMac() {
        bitField0_ = (bitField0_ & ~0x00000800);
        routerMac_ = getDefaultInstance().getRouterMac();
        onChanged();
        return this;
      }

      // optional uint32 special = 13;
      private int special_ ;
      /**
       * <code>optional uint32 special = 13;</code>
       *
       * <pre>
       *是否是通过共享得到设备，1代表是，0不是
       * </pre>
       */
      public boolean hasSpecial() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional uint32 special = 13;</code>
       *
       * <pre>
       *是否是通过共享得到设备，1代表是，0不是
       * </pre>
       */
      public int getSpecial() {
        return special_;
      }
      /**
       * <code>optional uint32 special = 13;</code>
       *
       * <pre>
       *是否是通过共享得到设备，1代表是，0不是
       * </pre>
       */
      public Builder setSpecial(int value) {
        bitField0_ |= 0x00001000;
        special_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 special = 13;</code>
       *
       * <pre>
       *是否是通过共享得到设备，1代表是，0不是
       * </pre>
       */
      public Builder clearSpecial() {
        bitField0_ = (bitField0_ & ~0x00001000);
        special_ = 0;
        onChanged();
        return this;
      }

      // repeated .nodepp.Timer timers = 14;
      private java.util.List<Timer> timers_ =
        java.util.Collections.emptyList();
      private void ensureTimersIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          timers_ = new java.util.ArrayList<Timer>(timers_);
          bitField0_ |= 0x00002000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          Timer, Timer.Builder, TimerOrBuilder> timersBuilder_;

      /**
       * <code>repeated .nodepp.Timer timers = 14;</code>
       *
       * <pre>
       *当前定时器设置
       * </pre>
       */
      public java.util.List<Timer> getTimersList() {
        if (timersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(timers_);
        } else {
          return timersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .nodepp.Timer timers = 14;</code>
       *
       * <pre>
       *当前定时器设置
       * </pre>
       */
      public int getTimersCount() {
        if (timersBuilder_ == null) {
          return timers_.size();
        } else {
          return timersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .nodepp.Timer timers = 14;</code>
       *
       * <pre>
       *当前定时器设置
       * </pre>
       */
      public Timer getTimers(int index) {
        if (timersBuilder_ == null) {
          return timers_.get(index);
        } else {
          return timersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .nodepp.Timer timers = 14;</code>
       *
       * <pre>
       *当前定时器设置
       * </pre>
       */
      public Builder setTimers(
          int index, Timer value) {
        if (timersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimersIsMutable();
          timers_.set(index, value);
          onChanged();
        } else {
          timersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Timer timers = 14;</code>
       *
       * <pre>
       *当前定时器设置
       * </pre>
       */
      public Builder setTimers(
          int index, Timer.Builder builderForValue) {
        if (timersBuilder_ == null) {
          ensureTimersIsMutable();
          timers_.set(index, builderForValue.build());
          onChanged();
        } else {
          timersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Timer timers = 14;</code>
       *
       * <pre>
       *当前定时器设置
       * </pre>
       */
      public Builder addTimers(Timer value) {
        if (timersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimersIsMutable();
          timers_.add(value);
          onChanged();
        } else {
          timersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Timer timers = 14;</code>
       *
       * <pre>
       *当前定时器设置
       * </pre>
       */
      public Builder addTimers(
          int index, Timer value) {
        if (timersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimersIsMutable();
          timers_.add(index, value);
          onChanged();
        } else {
          timersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Timer timers = 14;</code>
       *
       * <pre>
       *当前定时器设置
       * </pre>
       */
      public Builder addTimers(
          Timer.Builder builderForValue) {
        if (timersBuilder_ == null) {
          ensureTimersIsMutable();
          timers_.add(builderForValue.build());
          onChanged();
        } else {
          timersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Timer timers = 14;</code>
       *
       * <pre>
       *当前定时器设置
       * </pre>
       */
      public Builder addTimers(
          int index, Timer.Builder builderForValue) {
        if (timersBuilder_ == null) {
          ensureTimersIsMutable();
          timers_.add(index, builderForValue.build());
          onChanged();
        } else {
          timersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Timer timers = 14;</code>
       *
       * <pre>
       *当前定时器设置
       * </pre>
       */
      public Builder addAllTimers(
          Iterable<? extends Timer> values) {
        if (timersBuilder_ == null) {
          ensureTimersIsMutable();
          super.addAll(values, timers_);
          onChanged();
        } else {
          timersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Timer timers = 14;</code>
       *
       * <pre>
       *当前定时器设置
       * </pre>
       */
      public Builder clearTimers() {
        if (timersBuilder_ == null) {
          timers_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00002000);
          onChanged();
        } else {
          timersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Timer timers = 14;</code>
       *
       * <pre>
       *当前定时器设置
       * </pre>
       */
      public Builder removeTimers(int index) {
        if (timersBuilder_ == null) {
          ensureTimersIsMutable();
          timers_.remove(index);
          onChanged();
        } else {
          timersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Timer timers = 14;</code>
       *
       * <pre>
       *当前定时器设置
       * </pre>
       */
      public Timer.Builder getTimersBuilder(
          int index) {
        return getTimersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .nodepp.Timer timers = 14;</code>
       *
       * <pre>
       *当前定时器设置
       * </pre>
       */
      public TimerOrBuilder getTimersOrBuilder(
          int index) {
        if (timersBuilder_ == null) {
          return timers_.get(index);  } else {
          return timersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .nodepp.Timer timers = 14;</code>
       *
       * <pre>
       *当前定时器设置
       * </pre>
       */
      public java.util.List<? extends TimerOrBuilder>
           getTimersOrBuilderList() {
        if (timersBuilder_ != null) {
          return timersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(timers_);
        }
      }
      /**
       * <code>repeated .nodepp.Timer timers = 14;</code>
       *
       * <pre>
       *当前定时器设置
       * </pre>
       */
      public Timer.Builder addTimersBuilder() {
        return getTimersFieldBuilder().addBuilder(
            Timer.getDefaultInstance());
      }
      /**
       * <code>repeated .nodepp.Timer timers = 14;</code>
       *
       * <pre>
       *当前定时器设置
       * </pre>
       */
      public Timer.Builder addTimersBuilder(
          int index) {
        return getTimersFieldBuilder().addBuilder(
            index, Timer.getDefaultInstance());
      }
      /**
       * <code>repeated .nodepp.Timer timers = 14;</code>
       *
       * <pre>
       *当前定时器设置
       * </pre>
       */
      public java.util.List<Timer.Builder>
           getTimersBuilderList() {
        return getTimersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          Timer, Timer.Builder, TimerOrBuilder>
          getTimersFieldBuilder() {
        if (timersBuilder_ == null) {
          timersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              Timer, Timer.Builder, TimerOrBuilder>(
                  timers_,
                  ((bitField0_ & 0x00002000) == 0x00002000),
                  getParentForChildren(),
                  isClean());
          timers_ = null;
        }
        return timersBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:nodepp.Device)
    }

    static {
      defaultInstance = new Device(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:nodepp.Device)
  }

  public interface UpgradeOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional bytes name = 1;
    /**
     * <code>optional bytes name = 1;</code>
     */
    boolean hasName();
    /**
     * <code>optional bytes name = 1;</code>
     */
    com.google.protobuf.ByteString getName();

    // optional bytes info = 2;
    /**
     * <code>optional bytes info = 2;</code>
     */
    boolean hasInfo();
    /**
     * <code>optional bytes info = 2;</code>
     */
    com.google.protobuf.ByteString getInfo();

    // optional uint32 size = 3;
    /**
     * <code>optional uint32 size = 3;</code>
     */
    boolean hasSize();
    /**
     * <code>optional uint32 size = 3;</code>
     */
    int getSize();

    // optional uint32 start = 4;
    /**
     * <code>optional uint32 start = 4;</code>
     */
    boolean hasStart();
    /**
     * <code>optional uint32 start = 4;</code>
     */
    int getStart();

    // optional bytes data = 5;
    /**
     * <code>optional bytes data = 5;</code>
     */
    boolean hasData();
    /**
     * <code>optional bytes data = 5;</code>
     */
    com.google.protobuf.ByteString getData();
  }
  /**
   * Protobuf type {@code nodepp.Upgrade}
   */
  public static final class Upgrade extends
      com.google.protobuf.GeneratedMessage
      implements UpgradeOrBuilder {
    // Use Upgrade.newBuilder() to construct.
    private Upgrade(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Upgrade(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Upgrade defaultInstance;
    public static Upgrade getDefaultInstance() {
      return defaultInstance;
    }

    public Upgrade getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Upgrade(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              name_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              info_ = input.readBytes();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              size_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              start_ = input.readUInt32();
              break;
            }
            case 42: {
              bitField0_ |= 0x00000010;
              data_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Nodepp.internal_static_nodepp_Upgrade_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Nodepp.internal_static_nodepp_Upgrade_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Upgrade.class, Builder.class);
    }

    public static com.google.protobuf.Parser<Upgrade> PARSER =
        new com.google.protobuf.AbstractParser<Upgrade>() {
      public Upgrade parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Upgrade(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<Upgrade> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional bytes name = 1;
    public static final int NAME_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString name_;
    /**
     * <code>optional bytes name = 1;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bytes name = 1;</code>
     */
    public com.google.protobuf.ByteString getName() {
      return name_;
    }

    // optional bytes info = 2;
    public static final int INFO_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString info_;
    /**
     * <code>optional bytes info = 2;</code>
     */
    public boolean hasInfo() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bytes info = 2;</code>
     */
    public com.google.protobuf.ByteString getInfo() {
      return info_;
    }

    // optional uint32 size = 3;
    public static final int SIZE_FIELD_NUMBER = 3;
    private int size_;
    /**
     * <code>optional uint32 size = 3;</code>
     */
    public boolean hasSize() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 size = 3;</code>
     */
    public int getSize() {
      return size_;
    }

    // optional uint32 start = 4;
    public static final int START_FIELD_NUMBER = 4;
    private int start_;
    /**
     * <code>optional uint32 start = 4;</code>
     */
    public boolean hasStart() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 start = 4;</code>
     */
    public int getStart() {
      return start_;
    }

    // optional bytes data = 5;
    public static final int DATA_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString data_;
    /**
     * <code>optional bytes data = 5;</code>
     */
    public boolean hasData() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bytes data = 5;</code>
     */
    public com.google.protobuf.ByteString getData() {
      return data_;
    }

    private void initFields() {
      name_ = com.google.protobuf.ByteString.EMPTY;
      info_ = com.google.protobuf.ByteString.EMPTY;
      size_ = 0;
      start_ = 0;
      data_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, name_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, info_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, size_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, start_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(5, data_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, name_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, info_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, size_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, start_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, data_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static Upgrade parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Upgrade parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Upgrade parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Upgrade parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Upgrade parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Upgrade parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static Upgrade parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static Upgrade parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static Upgrade parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Upgrade parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(Upgrade prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code nodepp.Upgrade}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements UpgradeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Nodepp.internal_static_nodepp_Upgrade_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Nodepp.internal_static_nodepp_Upgrade_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Upgrade.class, Builder.class);
      }

      // Construct using nodepp.Nodepp.Upgrade.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        name_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        info_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        size_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        start_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        data_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Nodepp.internal_static_nodepp_Upgrade_descriptor;
      }

      public Upgrade getDefaultInstanceForType() {
        return Upgrade.getDefaultInstance();
      }

      public Upgrade build() {
        Upgrade result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public Upgrade buildPartial() {
        Upgrade result = new Upgrade(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.info_ = info_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.size_ = size_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.start_ = start_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.data_ = data_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Upgrade) {
          return mergeFrom((Upgrade)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Upgrade other) {
        if (other == Upgrade.getDefaultInstance()) return this;
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasInfo()) {
          setInfo(other.getInfo());
        }
        if (other.hasSize()) {
          setSize(other.getSize());
        }
        if (other.hasStart()) {
          setStart(other.getStart());
        }
        if (other.hasData()) {
          setData(other.getData());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Upgrade parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Upgrade) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional bytes name = 1;
      private com.google.protobuf.ByteString name_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bytes name = 1;</code>
       */
      public com.google.protobuf.ByteString getName() {
        return name_;
      }
      /**
       * <code>optional bytes name = 1;</code>
       */
      public Builder setName(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes name = 1;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }

      // optional bytes info = 2;
      private com.google.protobuf.ByteString info_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes info = 2;</code>
       */
      public boolean hasInfo() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bytes info = 2;</code>
       */
      public com.google.protobuf.ByteString getInfo() {
        return info_;
      }
      /**
       * <code>optional bytes info = 2;</code>
       */
      public Builder setInfo(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        info_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes info = 2;</code>
       */
      public Builder clearInfo() {
        bitField0_ = (bitField0_ & ~0x00000002);
        info_ = getDefaultInstance().getInfo();
        onChanged();
        return this;
      }

      // optional uint32 size = 3;
      private int size_ ;
      /**
       * <code>optional uint32 size = 3;</code>
       */
      public boolean hasSize() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 size = 3;</code>
       */
      public int getSize() {
        return size_;
      }
      /**
       * <code>optional uint32 size = 3;</code>
       */
      public Builder setSize(int value) {
        bitField0_ |= 0x00000004;
        size_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 size = 3;</code>
       */
      public Builder clearSize() {
        bitField0_ = (bitField0_ & ~0x00000004);
        size_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 start = 4;
      private int start_ ;
      /**
       * <code>optional uint32 start = 4;</code>
       */
      public boolean hasStart() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 start = 4;</code>
       */
      public int getStart() {
        return start_;
      }
      /**
       * <code>optional uint32 start = 4;</code>
       */
      public Builder setStart(int value) {
        bitField0_ |= 0x00000008;
        start_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 start = 4;</code>
       */
      public Builder clearStart() {
        bitField0_ = (bitField0_ & ~0x00000008);
        start_ = 0;
        onChanged();
        return this;
      }

      // optional bytes data = 5;
      private com.google.protobuf.ByteString data_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes data = 5;</code>
       */
      public boolean hasData() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bytes data = 5;</code>
       */
      public com.google.protobuf.ByteString getData() {
        return data_;
      }
      /**
       * <code>optional bytes data = 5;</code>
       */
      public Builder setData(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        data_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes data = 5;</code>
       */
      public Builder clearData() {
        bitField0_ = (bitField0_ & ~0x00000010);
        data_ = getDefaultInstance().getData();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:nodepp.Upgrade)
    }

    static {
      defaultInstance = new Upgrade(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:nodepp.Upgrade)
  }

  public interface MsgOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .nodepp.Head head = 1;
    /**
     * <code>optional .nodepp.Head head = 1;</code>
     */
    boolean hasHead();
    /**
     * <code>optional .nodepp.Head head = 1;</code>
     */
    Head getHead();
    /**
     * <code>optional .nodepp.Head head = 1;</code>
     */
    HeadOrBuilder getHeadOrBuilder();

    // optional uint32 time_interval = 10;
    /**
     * <code>optional uint32 time_interval = 10;</code>
     *
     * <pre>
     *从10开始使用
     * </pre>
     */
    boolean hasTimeInterval();
    /**
     * <code>optional uint32 time_interval = 10;</code>
     *
     * <pre>
     *从10开始使用
     * </pre>
     */
    int getTimeInterval();

    // optional uint32 operate = 11;
    /**
     * <code>optional uint32 operate = 11;</code>
     *
     * <pre>
     *操作，0断开命令，1接通命令。
     * </pre>
     */
    boolean hasOperate();
    /**
     * <code>optional uint32 operate = 11;</code>
     *
     * <pre>
     *操作，0断开命令，1接通命令。
     * </pre>
     */
    int getOperate();

    // optional uint32 state = 12;
    /**
     * <code>optional uint32 state = 12;</code>
     *
     * <pre>
     *状态，0断开状态，1接通状态。
     * </pre>
     */
    boolean hasState();
    /**
     * <code>optional uint32 state = 12;</code>
     *
     * <pre>
     *状态，0断开状态，1接通状态。
     * </pre>
     */
    int getState();

    // optional bytes wifi_name = 13;
    /**
     * <code>optional bytes wifi_name = 13;</code>
     *
     * <pre>
     *家庭网络用户名
     * </pre>
     */
    boolean hasWifiName();
    /**
     * <code>optional bytes wifi_name = 13;</code>
     *
     * <pre>
     *家庭网络用户名
     * </pre>
     */
    com.google.protobuf.ByteString getWifiName();

    // optional bytes wifi_passwd = 14;
    /**
     * <code>optional bytes wifi_passwd = 14;</code>
     *
     * <pre>
     *家庭网路密码
     * </pre>
     */
    boolean hasWifiPasswd();
    /**
     * <code>optional bytes wifi_passwd = 14;</code>
     *
     * <pre>
     *家庭网路密码
     * </pre>
     */
    com.google.protobuf.ByteString getWifiPasswd();

    // optional uint32 wifi_state = 15;
    /**
     * <code>optional uint32 wifi_state = 15;</code>
     *
     * <pre>
     *家庭网络连接状态，1正在连接，2连接成功，3连接失败
     * </pre>
     */
    boolean hasWifiState();
    /**
     * <code>optional uint32 wifi_state = 15;</code>
     *
     * <pre>
     *家庭网络连接状态，1正在连接，2连接成功，3连接失败
     * </pre>
     */
    int getWifiState();

    // optional uint32 user_type = 16;
    /**
     * <code>optional uint32 user_type = 16;</code>
     *
     * <pre>
     *0保留，1 identifier+usersig，2 openid+accesstoken，4 sdk登陆获取uid方式
     * </pre>
     */
    boolean hasUserType();
    /**
     * <code>optional uint32 user_type = 16;</code>
     *
     * <pre>
     *0保留，1 identifier+usersig，2 openid+accesstoken，4 sdk登陆获取uid方式
     * </pre>
     */
    int getUserType();

    // optional bytes user = 17;
    /**
     * <code>optional bytes user = 17;</code>
     *
     * <pre>
     *当user_type=1时，此字段填腾讯TLS登录的identifier，当user_type=2时，此字段填腾讯openqq登录的openid，当user_type=4时，此字段填第三方使用sdk接入的用户名
     * </pre>
     */
    boolean hasUser();
    /**
     * <code>optional bytes user = 17;</code>
     *
     * <pre>
     *当user_type=1时，此字段填腾讯TLS登录的identifier，当user_type=2时，此字段填腾讯openqq登录的openid，当user_type=4时，此字段填第三方使用sdk接入的用户名
     * </pre>
     */
    com.google.protobuf.ByteString getUser();

    // optional bytes key = 18;
    /**
     * <code>optional bytes key = 18;</code>
     *
     * <pre>
     *当user_type=1时，此字段填腾讯TLS登录的usersig，当user_type=2时，此字段填腾讯openqq登录的accesstoken，当user_type=4时，此字段填发放给第三方的appkey
     * </pre>
     */
    boolean hasKey();
    /**
     * <code>optional bytes key = 18;</code>
     *
     * <pre>
     *当user_type=1时，此字段填腾讯TLS登录的usersig，当user_type=2时，此字段填腾讯openqq登录的accesstoken，当user_type=4时，此字段填发放给第三方的appkey
     * </pre>
     */
    com.google.protobuf.ByteString getKey();

    // optional uint32 ver_cur = 19;
    /**
     * <code>optional uint32 ver_cur = 19;</code>
     *
     * <pre>
     *当前app版本号
     * </pre>
     */
    boolean hasVerCur();
    /**
     * <code>optional uint32 ver_cur = 19;</code>
     *
     * <pre>
     *当前app版本号
     * </pre>
     */
    int getVerCur();

    // optional uint32 ver_new = 20;
    /**
     * <code>optional uint32 ver_new = 20;</code>
     *
     * <pre>
     *最新app版本号
     * </pre>
     */
    boolean hasVerNew();
    /**
     * <code>optional uint32 ver_new = 20;</code>
     *
     * <pre>
     *最新app版本号
     * </pre>
     */
    int getVerNew();

    // optional bytes ver_info = 21;
    /**
     * <code>optional bytes ver_info = 21;</code>
     *
     * <pre>
     *新版本更新信息
     * </pre>
     */
    boolean hasVerInfo();
    /**
     * <code>optional bytes ver_info = 21;</code>
     *
     * <pre>
     *新版本更新信息
     * </pre>
     */
    com.google.protobuf.ByteString getVerInfo();

    // optional bytes ver_url = 22;
    /**
     * <code>optional bytes ver_url = 22;</code>
     *
     * <pre>
     *新版本下载链接
     * </pre>
     */
    boolean hasVerUrl();
    /**
     * <code>optional bytes ver_url = 22;</code>
     *
     * <pre>
     *新版本下载链接
     * </pre>
     */
    com.google.protobuf.ByteString getVerUrl();

    // optional uint64 appid = 24;
    /**
     * <code>optional uint64 appid = 24;</code>
     *
     * <pre>
     *当user_type=1时，此字段填腾讯TLS登录的sdkappid，当user_type=2时，此字段填腾讯openqq登录的client_id，当user_type=4时，此字段填发放给第三方的appid
     * </pre>
     */
    boolean hasAppid();
    /**
     * <code>optional uint64 appid = 24;</code>
     *
     * <pre>
     *当user_type=1时，此字段填腾讯TLS登录的sdkappid，当user_type=2时，此字段填腾讯openqq登录的client_id，当user_type=4时，此字段填发放给第三方的appid
     * </pre>
     */
    long getAppid();

    // repeated .nodepp.Timer timers = 29;
    /**
     * <code>repeated .nodepp.Timer timers = 29;</code>
     *
     * <pre>
     *定时器设置
     * </pre>
     */
    java.util.List<Timer>
        getTimersList();
    /**
     * <code>repeated .nodepp.Timer timers = 29;</code>
     *
     * <pre>
     *定时器设置
     * </pre>
     */
    Timer getTimers(int index);
    /**
     * <code>repeated .nodepp.Timer timers = 29;</code>
     *
     * <pre>
     *定时器设置
     * </pre>
     */
    int getTimersCount();
    /**
     * <code>repeated .nodepp.Timer timers = 29;</code>
     *
     * <pre>
     *定时器设置
     * </pre>
     */
    java.util.List<? extends TimerOrBuilder>
        getTimersOrBuilderList();
    /**
     * <code>repeated .nodepp.Timer timers = 29;</code>
     *
     * <pre>
     *定时器设置
     * </pre>
     */
    TimerOrBuilder getTimersOrBuilder(
            int index);

    // optional uint64 uid = 30;
    /**
     * <code>optional uint64 uid = 30;</code>
     *
     * <pre>
     *用户id，登录成功后，分配的uid，在请求其他命令的时候，将uid，usig放在Head结构中的uid，sig中
     * </pre>
     */
    boolean hasUid();
    /**
     * <code>optional uint64 uid = 30;</code>
     *
     * <pre>
     *用户id，登录成功后，分配的uid，在请求其他命令的时候，将uid，usig放在Head结构中的uid，sig中
     * </pre>
     */
    long getUid();

    // optional bytes usig = 31;
    /**
     * <code>optional bytes usig = 31;</code>
     *
     * <pre>
     *uid对应的票据
     * </pre>
     */
    boolean hasUsig();
    /**
     * <code>optional bytes usig = 31;</code>
     *
     * <pre>
     *uid对应的票据
     * </pre>
     */
    com.google.protobuf.ByteString getUsig();

    // optional uint64 mid = 32;
    /**
     * <code>optional uint64 mid = 32;</code>
     *
     * <pre>
     *厂商id
     * </pre>
     */
    boolean hasMid();
    /**
     * <code>optional uint64 mid = 32;</code>
     *
     * <pre>
     *厂商id
     * </pre>
     */
    long getMid();

    // optional uint64 sub_mid = 33;
    /**
     * <code>optional uint64 sub_mid = 33;</code>
     *
     * <pre>
     *厂商子id
     * </pre>
     */
    boolean hasSubMid();
    /**
     * <code>optional uint64 sub_mid = 33;</code>
     *
     * <pre>
     *厂商子id
     * </pre>
     */
    long getSubMid();

    // optional bytes msig = 34;
    /**
     * <code>optional bytes msig = 34;</code>
     *
     * <pre>
     *mid对应的票据
     * </pre>
     */
    boolean hasMsig();
    /**
     * <code>optional bytes msig = 34;</code>
     *
     * <pre>
     *mid对应的票据
     * </pre>
     */
    com.google.protobuf.ByteString getMsig();

    // optional uint64 did = 35;
    /**
     * <code>optional uint64 did = 35;</code>
     *
     * <pre>
     *设备id
     * </pre>
     */
    boolean hasDid();
    /**
     * <code>optional uint64 did = 35;</code>
     *
     * <pre>
     *设备id
     * </pre>
     */
    long getDid();

    // optional bytes dsig = 36;
    /**
     * <code>optional bytes dsig = 36;</code>
     *
     * <pre>
     *did对应的票据
     * </pre>
     */
    boolean hasDsig();
    /**
     * <code>optional bytes dsig = 36;</code>
     *
     * <pre>
     *did对应的票据
     * </pre>
     */
    com.google.protobuf.ByteString getDsig();

    // optional uint64 tid = 37;
    /**
     * <code>optional uint64 tid = 37;</code>
     *
     * <pre>
     *临时设备id
     * </pre>
     */
    boolean hasTid();
    /**
     * <code>optional uint64 tid = 37;</code>
     *
     * <pre>
     *临时设备id
     * </pre>
     */
    long getTid();

    // optional uint32 device_type = 42;
    /**
     * <code>optional uint32 device_type = 42;</code>
     *
     * <pre>
     *用于判断设备类型，0表示不确定什么类型，1表示普通1路控制灯，2表示普通6路控制灯，3表示彩光灯
     * </pre>
     */
    boolean hasDeviceType();
    /**
     * <code>optional uint32 device_type = 42;</code>
     *
     * <pre>
     *用于判断设备类型，0表示不确定什么类型，1表示普通1路控制灯，2表示普通6路控制灯，3表示彩光灯
     * </pre>
     */
    int getDeviceType();

    // optional uint32 conneted_mode = 43;
    /**
     * <code>optional uint32 conneted_mode = 43;</code>
     *
     * <pre>
     *设备连接类型，0表示互联网连接控制，1表示近场局域网控制
     * </pre>
     */
    boolean hasConnetedMode();
    /**
     * <code>optional uint32 conneted_mode = 43;</code>
     *
     * <pre>
     *设备连接类型，0表示互联网连接控制，1表示近场局域网控制
     * </pre>
     */
    int getConnetedMode();

    // optional uint32 platform = 44;
    /**
     * <code>optional uint32 platform = 44;</code>
     *
     * <pre>
     *app的类型，用于版本更新进行区分，0代表android端，1代表ios端
     * </pre>
     */
    boolean hasPlatform();
    /**
     * <code>optional uint32 platform = 44;</code>
     *
     * <pre>
     *app的类型，用于版本更新进行区分，0代表android端，1代表ios端
     * </pre>
     */
    int getPlatform();

    // repeated .nodepp.Rgb colors = 45;
    /**
     * <code>repeated .nodepp.Rgb colors = 45;</code>
     *
     * <pre>
     *w,r,g,b色值数组，用于彩灯和白灯的色彩调节
     * </pre>
     */
    java.util.List<Rgb>
        getColorsList();
    /**
     * <code>repeated .nodepp.Rgb colors = 45;</code>
     *
     * <pre>
     *w,r,g,b色值数组，用于彩灯和白灯的色彩调节
     * </pre>
     */
    Rgb getColors(int index);
    /**
     * <code>repeated .nodepp.Rgb colors = 45;</code>
     *
     * <pre>
     *w,r,g,b色值数组，用于彩灯和白灯的色彩调节
     * </pre>
     */
    int getColorsCount();
    /**
     * <code>repeated .nodepp.Rgb colors = 45;</code>
     *
     * <pre>
     *w,r,g,b色值数组，用于彩灯和白灯的色彩调节
     * </pre>
     */
    java.util.List<? extends RgbOrBuilder>
        getColorsOrBuilderList();
    /**
     * <code>repeated .nodepp.Rgb colors = 45;</code>
     *
     * <pre>
     *w,r,g,b色值数组，用于彩灯和白灯的色彩调节
     * </pre>
     */
    RgbOrBuilder getColorsOrBuilder(
            int index);

    // optional uint32 color_switch_time = 46;
    /**
     * <code>optional uint32 color_switch_time = 46;</code>
     *
     * <pre>
     *彩灯颜色切换间隔时间，1000ms-10000ms
     * </pre>
     */
    boolean hasColorSwitchTime();
    /**
     * <code>optional uint32 color_switch_time = 46;</code>
     *
     * <pre>
     *彩灯颜色切换间隔时间，1000ms-10000ms
     * </pre>
     */
    int getColorSwitchTime();

    // optional uint32 devices_max = 47;
    /**
     * <code>optional uint32 devices_max = 47;</code>
     *
     * <pre>
     *厂商可获取的did个数最大值
     * </pre>
     */
    boolean hasDevicesMax();
    /**
     * <code>optional uint32 devices_max = 47;</code>
     *
     * <pre>
     *厂商可获取的did个数最大值
     * </pre>
     */
    int getDevicesMax();

    // optional uint32 devices_cur = 48;
    /**
     * <code>optional uint32 devices_cur = 48;</code>
     *
     * <pre>
     *厂商获取的did个数的当前值
     * </pre>
     */
    boolean hasDevicesCur();
    /**
     * <code>optional uint32 devices_cur = 48;</code>
     *
     * <pre>
     *厂商获取的did个数的当前值
     * </pre>
     */
    int getDevicesCur();

    // optional bytes share_verification = 49;
    /**
     * <code>optional bytes share_verification = 49;</code>
     *
     * <pre>
     *分享设备二维码时所需要的认证sig，通过添加二维码设备需要检验的sig
     * </pre>
     */
    boolean hasShareVerification();
    /**
     * <code>optional bytes share_verification = 49;</code>
     *
     * <pre>
     *分享设备二维码时所需要的认证sig，通过添加二维码设备需要检验的sig
     * </pre>
     */
    com.google.protobuf.ByteString getShareVerification();

    // repeated .nodepp.Device devices = 50;
    /**
     * <code>repeated .nodepp.Device devices = 50;</code>
     *
     * <pre>
     *新增，设备集合
     * </pre>
     */
    java.util.List<Device>
        getDevicesList();
    /**
     * <code>repeated .nodepp.Device devices = 50;</code>
     *
     * <pre>
     *新增，设备集合
     * </pre>
     */
    Device getDevices(int index);
    /**
     * <code>repeated .nodepp.Device devices = 50;</code>
     *
     * <pre>
     *新增，设备集合
     * </pre>
     */
    int getDevicesCount();
    /**
     * <code>repeated .nodepp.Device devices = 50;</code>
     *
     * <pre>
     *新增，设备集合
     * </pre>
     */
    java.util.List<? extends DeviceOrBuilder>
        getDevicesOrBuilderList();
    /**
     * <code>repeated .nodepp.Device devices = 50;</code>
     *
     * <pre>
     *新增，设备集合
     * </pre>
     */
    DeviceOrBuilder getDevicesOrBuilder(
            int index);

    // optional uint32 initialize_data = 51;
    /**
     * <code>optional uint32 initialize_data = 51;</code>
     *
     * <pre>
     *新增，是否需要设备初始化，根据上一次的device_identification和这一次来决定。0代表不需要，1代表需要
     * </pre>
     */
    boolean hasInitializeData();
    /**
     * <code>optional uint32 initialize_data = 51;</code>
     *
     * <pre>
     *新增，是否需要设备初始化，根据上一次的device_identification和这一次来决定。0代表不需要，1代表需要
     * </pre>
     */
    int getInitializeData();

    // repeated uint64 dids = 52;
    /**
     * <code>repeated uint64 dids = 52;</code>
     *
     * <pre>
     *当前用户的所有did
     * </pre>
     */
    java.util.List<Long> getDidsList();
    /**
     * <code>repeated uint64 dids = 52;</code>
     *
     * <pre>
     *当前用户的所有did
     * </pre>
     */
    int getDidsCount();
    /**
     * <code>repeated uint64 dids = 52;</code>
     *
     * <pre>
     *当前用户的所有did
     * </pre>
     */
    long getDids(int index);

    // optional bytes user_data = 53;
    /**
     * <code>optional bytes user_data = 53;</code>
     *
     * <pre>
     *串口通讯传输的信息
     * </pre>
     */
    boolean hasUserData();
    /**
     * <code>optional bytes user_data = 53;</code>
     *
     * <pre>
     *串口通讯传输的信息
     * </pre>
     */
    com.google.protobuf.ByteString getUserData();

    // optional bytes random = 54;
    /**
     * <code>optional bytes random = 54;</code>
     */
    boolean hasRandom();
    /**
     * <code>optional bytes random = 54;</code>
     */
    com.google.protobuf.ByteString getRandom();

    // optional .nodepp.Upgrade upgrade = 55;
    /**
     * <code>optional .nodepp.Upgrade upgrade = 55;</code>
     *
     * <pre>
     *fw
     * </pre>
     */
    boolean hasUpgrade();
    /**
     * <code>optional .nodepp.Upgrade upgrade = 55;</code>
     *
     * <pre>
     *fw
     * </pre>
     */
    Upgrade getUpgrade();
    /**
     * <code>optional .nodepp.Upgrade upgrade = 55;</code>
     *
     * <pre>
     *fw
     * </pre>
     */
    UpgradeOrBuilder getUpgradeOrBuilder();

    // optional bytes key_client = 56;
    /**
     * <code>optional bytes key_client = 56;</code>
     */
    boolean hasKeyClient();
    /**
     * <code>optional bytes key_client = 56;</code>
     */
    com.google.protobuf.ByteString getKeyClient();

    // optional uint32 bright_dark = 57;
    /**
     * <code>optional uint32 bright_dark = 57;</code>
     *
     * <pre>
     *彩灯的亮暗值
     * </pre>
     */
    boolean hasBrightDark();
    /**
     * <code>optional uint32 bright_dark = 57;</code>
     *
     * <pre>
     *彩灯的亮暗值
     * </pre>
     */
    int getBrightDark();

    // optional uint32 su_yan = 58;
    /**
     * <code>optional uint32 su_yan = 58;</code>
     *
     * <pre>
     *彩灯的素艳值
     * </pre>
     */
    boolean hasSuYan();
    /**
     * <code>optional uint32 su_yan = 58;</code>
     *
     * <pre>
     *彩灯的素艳值
     * </pre>
     */
    int getSuYan();

    // optional bytes mac_id = 59;
    /**
     * <code>optional bytes mac_id = 59;</code>
     *
     * <pre>
     *mac数量统计
     * </pre>
     */
    boolean hasMacId();
    /**
     * <code>optional bytes mac_id = 59;</code>
     *
     * <pre>
     *mac数量统计
     * </pre>
     */
    com.google.protobuf.ByteString getMacId();

    // optional uint32 device_mode = 60;
    /**
     * <code>optional uint32 device_mode = 60;</code>
     *
     * <pre>
     *设备工作模式，0表示自锁，1表示点动，2表示互锁模式
     * </pre>
     */
    boolean hasDeviceMode();
    /**
     * <code>optional uint32 device_mode = 60;</code>
     *
     * <pre>
     *设备工作模式，0表示自锁，1表示点动，2表示互锁模式
     * </pre>
     */
    int getDeviceMode();

    // optional bytes key_client_wan = 61;
    /**
     * <code>optional bytes key_client_wan = 61;</code>
     *
     * <pre>
     *client-server key
     * </pre>
     */
    boolean hasKeyClientWan();
    /**
     * <code>optional bytes key_client_wan = 61;</code>
     *
     * <pre>
     *client-server key
     * </pre>
     */
    com.google.protobuf.ByteString getKeyClientWan();

    // optional uint32 app_protocol = 62;
    /**
     * <code>optional uint32 app_protocol = 62;</code>
     */
    boolean hasAppProtocol();
    /**
     * <code>optional uint32 app_protocol = 62;</code>
     */
    int getAppProtocol();
  }
  /**
   * Protobuf type {@code nodepp.Msg}
   */
  public static final class Msg extends
      com.google.protobuf.GeneratedMessage
      implements MsgOrBuilder {
    // Use Msg.newBuilder() to construct.
    private Msg(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Msg(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Msg defaultInstance;
    public static Msg getDefaultInstance() {
      return defaultInstance;
    }

    public Msg getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Msg(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              Head.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = head_.toBuilder();
              }
              head_ = input.readMessage(Head.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(head_);
                head_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 80: {
              bitField0_ |= 0x00000002;
              timeInterval_ = input.readUInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000004;
              operate_ = input.readUInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000008;
              state_ = input.readUInt32();
              break;
            }
            case 106: {
              bitField0_ |= 0x00000010;
              wifiName_ = input.readBytes();
              break;
            }
            case 114: {
              bitField0_ |= 0x00000020;
              wifiPasswd_ = input.readBytes();
              break;
            }
            case 120: {
              bitField0_ |= 0x00000040;
              wifiState_ = input.readUInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00000080;
              userType_ = input.readUInt32();
              break;
            }
            case 138: {
              bitField0_ |= 0x00000100;
              user_ = input.readBytes();
              break;
            }
            case 146: {
              bitField0_ |= 0x00000200;
              key_ = input.readBytes();
              break;
            }
            case 152: {
              bitField0_ |= 0x00000400;
              verCur_ = input.readUInt32();
              break;
            }
            case 160: {
              bitField0_ |= 0x00000800;
              verNew_ = input.readUInt32();
              break;
            }
            case 170: {
              bitField0_ |= 0x00001000;
              verInfo_ = input.readBytes();
              break;
            }
            case 178: {
              bitField0_ |= 0x00002000;
              verUrl_ = input.readBytes();
              break;
            }
            case 192: {
              bitField0_ |= 0x00004000;
              appid_ = input.readUInt64();
              break;
            }
            case 234: {
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                timers_ = new java.util.ArrayList<Timer>();
                mutable_bitField0_ |= 0x00008000;
              }
              timers_.add(input.readMessage(Timer.PARSER, extensionRegistry));
              break;
            }
            case 240: {
              bitField0_ |= 0x00008000;
              uid_ = input.readUInt64();
              break;
            }
            case 250: {
              bitField0_ |= 0x00010000;
              usig_ = input.readBytes();
              break;
            }
            case 256: {
              bitField0_ |= 0x00020000;
              mid_ = input.readUInt64();
              break;
            }
            case 264: {
              bitField0_ |= 0x00040000;
              subMid_ = input.readUInt64();
              break;
            }
            case 274: {
              bitField0_ |= 0x00080000;
              msig_ = input.readBytes();
              break;
            }
            case 280: {
              bitField0_ |= 0x00100000;
              did_ = input.readUInt64();
              break;
            }
            case 290: {
              bitField0_ |= 0x00200000;
              dsig_ = input.readBytes();
              break;
            }
            case 296: {
              bitField0_ |= 0x00400000;
              tid_ = input.readUInt64();
              break;
            }
            case 336: {
              bitField0_ |= 0x00800000;
              deviceType_ = input.readUInt32();
              break;
            }
            case 344: {
              bitField0_ |= 0x01000000;
              connetedMode_ = input.readUInt32();
              break;
            }
            case 352: {
              bitField0_ |= 0x02000000;
              platform_ = input.readUInt32();
              break;
            }
            case 362: {
              if (!((mutable_bitField0_ & 0x08000000) == 0x08000000)) {
                colors_ = new java.util.ArrayList<Rgb>();
                mutable_bitField0_ |= 0x08000000;
              }
              colors_.add(input.readMessage(Rgb.PARSER, extensionRegistry));
              break;
            }
            case 368: {
              bitField0_ |= 0x04000000;
              colorSwitchTime_ = input.readUInt32();
              break;
            }
            case 376: {
              bitField0_ |= 0x08000000;
              devicesMax_ = input.readUInt32();
              break;
            }
            case 384: {
              bitField0_ |= 0x10000000;
              devicesCur_ = input.readUInt32();
              break;
            }
            case 394: {
              bitField0_ |= 0x20000000;
              shareVerification_ = input.readBytes();
              break;
            }
            case 402: {
              if (!((mutable_bitField1_ & 0x00000001) == 0x00000001)) {
                devices_ = new java.util.ArrayList<Device>();
                mutable_bitField1_ |= 0x00000001;
              }
              devices_.add(input.readMessage(Device.PARSER, extensionRegistry));
              break;
            }
            case 408: {
              bitField0_ |= 0x40000000;
              initializeData_ = input.readUInt32();
              break;
            }
            case 416: {
              if (!((mutable_bitField1_ & 0x00000004) == 0x00000004)) {
                dids_ = new java.util.ArrayList<Long>();
                mutable_bitField1_ |= 0x00000004;
              }
              dids_.add(input.readUInt64());
              break;
            }
            case 418: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField1_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                dids_ = new java.util.ArrayList<Long>();
                mutable_bitField1_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                dids_.add(input.readUInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 426: {
              bitField0_ |= 0x80000000;
              userData_ = input.readBytes();
              break;
            }
            case 434: {
              bitField1_ |= 0x00000001;
              random_ = input.readBytes();
              break;
            }
            case 442: {
              Upgrade.Builder subBuilder = null;
              if (((bitField1_ & 0x00000002) == 0x00000002)) {
                subBuilder = upgrade_.toBuilder();
              }
              upgrade_ = input.readMessage(Upgrade.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(upgrade_);
                upgrade_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000002;
              break;
            }
            case 450: {
              bitField1_ |= 0x00000004;
              keyClient_ = input.readBytes();
              break;
            }
            case 456: {
              bitField1_ |= 0x00000008;
              brightDark_ = input.readUInt32();
              break;
            }
            case 464: {
              bitField1_ |= 0x00000010;
              suYan_ = input.readUInt32();
              break;
            }
            case 474: {
              bitField1_ |= 0x00000020;
              macId_ = input.readBytes();
              break;
            }
            case 480: {
              bitField1_ |= 0x00000040;
              deviceMode_ = input.readUInt32();
              break;
            }
            case 490: {
              bitField1_ |= 0x00000080;
              keyClientWan_ = input.readBytes();
              break;
            }
            case 496: {
              bitField1_ |= 0x00000100;
              appProtocol_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          timers_ = java.util.Collections.unmodifiableList(timers_);
        }
        if (((mutable_bitField0_ & 0x08000000) == 0x08000000)) {
          colors_ = java.util.Collections.unmodifiableList(colors_);
        }
        if (((mutable_bitField1_ & 0x00000001) == 0x00000001)) {
          devices_ = java.util.Collections.unmodifiableList(devices_);
        }
        if (((mutable_bitField1_ & 0x00000004) == 0x00000004)) {
          dids_ = java.util.Collections.unmodifiableList(dids_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Nodepp.internal_static_nodepp_Msg_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Nodepp.internal_static_nodepp_Msg_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Msg.class, Builder.class);
    }

    public static com.google.protobuf.Parser<Msg> PARSER =
        new com.google.protobuf.AbstractParser<Msg>() {
      public Msg parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Msg(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<Msg> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int bitField1_;
    // optional .nodepp.Head head = 1;
    public static final int HEAD_FIELD_NUMBER = 1;
    private Head head_;
    /**
     * <code>optional .nodepp.Head head = 1;</code>
     */
    public boolean hasHead() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .nodepp.Head head = 1;</code>
     */
    public Head getHead() {
      return head_;
    }
    /**
     * <code>optional .nodepp.Head head = 1;</code>
     */
    public HeadOrBuilder getHeadOrBuilder() {
      return head_;
    }

    // optional uint32 time_interval = 10;
    public static final int TIME_INTERVAL_FIELD_NUMBER = 10;
    private int timeInterval_;
    /**
     * <code>optional uint32 time_interval = 10;</code>
     *
     * <pre>
     *从10开始使用
     * </pre>
     */
    public boolean hasTimeInterval() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 time_interval = 10;</code>
     *
     * <pre>
     *从10开始使用
     * </pre>
     */
    public int getTimeInterval() {
      return timeInterval_;
    }

    // optional uint32 operate = 11;
    public static final int OPERATE_FIELD_NUMBER = 11;
    private int operate_;
    /**
     * <code>optional uint32 operate = 11;</code>
     *
     * <pre>
     *操作，0断开命令，1接通命令。
     * </pre>
     */
    public boolean hasOperate() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 operate = 11;</code>
     *
     * <pre>
     *操作，0断开命令，1接通命令。
     * </pre>
     */
    public int getOperate() {
      return operate_;
    }

    // optional uint32 state = 12;
    public static final int STATE_FIELD_NUMBER = 12;
    private int state_;
    /**
     * <code>optional uint32 state = 12;</code>
     *
     * <pre>
     *状态，0断开状态，1接通状态。
     * </pre>
     */
    public boolean hasState() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 state = 12;</code>
     *
     * <pre>
     *状态，0断开状态，1接通状态。
     * </pre>
     */
    public int getState() {
      return state_;
    }

    // optional bytes wifi_name = 13;
    public static final int WIFI_NAME_FIELD_NUMBER = 13;
    private com.google.protobuf.ByteString wifiName_;
    /**
     * <code>optional bytes wifi_name = 13;</code>
     *
     * <pre>
     *家庭网络用户名
     * </pre>
     */
    public boolean hasWifiName() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bytes wifi_name = 13;</code>
     *
     * <pre>
     *家庭网络用户名
     * </pre>
     */
    public com.google.protobuf.ByteString getWifiName() {
      return wifiName_;
    }

    // optional bytes wifi_passwd = 14;
    public static final int WIFI_PASSWD_FIELD_NUMBER = 14;
    private com.google.protobuf.ByteString wifiPasswd_;
    /**
     * <code>optional bytes wifi_passwd = 14;</code>
     *
     * <pre>
     *家庭网路密码
     * </pre>
     */
    public boolean hasWifiPasswd() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bytes wifi_passwd = 14;</code>
     *
     * <pre>
     *家庭网路密码
     * </pre>
     */
    public com.google.protobuf.ByteString getWifiPasswd() {
      return wifiPasswd_;
    }

    // optional uint32 wifi_state = 15;
    public static final int WIFI_STATE_FIELD_NUMBER = 15;
    private int wifiState_;
    /**
     * <code>optional uint32 wifi_state = 15;</code>
     *
     * <pre>
     *家庭网络连接状态，1正在连接，2连接成功，3连接失败
     * </pre>
     */
    public boolean hasWifiState() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 wifi_state = 15;</code>
     *
     * <pre>
     *家庭网络连接状态，1正在连接，2连接成功，3连接失败
     * </pre>
     */
    public int getWifiState() {
      return wifiState_;
    }

    // optional uint32 user_type = 16;
    public static final int USER_TYPE_FIELD_NUMBER = 16;
    private int userType_;
    /**
     * <code>optional uint32 user_type = 16;</code>
     *
     * <pre>
     *0保留，1 identifier+usersig，2 openid+accesstoken，4 sdk登陆获取uid方式
     * </pre>
     */
    public boolean hasUserType() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 user_type = 16;</code>
     *
     * <pre>
     *0保留，1 identifier+usersig，2 openid+accesstoken，4 sdk登陆获取uid方式
     * </pre>
     */
    public int getUserType() {
      return userType_;
    }

    // optional bytes user = 17;
    public static final int USER_FIELD_NUMBER = 17;
    private com.google.protobuf.ByteString user_;
    /**
     * <code>optional bytes user = 17;</code>
     *
     * <pre>
     *当user_type=1时，此字段填腾讯TLS登录的identifier，当user_type=2时，此字段填腾讯openqq登录的openid，当user_type=4时，此字段填第三方使用sdk接入的用户名
     * </pre>
     */
    public boolean hasUser() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional bytes user = 17;</code>
     *
     * <pre>
     *当user_type=1时，此字段填腾讯TLS登录的identifier，当user_type=2时，此字段填腾讯openqq登录的openid，当user_type=4时，此字段填第三方使用sdk接入的用户名
     * </pre>
     */
    public com.google.protobuf.ByteString getUser() {
      return user_;
    }

    // optional bytes key = 18;
    public static final int KEY_FIELD_NUMBER = 18;
    private com.google.protobuf.ByteString key_;
    /**
     * <code>optional bytes key = 18;</code>
     *
     * <pre>
     *当user_type=1时，此字段填腾讯TLS登录的usersig，当user_type=2时，此字段填腾讯openqq登录的accesstoken，当user_type=4时，此字段填发放给第三方的appkey
     * </pre>
     */
    public boolean hasKey() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional bytes key = 18;</code>
     *
     * <pre>
     *当user_type=1时，此字段填腾讯TLS登录的usersig，当user_type=2时，此字段填腾讯openqq登录的accesstoken，当user_type=4时，此字段填发放给第三方的appkey
     * </pre>
     */
    public com.google.protobuf.ByteString getKey() {
      return key_;
    }

    // optional uint32 ver_cur = 19;
    public static final int VER_CUR_FIELD_NUMBER = 19;
    private int verCur_;
    /**
     * <code>optional uint32 ver_cur = 19;</code>
     *
     * <pre>
     *当前app版本号
     * </pre>
     */
    public boolean hasVerCur() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional uint32 ver_cur = 19;</code>
     *
     * <pre>
     *当前app版本号
     * </pre>
     */
    public int getVerCur() {
      return verCur_;
    }

    // optional uint32 ver_new = 20;
    public static final int VER_NEW_FIELD_NUMBER = 20;
    private int verNew_;
    /**
     * <code>optional uint32 ver_new = 20;</code>
     *
     * <pre>
     *最新app版本号
     * </pre>
     */
    public boolean hasVerNew() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional uint32 ver_new = 20;</code>
     *
     * <pre>
     *最新app版本号
     * </pre>
     */
    public int getVerNew() {
      return verNew_;
    }

    // optional bytes ver_info = 21;
    public static final int VER_INFO_FIELD_NUMBER = 21;
    private com.google.protobuf.ByteString verInfo_;
    /**
     * <code>optional bytes ver_info = 21;</code>
     *
     * <pre>
     *新版本更新信息
     * </pre>
     */
    public boolean hasVerInfo() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional bytes ver_info = 21;</code>
     *
     * <pre>
     *新版本更新信息
     * </pre>
     */
    public com.google.protobuf.ByteString getVerInfo() {
      return verInfo_;
    }

    // optional bytes ver_url = 22;
    public static final int VER_URL_FIELD_NUMBER = 22;
    private com.google.protobuf.ByteString verUrl_;
    /**
     * <code>optional bytes ver_url = 22;</code>
     *
     * <pre>
     *新版本下载链接
     * </pre>
     */
    public boolean hasVerUrl() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional bytes ver_url = 22;</code>
     *
     * <pre>
     *新版本下载链接
     * </pre>
     */
    public com.google.protobuf.ByteString getVerUrl() {
      return verUrl_;
    }

    // optional uint64 appid = 24;
    public static final int APPID_FIELD_NUMBER = 24;
    private long appid_;
    /**
     * <code>optional uint64 appid = 24;</code>
     *
     * <pre>
     *当user_type=1时，此字段填腾讯TLS登录的sdkappid，当user_type=2时，此字段填腾讯openqq登录的client_id，当user_type=4时，此字段填发放给第三方的appid
     * </pre>
     */
    public boolean hasAppid() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional uint64 appid = 24;</code>
     *
     * <pre>
     *当user_type=1时，此字段填腾讯TLS登录的sdkappid，当user_type=2时，此字段填腾讯openqq登录的client_id，当user_type=4时，此字段填发放给第三方的appid
     * </pre>
     */
    public long getAppid() {
      return appid_;
    }

    // repeated .nodepp.Timer timers = 29;
    public static final int TIMERS_FIELD_NUMBER = 29;
    private java.util.List<Timer> timers_;
    /**
     * <code>repeated .nodepp.Timer timers = 29;</code>
     *
     * <pre>
     *定时器设置
     * </pre>
     */
    public java.util.List<Timer> getTimersList() {
      return timers_;
    }
    /**
     * <code>repeated .nodepp.Timer timers = 29;</code>
     *
     * <pre>
     *定时器设置
     * </pre>
     */
    public java.util.List<? extends TimerOrBuilder>
        getTimersOrBuilderList() {
      return timers_;
    }
    /**
     * <code>repeated .nodepp.Timer timers = 29;</code>
     *
     * <pre>
     *定时器设置
     * </pre>
     */
    public int getTimersCount() {
      return timers_.size();
    }
    /**
     * <code>repeated .nodepp.Timer timers = 29;</code>
     *
     * <pre>
     *定时器设置
     * </pre>
     */
    public Timer getTimers(int index) {
      return timers_.get(index);
    }
    /**
     * <code>repeated .nodepp.Timer timers = 29;</code>
     *
     * <pre>
     *定时器设置
     * </pre>
     */
    public TimerOrBuilder getTimersOrBuilder(
        int index) {
      return timers_.get(index);
    }

    // optional uint64 uid = 30;
    public static final int UID_FIELD_NUMBER = 30;
    private long uid_;
    /**
     * <code>optional uint64 uid = 30;</code>
     *
     * <pre>
     *用户id，登录成功后，分配的uid，在请求其他命令的时候，将uid，usig放在Head结构中的uid，sig中
     * </pre>
     */
    public boolean hasUid() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional uint64 uid = 30;</code>
     *
     * <pre>
     *用户id，登录成功后，分配的uid，在请求其他命令的时候，将uid，usig放在Head结构中的uid，sig中
     * </pre>
     */
    public long getUid() {
      return uid_;
    }

    // optional bytes usig = 31;
    public static final int USIG_FIELD_NUMBER = 31;
    private com.google.protobuf.ByteString usig_;
    /**
     * <code>optional bytes usig = 31;</code>
     *
     * <pre>
     *uid对应的票据
     * </pre>
     */
    public boolean hasUsig() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional bytes usig = 31;</code>
     *
     * <pre>
     *uid对应的票据
     * </pre>
     */
    public com.google.protobuf.ByteString getUsig() {
      return usig_;
    }

    // optional uint64 mid = 32;
    public static final int MID_FIELD_NUMBER = 32;
    private long mid_;
    /**
     * <code>optional uint64 mid = 32;</code>
     *
     * <pre>
     *厂商id
     * </pre>
     */
    public boolean hasMid() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional uint64 mid = 32;</code>
     *
     * <pre>
     *厂商id
     * </pre>
     */
    public long getMid() {
      return mid_;
    }

    // optional uint64 sub_mid = 33;
    public static final int SUB_MID_FIELD_NUMBER = 33;
    private long subMid_;
    /**
     * <code>optional uint64 sub_mid = 33;</code>
     *
     * <pre>
     *厂商子id
     * </pre>
     */
    public boolean hasSubMid() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional uint64 sub_mid = 33;</code>
     *
     * <pre>
     *厂商子id
     * </pre>
     */
    public long getSubMid() {
      return subMid_;
    }

    // optional bytes msig = 34;
    public static final int MSIG_FIELD_NUMBER = 34;
    private com.google.protobuf.ByteString msig_;
    /**
     * <code>optional bytes msig = 34;</code>
     *
     * <pre>
     *mid对应的票据
     * </pre>
     */
    public boolean hasMsig() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional bytes msig = 34;</code>
     *
     * <pre>
     *mid对应的票据
     * </pre>
     */
    public com.google.protobuf.ByteString getMsig() {
      return msig_;
    }

    // optional uint64 did = 35;
    public static final int DID_FIELD_NUMBER = 35;
    private long did_;
    /**
     * <code>optional uint64 did = 35;</code>
     *
     * <pre>
     *设备id
     * </pre>
     */
    public boolean hasDid() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional uint64 did = 35;</code>
     *
     * <pre>
     *设备id
     * </pre>
     */
    public long getDid() {
      return did_;
    }

    // optional bytes dsig = 36;
    public static final int DSIG_FIELD_NUMBER = 36;
    private com.google.protobuf.ByteString dsig_;
    /**
     * <code>optional bytes dsig = 36;</code>
     *
     * <pre>
     *did对应的票据
     * </pre>
     */
    public boolean hasDsig() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional bytes dsig = 36;</code>
     *
     * <pre>
     *did对应的票据
     * </pre>
     */
    public com.google.protobuf.ByteString getDsig() {
      return dsig_;
    }

    // optional uint64 tid = 37;
    public static final int TID_FIELD_NUMBER = 37;
    private long tid_;
    /**
     * <code>optional uint64 tid = 37;</code>
     *
     * <pre>
     *临时设备id
     * </pre>
     */
    public boolean hasTid() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional uint64 tid = 37;</code>
     *
     * <pre>
     *临时设备id
     * </pre>
     */
    public long getTid() {
      return tid_;
    }

    // optional uint32 device_type = 42;
    public static final int DEVICE_TYPE_FIELD_NUMBER = 42;
    private int deviceType_;
    /**
     * <code>optional uint32 device_type = 42;</code>
     *
     * <pre>
     *用于判断设备类型，0表示不确定什么类型，1表示普通1路控制灯，2表示普通6路控制灯，3表示彩光灯
     * </pre>
     */
    public boolean hasDeviceType() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional uint32 device_type = 42;</code>
     *
     * <pre>
     *用于判断设备类型，0表示不确定什么类型，1表示普通1路控制灯，2表示普通6路控制灯，3表示彩光灯
     * </pre>
     */
    public int getDeviceType() {
      return deviceType_;
    }

    // optional uint32 conneted_mode = 43;
    public static final int CONNETED_MODE_FIELD_NUMBER = 43;
    private int connetedMode_;
    /**
     * <code>optional uint32 conneted_mode = 43;</code>
     *
     * <pre>
     *设备连接类型，0表示互联网连接控制，1表示近场局域网控制
     * </pre>
     */
    public boolean hasConnetedMode() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional uint32 conneted_mode = 43;</code>
     *
     * <pre>
     *设备连接类型，0表示互联网连接控制，1表示近场局域网控制
     * </pre>
     */
    public int getConnetedMode() {
      return connetedMode_;
    }

    // optional uint32 platform = 44;
    public static final int PLATFORM_FIELD_NUMBER = 44;
    private int platform_;
    /**
     * <code>optional uint32 platform = 44;</code>
     *
     * <pre>
     *app的类型，用于版本更新进行区分，0代表android端，1代表ios端
     * </pre>
     */
    public boolean hasPlatform() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional uint32 platform = 44;</code>
     *
     * <pre>
     *app的类型，用于版本更新进行区分，0代表android端，1代表ios端
     * </pre>
     */
    public int getPlatform() {
      return platform_;
    }

    // repeated .nodepp.Rgb colors = 45;
    public static final int COLORS_FIELD_NUMBER = 45;
    private java.util.List<Rgb> colors_;
    /**
     * <code>repeated .nodepp.Rgb colors = 45;</code>
     *
     * <pre>
     *w,r,g,b色值数组，用于彩灯和白灯的色彩调节
     * </pre>
     */
    public java.util.List<Rgb> getColorsList() {
      return colors_;
    }
    /**
     * <code>repeated .nodepp.Rgb colors = 45;</code>
     *
     * <pre>
     *w,r,g,b色值数组，用于彩灯和白灯的色彩调节
     * </pre>
     */
    public java.util.List<? extends RgbOrBuilder>
        getColorsOrBuilderList() {
      return colors_;
    }
    /**
     * <code>repeated .nodepp.Rgb colors = 45;</code>
     *
     * <pre>
     *w,r,g,b色值数组，用于彩灯和白灯的色彩调节
     * </pre>
     */
    public int getColorsCount() {
      return colors_.size();
    }
    /**
     * <code>repeated .nodepp.Rgb colors = 45;</code>
     *
     * <pre>
     *w,r,g,b色值数组，用于彩灯和白灯的色彩调节
     * </pre>
     */
    public Rgb getColors(int index) {
      return colors_.get(index);
    }
    /**
     * <code>repeated .nodepp.Rgb colors = 45;</code>
     *
     * <pre>
     *w,r,g,b色值数组，用于彩灯和白灯的色彩调节
     * </pre>
     */
    public RgbOrBuilder getColorsOrBuilder(
        int index) {
      return colors_.get(index);
    }

    // optional uint32 color_switch_time = 46;
    public static final int COLOR_SWITCH_TIME_FIELD_NUMBER = 46;
    private int colorSwitchTime_;
    /**
     * <code>optional uint32 color_switch_time = 46;</code>
     *
     * <pre>
     *彩灯颜色切换间隔时间，1000ms-10000ms
     * </pre>
     */
    public boolean hasColorSwitchTime() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional uint32 color_switch_time = 46;</code>
     *
     * <pre>
     *彩灯颜色切换间隔时间，1000ms-10000ms
     * </pre>
     */
    public int getColorSwitchTime() {
      return colorSwitchTime_;
    }

    // optional uint32 devices_max = 47;
    public static final int DEVICES_MAX_FIELD_NUMBER = 47;
    private int devicesMax_;
    /**
     * <code>optional uint32 devices_max = 47;</code>
     *
     * <pre>
     *厂商可获取的did个数最大值
     * </pre>
     */
    public boolean hasDevicesMax() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional uint32 devices_max = 47;</code>
     *
     * <pre>
     *厂商可获取的did个数最大值
     * </pre>
     */
    public int getDevicesMax() {
      return devicesMax_;
    }

    // optional uint32 devices_cur = 48;
    public static final int DEVICES_CUR_FIELD_NUMBER = 48;
    private int devicesCur_;
    /**
     * <code>optional uint32 devices_cur = 48;</code>
     *
     * <pre>
     *厂商获取的did个数的当前值
     * </pre>
     */
    public boolean hasDevicesCur() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional uint32 devices_cur = 48;</code>
     *
     * <pre>
     *厂商获取的did个数的当前值
     * </pre>
     */
    public int getDevicesCur() {
      return devicesCur_;
    }

    // optional bytes share_verification = 49;
    public static final int SHARE_VERIFICATION_FIELD_NUMBER = 49;
    private com.google.protobuf.ByteString shareVerification_;
    /**
     * <code>optional bytes share_verification = 49;</code>
     *
     * <pre>
     *分享设备二维码时所需要的认证sig，通过添加二维码设备需要检验的sig
     * </pre>
     */
    public boolean hasShareVerification() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional bytes share_verification = 49;</code>
     *
     * <pre>
     *分享设备二维码时所需要的认证sig，通过添加二维码设备需要检验的sig
     * </pre>
     */
    public com.google.protobuf.ByteString getShareVerification() {
      return shareVerification_;
    }

    // repeated .nodepp.Device devices = 50;
    public static final int DEVICES_FIELD_NUMBER = 50;
    private java.util.List<Device> devices_;
    /**
     * <code>repeated .nodepp.Device devices = 50;</code>
     *
     * <pre>
     *新增，设备集合
     * </pre>
     */
    public java.util.List<Device> getDevicesList() {
      return devices_;
    }
    /**
     * <code>repeated .nodepp.Device devices = 50;</code>
     *
     * <pre>
     *新增，设备集合
     * </pre>
     */
    public java.util.List<? extends DeviceOrBuilder>
        getDevicesOrBuilderList() {
      return devices_;
    }
    /**
     * <code>repeated .nodepp.Device devices = 50;</code>
     *
     * <pre>
     *新增，设备集合
     * </pre>
     */
    public int getDevicesCount() {
      return devices_.size();
    }
    /**
     * <code>repeated .nodepp.Device devices = 50;</code>
     *
     * <pre>
     *新增，设备集合
     * </pre>
     */
    public Device getDevices(int index) {
      return devices_.get(index);
    }
    /**
     * <code>repeated .nodepp.Device devices = 50;</code>
     *
     * <pre>
     *新增，设备集合
     * </pre>
     */
    public DeviceOrBuilder getDevicesOrBuilder(
        int index) {
      return devices_.get(index);
    }

    // optional uint32 initialize_data = 51;
    public static final int INITIALIZE_DATA_FIELD_NUMBER = 51;
    private int initializeData_;
    /**
     * <code>optional uint32 initialize_data = 51;</code>
     *
     * <pre>
     *新增，是否需要设备初始化，根据上一次的device_identification和这一次来决定。0代表不需要，1代表需要
     * </pre>
     */
    public boolean hasInitializeData() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional uint32 initialize_data = 51;</code>
     *
     * <pre>
     *新增，是否需要设备初始化，根据上一次的device_identification和这一次来决定。0代表不需要，1代表需要
     * </pre>
     */
    public int getInitializeData() {
      return initializeData_;
    }

    // repeated uint64 dids = 52;
    public static final int DIDS_FIELD_NUMBER = 52;
    private java.util.List<Long> dids_;
    /**
     * <code>repeated uint64 dids = 52;</code>
     *
     * <pre>
     *当前用户的所有did
     * </pre>
     */
    public java.util.List<Long>
        getDidsList() {
      return dids_;
    }
    /**
     * <code>repeated uint64 dids = 52;</code>
     *
     * <pre>
     *当前用户的所有did
     * </pre>
     */
    public int getDidsCount() {
      return dids_.size();
    }
    /**
     * <code>repeated uint64 dids = 52;</code>
     *
     * <pre>
     *当前用户的所有did
     * </pre>
     */
    public long getDids(int index) {
      return dids_.get(index);
    }

    // optional bytes user_data = 53;
    public static final int USER_DATA_FIELD_NUMBER = 53;
    private com.google.protobuf.ByteString userData_;
    /**
     * <code>optional bytes user_data = 53;</code>
     *
     * <pre>
     *串口通讯传输的信息
     * </pre>
     */
    public boolean hasUserData() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional bytes user_data = 53;</code>
     *
     * <pre>
     *串口通讯传输的信息
     * </pre>
     */
    public com.google.protobuf.ByteString getUserData() {
      return userData_;
    }

    // optional bytes random = 54;
    public static final int RANDOM_FIELD_NUMBER = 54;
    private com.google.protobuf.ByteString random_;
    /**
     * <code>optional bytes random = 54;</code>
     */
    public boolean hasRandom() {
      return ((bitField1_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bytes random = 54;</code>
     */
    public com.google.protobuf.ByteString getRandom() {
      return random_;
    }

    // optional .nodepp.Upgrade upgrade = 55;
    public static final int UPGRADE_FIELD_NUMBER = 55;
    private Upgrade upgrade_;
    /**
     * <code>optional .nodepp.Upgrade upgrade = 55;</code>
     *
     * <pre>
     *fw
     * </pre>
     */
    public boolean hasUpgrade() {
      return ((bitField1_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .nodepp.Upgrade upgrade = 55;</code>
     *
     * <pre>
     *fw
     * </pre>
     */
    public Upgrade getUpgrade() {
      return upgrade_;
    }
    /**
     * <code>optional .nodepp.Upgrade upgrade = 55;</code>
     *
     * <pre>
     *fw
     * </pre>
     */
    public UpgradeOrBuilder getUpgradeOrBuilder() {
      return upgrade_;
    }

    // optional bytes key_client = 56;
    public static final int KEY_CLIENT_FIELD_NUMBER = 56;
    private com.google.protobuf.ByteString keyClient_;
    /**
     * <code>optional bytes key_client = 56;</code>
     */
    public boolean hasKeyClient() {
      return ((bitField1_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bytes key_client = 56;</code>
     */
    public com.google.protobuf.ByteString getKeyClient() {
      return keyClient_;
    }

    // optional uint32 bright_dark = 57;
    public static final int BRIGHT_DARK_FIELD_NUMBER = 57;
    private int brightDark_;
    /**
     * <code>optional uint32 bright_dark = 57;</code>
     *
     * <pre>
     *彩灯的亮暗值
     * </pre>
     */
    public boolean hasBrightDark() {
      return ((bitField1_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 bright_dark = 57;</code>
     *
     * <pre>
     *彩灯的亮暗值
     * </pre>
     */
    public int getBrightDark() {
      return brightDark_;
    }

    // optional uint32 su_yan = 58;
    public static final int SU_YAN_FIELD_NUMBER = 58;
    private int suYan_;
    /**
     * <code>optional uint32 su_yan = 58;</code>
     *
     * <pre>
     *彩灯的素艳值
     * </pre>
     */
    public boolean hasSuYan() {
      return ((bitField1_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 su_yan = 58;</code>
     *
     * <pre>
     *彩灯的素艳值
     * </pre>
     */
    public int getSuYan() {
      return suYan_;
    }

    // optional bytes mac_id = 59;
    public static final int MAC_ID_FIELD_NUMBER = 59;
    private com.google.protobuf.ByteString macId_;
    /**
     * <code>optional bytes mac_id = 59;</code>
     *
     * <pre>
     *mac数量统计
     * </pre>
     */
    public boolean hasMacId() {
      return ((bitField1_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bytes mac_id = 59;</code>
     *
     * <pre>
     *mac数量统计
     * </pre>
     */
    public com.google.protobuf.ByteString getMacId() {
      return macId_;
    }

    // optional uint32 device_mode = 60;
    public static final int DEVICE_MODE_FIELD_NUMBER = 60;
    private int deviceMode_;
    /**
     * <code>optional uint32 device_mode = 60;</code>
     *
     * <pre>
     *设备工作模式，0表示自锁，1表示点动，2表示互锁模式
     * </pre>
     */
    public boolean hasDeviceMode() {
      return ((bitField1_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 device_mode = 60;</code>
     *
     * <pre>
     *设备工作模式，0表示自锁，1表示点动，2表示互锁模式
     * </pre>
     */
    public int getDeviceMode() {
      return deviceMode_;
    }

    // optional bytes key_client_wan = 61;
    public static final int KEY_CLIENT_WAN_FIELD_NUMBER = 61;
    private com.google.protobuf.ByteString keyClientWan_;
    /**
     * <code>optional bytes key_client_wan = 61;</code>
     *
     * <pre>
     *client-server key
     * </pre>
     */
    public boolean hasKeyClientWan() {
      return ((bitField1_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional bytes key_client_wan = 61;</code>
     *
     * <pre>
     *client-server key
     * </pre>
     */
    public com.google.protobuf.ByteString getKeyClientWan() {
      return keyClientWan_;
    }

    // optional uint32 app_protocol = 62;
    public static final int APP_PROTOCOL_FIELD_NUMBER = 62;
    private int appProtocol_;
    /**
     * <code>optional uint32 app_protocol = 62;</code>
     */
    public boolean hasAppProtocol() {
      return ((bitField1_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 app_protocol = 62;</code>
     */
    public int getAppProtocol() {
      return appProtocol_;
    }

    private void initFields() {
      head_ = Head.getDefaultInstance();
      timeInterval_ = 0;
      operate_ = 0;
      state_ = 0;
      wifiName_ = com.google.protobuf.ByteString.EMPTY;
      wifiPasswd_ = com.google.protobuf.ByteString.EMPTY;
      wifiState_ = 0;
      userType_ = 0;
      user_ = com.google.protobuf.ByteString.EMPTY;
      key_ = com.google.protobuf.ByteString.EMPTY;
      verCur_ = 0;
      verNew_ = 0;
      verInfo_ = com.google.protobuf.ByteString.EMPTY;
      verUrl_ = com.google.protobuf.ByteString.EMPTY;
      appid_ = 0L;
      timers_ = java.util.Collections.emptyList();
      uid_ = 0L;
      usig_ = com.google.protobuf.ByteString.EMPTY;
      mid_ = 0L;
      subMid_ = 0L;
      msig_ = com.google.protobuf.ByteString.EMPTY;
      did_ = 0L;
      dsig_ = com.google.protobuf.ByteString.EMPTY;
      tid_ = 0L;
      deviceType_ = 0;
      connetedMode_ = 0;
      platform_ = 0;
      colors_ = java.util.Collections.emptyList();
      colorSwitchTime_ = 0;
      devicesMax_ = 0;
      devicesCur_ = 0;
      shareVerification_ = com.google.protobuf.ByteString.EMPTY;
      devices_ = java.util.Collections.emptyList();
      initializeData_ = 0;
      dids_ = java.util.Collections.emptyList();
      userData_ = com.google.protobuf.ByteString.EMPTY;
      random_ = com.google.protobuf.ByteString.EMPTY;
      upgrade_ = Upgrade.getDefaultInstance();
      keyClient_ = com.google.protobuf.ByteString.EMPTY;
      brightDark_ = 0;
      suYan_ = 0;
      macId_ = com.google.protobuf.ByteString.EMPTY;
      deviceMode_ = 0;
      keyClientWan_ = com.google.protobuf.ByteString.EMPTY;
      appProtocol_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, head_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(10, timeInterval_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(11, operate_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(12, state_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(13, wifiName_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBytes(14, wifiPasswd_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(15, wifiState_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(16, userType_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBytes(17, user_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBytes(18, key_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeUInt32(19, verCur_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeUInt32(20, verNew_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeBytes(21, verInfo_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeBytes(22, verUrl_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeUInt64(24, appid_);
      }
      for (int i = 0; i < timers_.size(); i++) {
        output.writeMessage(29, timers_.get(i));
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeUInt64(30, uid_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeBytes(31, usig_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeUInt64(32, mid_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeUInt64(33, subMid_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeBytes(34, msig_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeUInt64(35, did_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeBytes(36, dsig_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeUInt64(37, tid_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeUInt32(42, deviceType_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeUInt32(43, connetedMode_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeUInt32(44, platform_);
      }
      for (int i = 0; i < colors_.size(); i++) {
        output.writeMessage(45, colors_.get(i));
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeUInt32(46, colorSwitchTime_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeUInt32(47, devicesMax_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeUInt32(48, devicesCur_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeBytes(49, shareVerification_);
      }
      for (int i = 0; i < devices_.size(); i++) {
        output.writeMessage(50, devices_.get(i));
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeUInt32(51, initializeData_);
      }
      for (int i = 0; i < dids_.size(); i++) {
        output.writeUInt64(52, dids_.get(i));
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeBytes(53, userData_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(54, random_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(55, upgrade_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(56, keyClient_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(57, brightDark_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(58, suYan_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        output.writeBytes(59, macId_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(60, deviceMode_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        output.writeBytes(61, keyClientWan_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(62, appProtocol_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, head_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, timeInterval_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(11, operate_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(12, state_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(13, wifiName_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(14, wifiPasswd_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(15, wifiState_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(16, userType_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(17, user_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(18, key_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(19, verCur_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(20, verNew_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(21, verInfo_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(22, verUrl_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(24, appid_);
      }
      for (int i = 0; i < timers_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(29, timers_.get(i));
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(30, uid_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(31, usig_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(32, mid_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(33, subMid_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(34, msig_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(35, did_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(36, dsig_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(37, tid_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(42, deviceType_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(43, connetedMode_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(44, platform_);
      }
      for (int i = 0; i < colors_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(45, colors_.get(i));
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(46, colorSwitchTime_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(47, devicesMax_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(48, devicesCur_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(49, shareVerification_);
      }
      for (int i = 0; i < devices_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(50, devices_.get(i));
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(51, initializeData_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < dids_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(dids_.get(i));
        }
        size += dataSize;
        size += 2 * getDidsList().size();
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(53, userData_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(54, random_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(55, upgrade_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(56, keyClient_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(57, brightDark_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(58, suYan_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(59, macId_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(60, deviceMode_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(61, keyClientWan_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(62, appProtocol_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static Msg parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Msg parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Msg parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Msg parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Msg parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Msg parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static Msg parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static Msg parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static Msg parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Msg parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(Msg prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code nodepp.Msg}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements MsgOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Nodepp.internal_static_nodepp_Msg_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Nodepp.internal_static_nodepp_Msg_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Msg.class, Builder.class);
      }

      // Construct using nodepp.Nodepp.Msg.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getHeadFieldBuilder();
          getTimersFieldBuilder();
          getColorsFieldBuilder();
          getDevicesFieldBuilder();
          getUpgradeFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (headBuilder_ == null) {
          head_ = Head.getDefaultInstance();
        } else {
          headBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        timeInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        operate_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        state_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        wifiName_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        wifiPasswd_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000020);
        wifiState_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        userType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        user_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000100);
        key_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000200);
        verCur_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        verNew_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        verInfo_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00001000);
        verUrl_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00002000);
        appid_ = 0L;
        bitField0_ = (bitField0_ & ~0x00004000);
        if (timersBuilder_ == null) {
          timers_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
        } else {
          timersBuilder_.clear();
        }
        uid_ = 0L;
        bitField0_ = (bitField0_ & ~0x00010000);
        usig_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00020000);
        mid_ = 0L;
        bitField0_ = (bitField0_ & ~0x00040000);
        subMid_ = 0L;
        bitField0_ = (bitField0_ & ~0x00080000);
        msig_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00100000);
        did_ = 0L;
        bitField0_ = (bitField0_ & ~0x00200000);
        dsig_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00400000);
        tid_ = 0L;
        bitField0_ = (bitField0_ & ~0x00800000);
        deviceType_ = 0;
        bitField0_ = (bitField0_ & ~0x01000000);
        connetedMode_ = 0;
        bitField0_ = (bitField0_ & ~0x02000000);
        platform_ = 0;
        bitField0_ = (bitField0_ & ~0x04000000);
        if (colorsBuilder_ == null) {
          colors_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x08000000);
        } else {
          colorsBuilder_.clear();
        }
        colorSwitchTime_ = 0;
        bitField0_ = (bitField0_ & ~0x10000000);
        devicesMax_ = 0;
        bitField0_ = (bitField0_ & ~0x20000000);
        devicesCur_ = 0;
        bitField0_ = (bitField0_ & ~0x40000000);
        shareVerification_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x80000000);
        if (devicesBuilder_ == null) {
          devices_ = java.util.Collections.emptyList();
          bitField1_ = (bitField1_ & ~0x00000001);
        } else {
          devicesBuilder_.clear();
        }
        initializeData_ = 0;
        bitField1_ = (bitField1_ & ~0x00000002);
        dids_ = java.util.Collections.emptyList();
        bitField1_ = (bitField1_ & ~0x00000004);
        userData_ = com.google.protobuf.ByteString.EMPTY;
        bitField1_ = (bitField1_ & ~0x00000008);
        random_ = com.google.protobuf.ByteString.EMPTY;
        bitField1_ = (bitField1_ & ~0x00000010);
        if (upgradeBuilder_ == null) {
          upgrade_ = Upgrade.getDefaultInstance();
        } else {
          upgradeBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000020);
        keyClient_ = com.google.protobuf.ByteString.EMPTY;
        bitField1_ = (bitField1_ & ~0x00000040);
        brightDark_ = 0;
        bitField1_ = (bitField1_ & ~0x00000080);
        suYan_ = 0;
        bitField1_ = (bitField1_ & ~0x00000100);
        macId_ = com.google.protobuf.ByteString.EMPTY;
        bitField1_ = (bitField1_ & ~0x00000200);
        deviceMode_ = 0;
        bitField1_ = (bitField1_ & ~0x00000400);
        keyClientWan_ = com.google.protobuf.ByteString.EMPTY;
        bitField1_ = (bitField1_ & ~0x00000800);
        appProtocol_ = 0;
        bitField1_ = (bitField1_ & ~0x00001000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Nodepp.internal_static_nodepp_Msg_descriptor;
      }

      public Msg getDefaultInstanceForType() {
        return Msg.getDefaultInstance();
      }

      public Msg build() {
        Msg result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public Msg buildPartial() {
        Msg result = new Msg(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int to_bitField0_ = 0;
        int to_bitField1_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (headBuilder_ == null) {
          result.head_ = head_;
        } else {
          result.head_ = headBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.timeInterval_ = timeInterval_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.operate_ = operate_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.state_ = state_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.wifiName_ = wifiName_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.wifiPasswd_ = wifiPasswd_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.wifiState_ = wifiState_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.userType_ = userType_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.user_ = user_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.key_ = key_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.verCur_ = verCur_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.verNew_ = verNew_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.verInfo_ = verInfo_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.verUrl_ = verUrl_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.appid_ = appid_;
        if (timersBuilder_ == null) {
          if (((bitField0_ & 0x00008000) == 0x00008000)) {
            timers_ = java.util.Collections.unmodifiableList(timers_);
            bitField0_ = (bitField0_ & ~0x00008000);
          }
          result.timers_ = timers_;
        } else {
          result.timers_ = timersBuilder_.build();
        }
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.uid_ = uid_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.usig_ = usig_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.mid_ = mid_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.subMid_ = subMid_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.msig_ = msig_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.did_ = did_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.dsig_ = dsig_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.tid_ = tid_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.deviceType_ = deviceType_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.connetedMode_ = connetedMode_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.platform_ = platform_;
        if (colorsBuilder_ == null) {
          if (((bitField0_ & 0x08000000) == 0x08000000)) {
            colors_ = java.util.Collections.unmodifiableList(colors_);
            bitField0_ = (bitField0_ & ~0x08000000);
          }
          result.colors_ = colors_;
        } else {
          result.colors_ = colorsBuilder_.build();
        }
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x04000000;
        }
        result.colorSwitchTime_ = colorSwitchTime_;
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x08000000;
        }
        result.devicesMax_ = devicesMax_;
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x10000000;
        }
        result.devicesCur_ = devicesCur_;
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x20000000;
        }
        result.shareVerification_ = shareVerification_;
        if (devicesBuilder_ == null) {
          if (((bitField1_ & 0x00000001) == 0x00000001)) {
            devices_ = java.util.Collections.unmodifiableList(devices_);
            bitField1_ = (bitField1_ & ~0x00000001);
          }
          result.devices_ = devices_;
        } else {
          result.devices_ = devicesBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x40000000;
        }
        result.initializeData_ = initializeData_;
        if (((bitField1_ & 0x00000004) == 0x00000004)) {
          dids_ = java.util.Collections.unmodifiableList(dids_);
          bitField1_ = (bitField1_ & ~0x00000004);
        }
        result.dids_ = dids_;
        if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x80000000;
        }
        result.userData_ = userData_;
        if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
          to_bitField1_ |= 0x00000001;
        }
        result.random_ = random_;
        if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
          to_bitField1_ |= 0x00000002;
        }
        if (upgradeBuilder_ == null) {
          result.upgrade_ = upgrade_;
        } else {
          result.upgrade_ = upgradeBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000040) == 0x00000040)) {
          to_bitField1_ |= 0x00000004;
        }
        result.keyClient_ = keyClient_;
        if (((from_bitField1_ & 0x00000080) == 0x00000080)) {
          to_bitField1_ |= 0x00000008;
        }
        result.brightDark_ = brightDark_;
        if (((from_bitField1_ & 0x00000100) == 0x00000100)) {
          to_bitField1_ |= 0x00000010;
        }
        result.suYan_ = suYan_;
        if (((from_bitField1_ & 0x00000200) == 0x00000200)) {
          to_bitField1_ |= 0x00000020;
        }
        result.macId_ = macId_;
        if (((from_bitField1_ & 0x00000400) == 0x00000400)) {
          to_bitField1_ |= 0x00000040;
        }
        result.deviceMode_ = deviceMode_;
        if (((from_bitField1_ & 0x00000800) == 0x00000800)) {
          to_bitField1_ |= 0x00000080;
        }
        result.keyClientWan_ = keyClientWan_;
        if (((from_bitField1_ & 0x00001000) == 0x00001000)) {
          to_bitField1_ |= 0x00000100;
        }
        result.appProtocol_ = appProtocol_;
        result.bitField0_ = to_bitField0_;
        result.bitField1_ = to_bitField1_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Msg) {
          return mergeFrom((Msg)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Msg other) {
        if (other == Msg.getDefaultInstance()) return this;
        if (other.hasHead()) {
          mergeHead(other.getHead());
        }
        if (other.hasTimeInterval()) {
          setTimeInterval(other.getTimeInterval());
        }
        if (other.hasOperate()) {
          setOperate(other.getOperate());
        }
        if (other.hasState()) {
          setState(other.getState());
        }
        if (other.hasWifiName()) {
          setWifiName(other.getWifiName());
        }
        if (other.hasWifiPasswd()) {
          setWifiPasswd(other.getWifiPasswd());
        }
        if (other.hasWifiState()) {
          setWifiState(other.getWifiState());
        }
        if (other.hasUserType()) {
          setUserType(other.getUserType());
        }
        if (other.hasUser()) {
          setUser(other.getUser());
        }
        if (other.hasKey()) {
          setKey(other.getKey());
        }
        if (other.hasVerCur()) {
          setVerCur(other.getVerCur());
        }
        if (other.hasVerNew()) {
          setVerNew(other.getVerNew());
        }
        if (other.hasVerInfo()) {
          setVerInfo(other.getVerInfo());
        }
        if (other.hasVerUrl()) {
          setVerUrl(other.getVerUrl());
        }
        if (other.hasAppid()) {
          setAppid(other.getAppid());
        }
        if (timersBuilder_ == null) {
          if (!other.timers_.isEmpty()) {
            if (timers_.isEmpty()) {
              timers_ = other.timers_;
              bitField0_ = (bitField0_ & ~0x00008000);
            } else {
              ensureTimersIsMutable();
              timers_.addAll(other.timers_);
            }
            onChanged();
          }
        } else {
          if (!other.timers_.isEmpty()) {
            if (timersBuilder_.isEmpty()) {
              timersBuilder_.dispose();
              timersBuilder_ = null;
              timers_ = other.timers_;
              bitField0_ = (bitField0_ & ~0x00008000);
              timersBuilder_ =
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTimersFieldBuilder() : null;
            } else {
              timersBuilder_.addAllMessages(other.timers_);
            }
          }
        }
        if (other.hasUid()) {
          setUid(other.getUid());
        }
        if (other.hasUsig()) {
          setUsig(other.getUsig());
        }
        if (other.hasMid()) {
          setMid(other.getMid());
        }
        if (other.hasSubMid()) {
          setSubMid(other.getSubMid());
        }
        if (other.hasMsig()) {
          setMsig(other.getMsig());
        }
        if (other.hasDid()) {
          setDid(other.getDid());
        }
        if (other.hasDsig()) {
          setDsig(other.getDsig());
        }
        if (other.hasTid()) {
          setTid(other.getTid());
        }
        if (other.hasDeviceType()) {
          setDeviceType(other.getDeviceType());
        }
        if (other.hasConnetedMode()) {
          setConnetedMode(other.getConnetedMode());
        }
        if (other.hasPlatform()) {
          setPlatform(other.getPlatform());
        }
        if (colorsBuilder_ == null) {
          if (!other.colors_.isEmpty()) {
            if (colors_.isEmpty()) {
              colors_ = other.colors_;
              bitField0_ = (bitField0_ & ~0x08000000);
            } else {
              ensureColorsIsMutable();
              colors_.addAll(other.colors_);
            }
            onChanged();
          }
        } else {
          if (!other.colors_.isEmpty()) {
            if (colorsBuilder_.isEmpty()) {
              colorsBuilder_.dispose();
              colorsBuilder_ = null;
              colors_ = other.colors_;
              bitField0_ = (bitField0_ & ~0x08000000);
              colorsBuilder_ =
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getColorsFieldBuilder() : null;
            } else {
              colorsBuilder_.addAllMessages(other.colors_);
            }
          }
        }
        if (other.hasColorSwitchTime()) {
          setColorSwitchTime(other.getColorSwitchTime());
        }
        if (other.hasDevicesMax()) {
          setDevicesMax(other.getDevicesMax());
        }
        if (other.hasDevicesCur()) {
          setDevicesCur(other.getDevicesCur());
        }
        if (other.hasShareVerification()) {
          setShareVerification(other.getShareVerification());
        }
        if (devicesBuilder_ == null) {
          if (!other.devices_.isEmpty()) {
            if (devices_.isEmpty()) {
              devices_ = other.devices_;
              bitField1_ = (bitField1_ & ~0x00000001);
            } else {
              ensureDevicesIsMutable();
              devices_.addAll(other.devices_);
            }
            onChanged();
          }
        } else {
          if (!other.devices_.isEmpty()) {
            if (devicesBuilder_.isEmpty()) {
              devicesBuilder_.dispose();
              devicesBuilder_ = null;
              devices_ = other.devices_;
              bitField1_ = (bitField1_ & ~0x00000001);
              devicesBuilder_ =
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDevicesFieldBuilder() : null;
            } else {
              devicesBuilder_.addAllMessages(other.devices_);
            }
          }
        }
        if (other.hasInitializeData()) {
          setInitializeData(other.getInitializeData());
        }
        if (!other.dids_.isEmpty()) {
          if (dids_.isEmpty()) {
            dids_ = other.dids_;
            bitField1_ = (bitField1_ & ~0x00000004);
          } else {
            ensureDidsIsMutable();
            dids_.addAll(other.dids_);
          }
          onChanged();
        }
        if (other.hasUserData()) {
          setUserData(other.getUserData());
        }
        if (other.hasRandom()) {
          setRandom(other.getRandom());
        }
        if (other.hasUpgrade()) {
          mergeUpgrade(other.getUpgrade());
        }
        if (other.hasKeyClient()) {
          setKeyClient(other.getKeyClient());
        }
        if (other.hasBrightDark()) {
          setBrightDark(other.getBrightDark());
        }
        if (other.hasSuYan()) {
          setSuYan(other.getSuYan());
        }
        if (other.hasMacId()) {
          setMacId(other.getMacId());
        }
        if (other.hasDeviceMode()) {
          setDeviceMode(other.getDeviceMode());
        }
        if (other.hasKeyClientWan()) {
          setKeyClientWan(other.getKeyClientWan());
        }
        if (other.hasAppProtocol()) {
          setAppProtocol(other.getAppProtocol());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Msg parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Msg) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;

      // optional .nodepp.Head head = 1;
      private Head head_ = Head.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          Head, Head.Builder, HeadOrBuilder> headBuilder_;
      /**
       * <code>optional .nodepp.Head head = 1;</code>
       */
      public boolean hasHead() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .nodepp.Head head = 1;</code>
       */
      public Head getHead() {
        if (headBuilder_ == null) {
          return head_;
        } else {
          return headBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .nodepp.Head head = 1;</code>
       */
      public Builder setHead(Head value) {
        if (headBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          head_ = value;
          onChanged();
        } else {
          headBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .nodepp.Head head = 1;</code>
       */
      public Builder setHead(
          Head.Builder builderForValue) {
        if (headBuilder_ == null) {
          head_ = builderForValue.build();
          onChanged();
        } else {
          headBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .nodepp.Head head = 1;</code>
       */
      public Builder mergeHead(Head value) {
        if (headBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              head_ != Head.getDefaultInstance()) {
            head_ =
              Head.newBuilder(head_).mergeFrom(value).buildPartial();
          } else {
            head_ = value;
          }
          onChanged();
        } else {
          headBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .nodepp.Head head = 1;</code>
       */
      public Builder clearHead() {
        if (headBuilder_ == null) {
          head_ = Head.getDefaultInstance();
          onChanged();
        } else {
          headBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .nodepp.Head head = 1;</code>
       */
      public Head.Builder getHeadBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getHeadFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .nodepp.Head head = 1;</code>
       */
      public HeadOrBuilder getHeadOrBuilder() {
        if (headBuilder_ != null) {
          return headBuilder_.getMessageOrBuilder();
        } else {
          return head_;
        }
      }
      /**
       * <code>optional .nodepp.Head head = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          Head, Head.Builder, HeadOrBuilder>
          getHeadFieldBuilder() {
        if (headBuilder_ == null) {
          headBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              Head, Head.Builder, HeadOrBuilder>(
                  head_,
                  getParentForChildren(),
                  isClean());
          head_ = null;
        }
        return headBuilder_;
      }

      // optional uint32 time_interval = 10;
      private int timeInterval_ ;
      /**
       * <code>optional uint32 time_interval = 10;</code>
       *
       * <pre>
       *从10开始使用
       * </pre>
       */
      public boolean hasTimeInterval() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 time_interval = 10;</code>
       *
       * <pre>
       *从10开始使用
       * </pre>
       */
      public int getTimeInterval() {
        return timeInterval_;
      }
      /**
       * <code>optional uint32 time_interval = 10;</code>
       *
       * <pre>
       *从10开始使用
       * </pre>
       */
      public Builder setTimeInterval(int value) {
        bitField0_ |= 0x00000002;
        timeInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 time_interval = 10;</code>
       *
       * <pre>
       *从10开始使用
       * </pre>
       */
      public Builder clearTimeInterval() {
        bitField0_ = (bitField0_ & ~0x00000002);
        timeInterval_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 operate = 11;
      private int operate_ ;
      /**
       * <code>optional uint32 operate = 11;</code>
       *
       * <pre>
       *操作，0断开命令，1接通命令。
       * </pre>
       */
      public boolean hasOperate() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 operate = 11;</code>
       *
       * <pre>
       *操作，0断开命令，1接通命令。
       * </pre>
       */
      public int getOperate() {
        return operate_;
      }
      /**
       * <code>optional uint32 operate = 11;</code>
       *
       * <pre>
       *操作，0断开命令，1接通命令。
       * </pre>
       */
      public Builder setOperate(int value) {
        bitField0_ |= 0x00000004;
        operate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 operate = 11;</code>
       *
       * <pre>
       *操作，0断开命令，1接通命令。
       * </pre>
       */
      public Builder clearOperate() {
        bitField0_ = (bitField0_ & ~0x00000004);
        operate_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 state = 12;
      private int state_ ;
      /**
       * <code>optional uint32 state = 12;</code>
       *
       * <pre>
       *状态，0断开状态，1接通状态。
       * </pre>
       */
      public boolean hasState() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 state = 12;</code>
       *
       * <pre>
       *状态，0断开状态，1接通状态。
       * </pre>
       */
      public int getState() {
        return state_;
      }
      /**
       * <code>optional uint32 state = 12;</code>
       *
       * <pre>
       *状态，0断开状态，1接通状态。
       * </pre>
       */
      public Builder setState(int value) {
        bitField0_ |= 0x00000008;
        state_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 state = 12;</code>
       *
       * <pre>
       *状态，0断开状态，1接通状态。
       * </pre>
       */
      public Builder clearState() {
        bitField0_ = (bitField0_ & ~0x00000008);
        state_ = 0;
        onChanged();
        return this;
      }

      // optional bytes wifi_name = 13;
      private com.google.protobuf.ByteString wifiName_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes wifi_name = 13;</code>
       *
       * <pre>
       *家庭网络用户名
       * </pre>
       */
      public boolean hasWifiName() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bytes wifi_name = 13;</code>
       *
       * <pre>
       *家庭网络用户名
       * </pre>
       */
      public com.google.protobuf.ByteString getWifiName() {
        return wifiName_;
      }
      /**
       * <code>optional bytes wifi_name = 13;</code>
       *
       * <pre>
       *家庭网络用户名
       * </pre>
       */
      public Builder setWifiName(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        wifiName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes wifi_name = 13;</code>
       *
       * <pre>
       *家庭网络用户名
       * </pre>
       */
      public Builder clearWifiName() {
        bitField0_ = (bitField0_ & ~0x00000010);
        wifiName_ = getDefaultInstance().getWifiName();
        onChanged();
        return this;
      }

      // optional bytes wifi_passwd = 14;
      private com.google.protobuf.ByteString wifiPasswd_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes wifi_passwd = 14;</code>
       *
       * <pre>
       *家庭网路密码
       * </pre>
       */
      public boolean hasWifiPasswd() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bytes wifi_passwd = 14;</code>
       *
       * <pre>
       *家庭网路密码
       * </pre>
       */
      public com.google.protobuf.ByteString getWifiPasswd() {
        return wifiPasswd_;
      }
      /**
       * <code>optional bytes wifi_passwd = 14;</code>
       *
       * <pre>
       *家庭网路密码
       * </pre>
       */
      public Builder setWifiPasswd(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        wifiPasswd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes wifi_passwd = 14;</code>
       *
       * <pre>
       *家庭网路密码
       * </pre>
       */
      public Builder clearWifiPasswd() {
        bitField0_ = (bitField0_ & ~0x00000020);
        wifiPasswd_ = getDefaultInstance().getWifiPasswd();
        onChanged();
        return this;
      }

      // optional uint32 wifi_state = 15;
      private int wifiState_ ;
      /**
       * <code>optional uint32 wifi_state = 15;</code>
       *
       * <pre>
       *家庭网络连接状态，1正在连接，2连接成功，3连接失败
       * </pre>
       */
      public boolean hasWifiState() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 wifi_state = 15;</code>
       *
       * <pre>
       *家庭网络连接状态，1正在连接，2连接成功，3连接失败
       * </pre>
       */
      public int getWifiState() {
        return wifiState_;
      }
      /**
       * <code>optional uint32 wifi_state = 15;</code>
       *
       * <pre>
       *家庭网络连接状态，1正在连接，2连接成功，3连接失败
       * </pre>
       */
      public Builder setWifiState(int value) {
        bitField0_ |= 0x00000040;
        wifiState_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 wifi_state = 15;</code>
       *
       * <pre>
       *家庭网络连接状态，1正在连接，2连接成功，3连接失败
       * </pre>
       */
      public Builder clearWifiState() {
        bitField0_ = (bitField0_ & ~0x00000040);
        wifiState_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 user_type = 16;
      private int userType_ ;
      /**
       * <code>optional uint32 user_type = 16;</code>
       *
       * <pre>
       *0保留，1 identifier+usersig，2 openid+accesstoken，4 sdk登陆获取uid方式
       * </pre>
       */
      public boolean hasUserType() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 user_type = 16;</code>
       *
       * <pre>
       *0保留，1 identifier+usersig，2 openid+accesstoken，4 sdk登陆获取uid方式
       * </pre>
       */
      public int getUserType() {
        return userType_;
      }
      /**
       * <code>optional uint32 user_type = 16;</code>
       *
       * <pre>
       *0保留，1 identifier+usersig，2 openid+accesstoken，4 sdk登陆获取uid方式
       * </pre>
       */
      public Builder setUserType(int value) {
        bitField0_ |= 0x00000080;
        userType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 user_type = 16;</code>
       *
       * <pre>
       *0保留，1 identifier+usersig，2 openid+accesstoken，4 sdk登陆获取uid方式
       * </pre>
       */
      public Builder clearUserType() {
        bitField0_ = (bitField0_ & ~0x00000080);
        userType_ = 0;
        onChanged();
        return this;
      }

      // optional bytes user = 17;
      private com.google.protobuf.ByteString user_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes user = 17;</code>
       *
       * <pre>
       *当user_type=1时，此字段填腾讯TLS登录的identifier，当user_type=2时，此字段填腾讯openqq登录的openid，当user_type=4时，此字段填第三方使用sdk接入的用户名
       * </pre>
       */
      public boolean hasUser() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional bytes user = 17;</code>
       *
       * <pre>
       *当user_type=1时，此字段填腾讯TLS登录的identifier，当user_type=2时，此字段填腾讯openqq登录的openid，当user_type=4时，此字段填第三方使用sdk接入的用户名
       * </pre>
       */
      public com.google.protobuf.ByteString getUser() {
        return user_;
      }
      /**
       * <code>optional bytes user = 17;</code>
       *
       * <pre>
       *当user_type=1时，此字段填腾讯TLS登录的identifier，当user_type=2时，此字段填腾讯openqq登录的openid，当user_type=4时，此字段填第三方使用sdk接入的用户名
       * </pre>
       */
      public Builder setUser(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
        user_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes user = 17;</code>
       *
       * <pre>
       *当user_type=1时，此字段填腾讯TLS登录的identifier，当user_type=2时，此字段填腾讯openqq登录的openid，当user_type=4时，此字段填第三方使用sdk接入的用户名
       * </pre>
       */
      public Builder clearUser() {
        bitField0_ = (bitField0_ & ~0x00000100);
        user_ = getDefaultInstance().getUser();
        onChanged();
        return this;
      }

      // optional bytes key = 18;
      private com.google.protobuf.ByteString key_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes key = 18;</code>
       *
       * <pre>
       *当user_type=1时，此字段填腾讯TLS登录的usersig，当user_type=2时，此字段填腾讯openqq登录的accesstoken，当user_type=4时，此字段填发放给第三方的appkey
       * </pre>
       */
      public boolean hasKey() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional bytes key = 18;</code>
       *
       * <pre>
       *当user_type=1时，此字段填腾讯TLS登录的usersig，当user_type=2时，此字段填腾讯openqq登录的accesstoken，当user_type=4时，此字段填发放给第三方的appkey
       * </pre>
       */
      public com.google.protobuf.ByteString getKey() {
        return key_;
      }
      /**
       * <code>optional bytes key = 18;</code>
       *
       * <pre>
       *当user_type=1时，此字段填腾讯TLS登录的usersig，当user_type=2时，此字段填腾讯openqq登录的accesstoken，当user_type=4时，此字段填发放给第三方的appkey
       * </pre>
       */
      public Builder setKey(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        key_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes key = 18;</code>
       *
       * <pre>
       *当user_type=1时，此字段填腾讯TLS登录的usersig，当user_type=2时，此字段填腾讯openqq登录的accesstoken，当user_type=4时，此字段填发放给第三方的appkey
       * </pre>
       */
      public Builder clearKey() {
        bitField0_ = (bitField0_ & ~0x00000200);
        key_ = getDefaultInstance().getKey();
        onChanged();
        return this;
      }

      // optional uint32 ver_cur = 19;
      private int verCur_ ;
      /**
       * <code>optional uint32 ver_cur = 19;</code>
       *
       * <pre>
       *当前app版本号
       * </pre>
       */
      public boolean hasVerCur() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional uint32 ver_cur = 19;</code>
       *
       * <pre>
       *当前app版本号
       * </pre>
       */
      public int getVerCur() {
        return verCur_;
      }
      /**
       * <code>optional uint32 ver_cur = 19;</code>
       *
       * <pre>
       *当前app版本号
       * </pre>
       */
      public Builder setVerCur(int value) {
        bitField0_ |= 0x00000400;
        verCur_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ver_cur = 19;</code>
       *
       * <pre>
       *当前app版本号
       * </pre>
       */
      public Builder clearVerCur() {
        bitField0_ = (bitField0_ & ~0x00000400);
        verCur_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 ver_new = 20;
      private int verNew_ ;
      /**
       * <code>optional uint32 ver_new = 20;</code>
       *
       * <pre>
       *最新app版本号
       * </pre>
       */
      public boolean hasVerNew() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional uint32 ver_new = 20;</code>
       *
       * <pre>
       *最新app版本号
       * </pre>
       */
      public int getVerNew() {
        return verNew_;
      }
      /**
       * <code>optional uint32 ver_new = 20;</code>
       *
       * <pre>
       *最新app版本号
       * </pre>
       */
      public Builder setVerNew(int value) {
        bitField0_ |= 0x00000800;
        verNew_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ver_new = 20;</code>
       *
       * <pre>
       *最新app版本号
       * </pre>
       */
      public Builder clearVerNew() {
        bitField0_ = (bitField0_ & ~0x00000800);
        verNew_ = 0;
        onChanged();
        return this;
      }

      // optional bytes ver_info = 21;
      private com.google.protobuf.ByteString verInfo_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes ver_info = 21;</code>
       *
       * <pre>
       *新版本更新信息
       * </pre>
       */
      public boolean hasVerInfo() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional bytes ver_info = 21;</code>
       *
       * <pre>
       *新版本更新信息
       * </pre>
       */
      public com.google.protobuf.ByteString getVerInfo() {
        return verInfo_;
      }
      /**
       * <code>optional bytes ver_info = 21;</code>
       *
       * <pre>
       *新版本更新信息
       * </pre>
       */
      public Builder setVerInfo(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00001000;
        verInfo_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes ver_info = 21;</code>
       *
       * <pre>
       *新版本更新信息
       * </pre>
       */
      public Builder clearVerInfo() {
        bitField0_ = (bitField0_ & ~0x00001000);
        verInfo_ = getDefaultInstance().getVerInfo();
        onChanged();
        return this;
      }

      // optional bytes ver_url = 22;
      private com.google.protobuf.ByteString verUrl_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes ver_url = 22;</code>
       *
       * <pre>
       *新版本下载链接
       * </pre>
       */
      public boolean hasVerUrl() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional bytes ver_url = 22;</code>
       *
       * <pre>
       *新版本下载链接
       * </pre>
       */
      public com.google.protobuf.ByteString getVerUrl() {
        return verUrl_;
      }
      /**
       * <code>optional bytes ver_url = 22;</code>
       *
       * <pre>
       *新版本下载链接
       * </pre>
       */
      public Builder setVerUrl(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00002000;
        verUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes ver_url = 22;</code>
       *
       * <pre>
       *新版本下载链接
       * </pre>
       */
      public Builder clearVerUrl() {
        bitField0_ = (bitField0_ & ~0x00002000);
        verUrl_ = getDefaultInstance().getVerUrl();
        onChanged();
        return this;
      }

      // optional uint64 appid = 24;
      private long appid_ ;
      /**
       * <code>optional uint64 appid = 24;</code>
       *
       * <pre>
       *当user_type=1时，此字段填腾讯TLS登录的sdkappid，当user_type=2时，此字段填腾讯openqq登录的client_id，当user_type=4时，此字段填发放给第三方的appid
       * </pre>
       */
      public boolean hasAppid() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional uint64 appid = 24;</code>
       *
       * <pre>
       *当user_type=1时，此字段填腾讯TLS登录的sdkappid，当user_type=2时，此字段填腾讯openqq登录的client_id，当user_type=4时，此字段填发放给第三方的appid
       * </pre>
       */
      public long getAppid() {
        return appid_;
      }
      /**
       * <code>optional uint64 appid = 24;</code>
       *
       * <pre>
       *当user_type=1时，此字段填腾讯TLS登录的sdkappid，当user_type=2时，此字段填腾讯openqq登录的client_id，当user_type=4时，此字段填发放给第三方的appid
       * </pre>
       */
      public Builder setAppid(long value) {
        bitField0_ |= 0x00004000;
        appid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 appid = 24;</code>
       *
       * <pre>
       *当user_type=1时，此字段填腾讯TLS登录的sdkappid，当user_type=2时，此字段填腾讯openqq登录的client_id，当user_type=4时，此字段填发放给第三方的appid
       * </pre>
       */
      public Builder clearAppid() {
        bitField0_ = (bitField0_ & ~0x00004000);
        appid_ = 0L;
        onChanged();
        return this;
      }

      // repeated .nodepp.Timer timers = 29;
      private java.util.List<Timer> timers_ =
        java.util.Collections.emptyList();
      private void ensureTimersIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          timers_ = new java.util.ArrayList<Timer>(timers_);
          bitField0_ |= 0x00008000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          Timer, Timer.Builder, TimerOrBuilder> timersBuilder_;

      /**
       * <code>repeated .nodepp.Timer timers = 29;</code>
       *
       * <pre>
       *定时器设置
       * </pre>
       */
      public java.util.List<Timer> getTimersList() {
        if (timersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(timers_);
        } else {
          return timersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .nodepp.Timer timers = 29;</code>
       *
       * <pre>
       *定时器设置
       * </pre>
       */
      public int getTimersCount() {
        if (timersBuilder_ == null) {
          return timers_.size();
        } else {
          return timersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .nodepp.Timer timers = 29;</code>
       *
       * <pre>
       *定时器设置
       * </pre>
       */
      public Timer getTimers(int index) {
        if (timersBuilder_ == null) {
          return timers_.get(index);
        } else {
          return timersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .nodepp.Timer timers = 29;</code>
       *
       * <pre>
       *定时器设置
       * </pre>
       */
      public Builder setTimers(
          int index, Timer value) {
        if (timersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimersIsMutable();
          timers_.set(index, value);
          onChanged();
        } else {
          timersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Timer timers = 29;</code>
       *
       * <pre>
       *定时器设置
       * </pre>
       */
      public Builder setTimers(
          int index, Timer.Builder builderForValue) {
        if (timersBuilder_ == null) {
          ensureTimersIsMutable();
          timers_.set(index, builderForValue.build());
          onChanged();
        } else {
          timersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Timer timers = 29;</code>
       *
       * <pre>
       *定时器设置
       * </pre>
       */
      public Builder addTimers(Timer value) {
        if (timersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimersIsMutable();
          timers_.add(value);
          onChanged();
        } else {
          timersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Timer timers = 29;</code>
       *
       * <pre>
       *定时器设置
       * </pre>
       */
      public Builder addTimers(
          int index, Timer value) {
        if (timersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimersIsMutable();
          timers_.add(index, value);
          onChanged();
        } else {
          timersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Timer timers = 29;</code>
       *
       * <pre>
       *定时器设置
       * </pre>
       */
      public Builder addTimers(
          Timer.Builder builderForValue) {
        if (timersBuilder_ == null) {
          ensureTimersIsMutable();
          timers_.add(builderForValue.build());
          onChanged();
        } else {
          timersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Timer timers = 29;</code>
       *
       * <pre>
       *定时器设置
       * </pre>
       */
      public Builder addTimers(
          int index, Timer.Builder builderForValue) {
        if (timersBuilder_ == null) {
          ensureTimersIsMutable();
          timers_.add(index, builderForValue.build());
          onChanged();
        } else {
          timersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Timer timers = 29;</code>
       *
       * <pre>
       *定时器设置
       * </pre>
       */
      public Builder addAllTimers(
          Iterable<? extends Timer> values) {
        if (timersBuilder_ == null) {
          ensureTimersIsMutable();
          super.addAll(values, timers_);
          onChanged();
        } else {
          timersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Timer timers = 29;</code>
       *
       * <pre>
       *定时器设置
       * </pre>
       */
      public Builder clearTimers() {
        if (timersBuilder_ == null) {
          timers_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
          onChanged();
        } else {
          timersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Timer timers = 29;</code>
       *
       * <pre>
       *定时器设置
       * </pre>
       */
      public Builder removeTimers(int index) {
        if (timersBuilder_ == null) {
          ensureTimersIsMutable();
          timers_.remove(index);
          onChanged();
        } else {
          timersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Timer timers = 29;</code>
       *
       * <pre>
       *定时器设置
       * </pre>
       */
      public Timer.Builder getTimersBuilder(
          int index) {
        return getTimersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .nodepp.Timer timers = 29;</code>
       *
       * <pre>
       *定时器设置
       * </pre>
       */
      public TimerOrBuilder getTimersOrBuilder(
          int index) {
        if (timersBuilder_ == null) {
          return timers_.get(index);  } else {
          return timersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .nodepp.Timer timers = 29;</code>
       *
       * <pre>
       *定时器设置
       * </pre>
       */
      public java.util.List<? extends TimerOrBuilder>
           getTimersOrBuilderList() {
        if (timersBuilder_ != null) {
          return timersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(timers_);
        }
      }
      /**
       * <code>repeated .nodepp.Timer timers = 29;</code>
       *
       * <pre>
       *定时器设置
       * </pre>
       */
      public Timer.Builder addTimersBuilder() {
        return getTimersFieldBuilder().addBuilder(
            Timer.getDefaultInstance());
      }
      /**
       * <code>repeated .nodepp.Timer timers = 29;</code>
       *
       * <pre>
       *定时器设置
       * </pre>
       */
      public Timer.Builder addTimersBuilder(
          int index) {
        return getTimersFieldBuilder().addBuilder(
            index, Timer.getDefaultInstance());
      }
      /**
       * <code>repeated .nodepp.Timer timers = 29;</code>
       *
       * <pre>
       *定时器设置
       * </pre>
       */
      public java.util.List<Timer.Builder>
           getTimersBuilderList() {
        return getTimersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          Timer, Timer.Builder, TimerOrBuilder>
          getTimersFieldBuilder() {
        if (timersBuilder_ == null) {
          timersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              Timer, Timer.Builder, TimerOrBuilder>(
                  timers_,
                  ((bitField0_ & 0x00008000) == 0x00008000),
                  getParentForChildren(),
                  isClean());
          timers_ = null;
        }
        return timersBuilder_;
      }

      // optional uint64 uid = 30;
      private long uid_ ;
      /**
       * <code>optional uint64 uid = 30;</code>
       *
       * <pre>
       *用户id，登录成功后，分配的uid，在请求其他命令的时候，将uid，usig放在Head结构中的uid，sig中
       * </pre>
       */
      public boolean hasUid() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional uint64 uid = 30;</code>
       *
       * <pre>
       *用户id，登录成功后，分配的uid，在请求其他命令的时候，将uid，usig放在Head结构中的uid，sig中
       * </pre>
       */
      public long getUid() {
        return uid_;
      }
      /**
       * <code>optional uint64 uid = 30;</code>
       *
       * <pre>
       *用户id，登录成功后，分配的uid，在请求其他命令的时候，将uid，usig放在Head结构中的uid，sig中
       * </pre>
       */
      public Builder setUid(long value) {
        bitField0_ |= 0x00010000;
        uid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 uid = 30;</code>
       *
       * <pre>
       *用户id，登录成功后，分配的uid，在请求其他命令的时候，将uid，usig放在Head结构中的uid，sig中
       * </pre>
       */
      public Builder clearUid() {
        bitField0_ = (bitField0_ & ~0x00010000);
        uid_ = 0L;
        onChanged();
        return this;
      }

      // optional bytes usig = 31;
      private com.google.protobuf.ByteString usig_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes usig = 31;</code>
       *
       * <pre>
       *uid对应的票据
       * </pre>
       */
      public boolean hasUsig() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional bytes usig = 31;</code>
       *
       * <pre>
       *uid对应的票据
       * </pre>
       */
      public com.google.protobuf.ByteString getUsig() {
        return usig_;
      }
      /**
       * <code>optional bytes usig = 31;</code>
       *
       * <pre>
       *uid对应的票据
       * </pre>
       */
      public Builder setUsig(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00020000;
        usig_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes usig = 31;</code>
       *
       * <pre>
       *uid对应的票据
       * </pre>
       */
      public Builder clearUsig() {
        bitField0_ = (bitField0_ & ~0x00020000);
        usig_ = getDefaultInstance().getUsig();
        onChanged();
        return this;
      }

      // optional uint64 mid = 32;
      private long mid_ ;
      /**
       * <code>optional uint64 mid = 32;</code>
       *
       * <pre>
       *厂商id
       * </pre>
       */
      public boolean hasMid() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional uint64 mid = 32;</code>
       *
       * <pre>
       *厂商id
       * </pre>
       */
      public long getMid() {
        return mid_;
      }
      /**
       * <code>optional uint64 mid = 32;</code>
       *
       * <pre>
       *厂商id
       * </pre>
       */
      public Builder setMid(long value) {
        bitField0_ |= 0x00040000;
        mid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 mid = 32;</code>
       *
       * <pre>
       *厂商id
       * </pre>
       */
      public Builder clearMid() {
        bitField0_ = (bitField0_ & ~0x00040000);
        mid_ = 0L;
        onChanged();
        return this;
      }

      // optional uint64 sub_mid = 33;
      private long subMid_ ;
      /**
       * <code>optional uint64 sub_mid = 33;</code>
       *
       * <pre>
       *厂商子id
       * </pre>
       */
      public boolean hasSubMid() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional uint64 sub_mid = 33;</code>
       *
       * <pre>
       *厂商子id
       * </pre>
       */
      public long getSubMid() {
        return subMid_;
      }
      /**
       * <code>optional uint64 sub_mid = 33;</code>
       *
       * <pre>
       *厂商子id
       * </pre>
       */
      public Builder setSubMid(long value) {
        bitField0_ |= 0x00080000;
        subMid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 sub_mid = 33;</code>
       *
       * <pre>
       *厂商子id
       * </pre>
       */
      public Builder clearSubMid() {
        bitField0_ = (bitField0_ & ~0x00080000);
        subMid_ = 0L;
        onChanged();
        return this;
      }

      // optional bytes msig = 34;
      private com.google.protobuf.ByteString msig_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes msig = 34;</code>
       *
       * <pre>
       *mid对应的票据
       * </pre>
       */
      public boolean hasMsig() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional bytes msig = 34;</code>
       *
       * <pre>
       *mid对应的票据
       * </pre>
       */
      public com.google.protobuf.ByteString getMsig() {
        return msig_;
      }
      /**
       * <code>optional bytes msig = 34;</code>
       *
       * <pre>
       *mid对应的票据
       * </pre>
       */
      public Builder setMsig(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00100000;
        msig_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes msig = 34;</code>
       *
       * <pre>
       *mid对应的票据
       * </pre>
       */
      public Builder clearMsig() {
        bitField0_ = (bitField0_ & ~0x00100000);
        msig_ = getDefaultInstance().getMsig();
        onChanged();
        return this;
      }

      // optional uint64 did = 35;
      private long did_ ;
      /**
       * <code>optional uint64 did = 35;</code>
       *
       * <pre>
       *设备id
       * </pre>
       */
      public boolean hasDid() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional uint64 did = 35;</code>
       *
       * <pre>
       *设备id
       * </pre>
       */
      public long getDid() {
        return did_;
      }
      /**
       * <code>optional uint64 did = 35;</code>
       *
       * <pre>
       *设备id
       * </pre>
       */
      public Builder setDid(long value) {
        bitField0_ |= 0x00200000;
        did_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 did = 35;</code>
       *
       * <pre>
       *设备id
       * </pre>
       */
      public Builder clearDid() {
        bitField0_ = (bitField0_ & ~0x00200000);
        did_ = 0L;
        onChanged();
        return this;
      }

      // optional bytes dsig = 36;
      private com.google.protobuf.ByteString dsig_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes dsig = 36;</code>
       *
       * <pre>
       *did对应的票据
       * </pre>
       */
      public boolean hasDsig() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional bytes dsig = 36;</code>
       *
       * <pre>
       *did对应的票据
       * </pre>
       */
      public com.google.protobuf.ByteString getDsig() {
        return dsig_;
      }
      /**
       * <code>optional bytes dsig = 36;</code>
       *
       * <pre>
       *did对应的票据
       * </pre>
       */
      public Builder setDsig(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00400000;
        dsig_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes dsig = 36;</code>
       *
       * <pre>
       *did对应的票据
       * </pre>
       */
      public Builder clearDsig() {
        bitField0_ = (bitField0_ & ~0x00400000);
        dsig_ = getDefaultInstance().getDsig();
        onChanged();
        return this;
      }

      // optional uint64 tid = 37;
      private long tid_ ;
      /**
       * <code>optional uint64 tid = 37;</code>
       *
       * <pre>
       *临时设备id
       * </pre>
       */
      public boolean hasTid() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional uint64 tid = 37;</code>
       *
       * <pre>
       *临时设备id
       * </pre>
       */
      public long getTid() {
        return tid_;
      }
      /**
       * <code>optional uint64 tid = 37;</code>
       *
       * <pre>
       *临时设备id
       * </pre>
       */
      public Builder setTid(long value) {
        bitField0_ |= 0x00800000;
        tid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 tid = 37;</code>
       *
       * <pre>
       *临时设备id
       * </pre>
       */
      public Builder clearTid() {
        bitField0_ = (bitField0_ & ~0x00800000);
        tid_ = 0L;
        onChanged();
        return this;
      }

      // optional uint32 device_type = 42;
      private int deviceType_ ;
      /**
       * <code>optional uint32 device_type = 42;</code>
       *
       * <pre>
       *用于判断设备类型，0表示不确定什么类型，1表示普通1路控制灯，2表示普通6路控制灯，3表示彩光灯
       * </pre>
       */
      public boolean hasDeviceType() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional uint32 device_type = 42;</code>
       *
       * <pre>
       *用于判断设备类型，0表示不确定什么类型，1表示普通1路控制灯，2表示普通6路控制灯，3表示彩光灯
       * </pre>
       */
      public int getDeviceType() {
        return deviceType_;
      }
      /**
       * <code>optional uint32 device_type = 42;</code>
       *
       * <pre>
       *用于判断设备类型，0表示不确定什么类型，1表示普通1路控制灯，2表示普通6路控制灯，3表示彩光灯
       * </pre>
       */
      public Builder setDeviceType(int value) {
        bitField0_ |= 0x01000000;
        deviceType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 device_type = 42;</code>
       *
       * <pre>
       *用于判断设备类型，0表示不确定什么类型，1表示普通1路控制灯，2表示普通6路控制灯，3表示彩光灯
       * </pre>
       */
      public Builder clearDeviceType() {
        bitField0_ = (bitField0_ & ~0x01000000);
        deviceType_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 conneted_mode = 43;
      private int connetedMode_ ;
      /**
       * <code>optional uint32 conneted_mode = 43;</code>
       *
       * <pre>
       *设备连接类型，0表示互联网连接控制，1表示近场局域网控制
       * </pre>
       */
      public boolean hasConnetedMode() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional uint32 conneted_mode = 43;</code>
       *
       * <pre>
       *设备连接类型，0表示互联网连接控制，1表示近场局域网控制
       * </pre>
       */
      public int getConnetedMode() {
        return connetedMode_;
      }
      /**
       * <code>optional uint32 conneted_mode = 43;</code>
       *
       * <pre>
       *设备连接类型，0表示互联网连接控制，1表示近场局域网控制
       * </pre>
       */
      public Builder setConnetedMode(int value) {
        bitField0_ |= 0x02000000;
        connetedMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 conneted_mode = 43;</code>
       *
       * <pre>
       *设备连接类型，0表示互联网连接控制，1表示近场局域网控制
       * </pre>
       */
      public Builder clearConnetedMode() {
        bitField0_ = (bitField0_ & ~0x02000000);
        connetedMode_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 platform = 44;
      private int platform_ ;
      /**
       * <code>optional uint32 platform = 44;</code>
       *
       * <pre>
       *app的类型，用于版本更新进行区分，0代表android端，1代表ios端
       * </pre>
       */
      public boolean hasPlatform() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional uint32 platform = 44;</code>
       *
       * <pre>
       *app的类型，用于版本更新进行区分，0代表android端，1代表ios端
       * </pre>
       */
      public int getPlatform() {
        return platform_;
      }
      /**
       * <code>optional uint32 platform = 44;</code>
       *
       * <pre>
       *app的类型，用于版本更新进行区分，0代表android端，1代表ios端
       * </pre>
       */
      public Builder setPlatform(int value) {
        bitField0_ |= 0x04000000;
        platform_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 platform = 44;</code>
       *
       * <pre>
       *app的类型，用于版本更新进行区分，0代表android端，1代表ios端
       * </pre>
       */
      public Builder clearPlatform() {
        bitField0_ = (bitField0_ & ~0x04000000);
        platform_ = 0;
        onChanged();
        return this;
      }

      // repeated .nodepp.Rgb colors = 45;
      private java.util.List<Rgb> colors_ =
        java.util.Collections.emptyList();
      private void ensureColorsIsMutable() {
        if (!((bitField0_ & 0x08000000) == 0x08000000)) {
          colors_ = new java.util.ArrayList<Rgb>(colors_);
          bitField0_ |= 0x08000000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          Rgb, Rgb.Builder, RgbOrBuilder> colorsBuilder_;

      /**
       * <code>repeated .nodepp.Rgb colors = 45;</code>
       *
       * <pre>
       *w,r,g,b色值数组，用于彩灯和白灯的色彩调节
       * </pre>
       */
      public java.util.List<Rgb> getColorsList() {
        if (colorsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(colors_);
        } else {
          return colorsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .nodepp.Rgb colors = 45;</code>
       *
       * <pre>
       *w,r,g,b色值数组，用于彩灯和白灯的色彩调节
       * </pre>
       */
      public int getColorsCount() {
        if (colorsBuilder_ == null) {
          return colors_.size();
        } else {
          return colorsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .nodepp.Rgb colors = 45;</code>
       *
       * <pre>
       *w,r,g,b色值数组，用于彩灯和白灯的色彩调节
       * </pre>
       */
      public Rgb getColors(int index) {
        if (colorsBuilder_ == null) {
          return colors_.get(index);
        } else {
          return colorsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .nodepp.Rgb colors = 45;</code>
       *
       * <pre>
       *w,r,g,b色值数组，用于彩灯和白灯的色彩调节
       * </pre>
       */
      public Builder setColors(
          int index, Rgb value) {
        if (colorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColorsIsMutable();
          colors_.set(index, value);
          onChanged();
        } else {
          colorsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Rgb colors = 45;</code>
       *
       * <pre>
       *w,r,g,b色值数组，用于彩灯和白灯的色彩调节
       * </pre>
       */
      public Builder setColors(
          int index, Rgb.Builder builderForValue) {
        if (colorsBuilder_ == null) {
          ensureColorsIsMutable();
          colors_.set(index, builderForValue.build());
          onChanged();
        } else {
          colorsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Rgb colors = 45;</code>
       *
       * <pre>
       *w,r,g,b色值数组，用于彩灯和白灯的色彩调节
       * </pre>
       */
      public Builder addColors(Rgb value) {
        if (colorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColorsIsMutable();
          colors_.add(value);
          onChanged();
        } else {
          colorsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Rgb colors = 45;</code>
       *
       * <pre>
       *w,r,g,b色值数组，用于彩灯和白灯的色彩调节
       * </pre>
       */
      public Builder addColors(
          int index, Rgb value) {
        if (colorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColorsIsMutable();
          colors_.add(index, value);
          onChanged();
        } else {
          colorsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Rgb colors = 45;</code>
       *
       * <pre>
       *w,r,g,b色值数组，用于彩灯和白灯的色彩调节
       * </pre>
       */
      public Builder addColors(
          Rgb.Builder builderForValue) {
        if (colorsBuilder_ == null) {
          ensureColorsIsMutable();
          colors_.add(builderForValue.build());
          onChanged();
        } else {
          colorsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Rgb colors = 45;</code>
       *
       * <pre>
       *w,r,g,b色值数组，用于彩灯和白灯的色彩调节
       * </pre>
       */
      public Builder addColors(
          int index, Rgb.Builder builderForValue) {
        if (colorsBuilder_ == null) {
          ensureColorsIsMutable();
          colors_.add(index, builderForValue.build());
          onChanged();
        } else {
          colorsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Rgb colors = 45;</code>
       *
       * <pre>
       *w,r,g,b色值数组，用于彩灯和白灯的色彩调节
       * </pre>
       */
      public Builder addAllColors(
          Iterable<? extends Rgb> values) {
        if (colorsBuilder_ == null) {
          ensureColorsIsMutable();
          super.addAll(values, colors_);
          onChanged();
        } else {
          colorsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Rgb colors = 45;</code>
       *
       * <pre>
       *w,r,g,b色值数组，用于彩灯和白灯的色彩调节
       * </pre>
       */
      public Builder clearColors() {
        if (colorsBuilder_ == null) {
          colors_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x08000000);
          onChanged();
        } else {
          colorsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Rgb colors = 45;</code>
       *
       * <pre>
       *w,r,g,b色值数组，用于彩灯和白灯的色彩调节
       * </pre>
       */
      public Builder removeColors(int index) {
        if (colorsBuilder_ == null) {
          ensureColorsIsMutable();
          colors_.remove(index);
          onChanged();
        } else {
          colorsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Rgb colors = 45;</code>
       *
       * <pre>
       *w,r,g,b色值数组，用于彩灯和白灯的色彩调节
       * </pre>
       */
      public Rgb.Builder getColorsBuilder(
          int index) {
        return getColorsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .nodepp.Rgb colors = 45;</code>
       *
       * <pre>
       *w,r,g,b色值数组，用于彩灯和白灯的色彩调节
       * </pre>
       */
      public RgbOrBuilder getColorsOrBuilder(
          int index) {
        if (colorsBuilder_ == null) {
          return colors_.get(index);  } else {
          return colorsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .nodepp.Rgb colors = 45;</code>
       *
       * <pre>
       *w,r,g,b色值数组，用于彩灯和白灯的色彩调节
       * </pre>
       */
      public java.util.List<? extends RgbOrBuilder>
           getColorsOrBuilderList() {
        if (colorsBuilder_ != null) {
          return colorsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(colors_);
        }
      }
      /**
       * <code>repeated .nodepp.Rgb colors = 45;</code>
       *
       * <pre>
       *w,r,g,b色值数组，用于彩灯和白灯的色彩调节
       * </pre>
       */
      public Rgb.Builder addColorsBuilder() {
        return getColorsFieldBuilder().addBuilder(
            Rgb.getDefaultInstance());
      }
      /**
       * <code>repeated .nodepp.Rgb colors = 45;</code>
       *
       * <pre>
       *w,r,g,b色值数组，用于彩灯和白灯的色彩调节
       * </pre>
       */
      public Rgb.Builder addColorsBuilder(
          int index) {
        return getColorsFieldBuilder().addBuilder(
            index, Rgb.getDefaultInstance());
      }
      /**
       * <code>repeated .nodepp.Rgb colors = 45;</code>
       *
       * <pre>
       *w,r,g,b色值数组，用于彩灯和白灯的色彩调节
       * </pre>
       */
      public java.util.List<Rgb.Builder>
           getColorsBuilderList() {
        return getColorsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          Rgb, Rgb.Builder, RgbOrBuilder>
          getColorsFieldBuilder() {
        if (colorsBuilder_ == null) {
          colorsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              Rgb, Rgb.Builder, RgbOrBuilder>(
                  colors_,
                  ((bitField0_ & 0x08000000) == 0x08000000),
                  getParentForChildren(),
                  isClean());
          colors_ = null;
        }
        return colorsBuilder_;
      }

      // optional uint32 color_switch_time = 46;
      private int colorSwitchTime_ ;
      /**
       * <code>optional uint32 color_switch_time = 46;</code>
       *
       * <pre>
       *彩灯颜色切换间隔时间，1000ms-10000ms
       * </pre>
       */
      public boolean hasColorSwitchTime() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional uint32 color_switch_time = 46;</code>
       *
       * <pre>
       *彩灯颜色切换间隔时间，1000ms-10000ms
       * </pre>
       */
      public int getColorSwitchTime() {
        return colorSwitchTime_;
      }
      /**
       * <code>optional uint32 color_switch_time = 46;</code>
       *
       * <pre>
       *彩灯颜色切换间隔时间，1000ms-10000ms
       * </pre>
       */
      public Builder setColorSwitchTime(int value) {
        bitField0_ |= 0x10000000;
        colorSwitchTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 color_switch_time = 46;</code>
       *
       * <pre>
       *彩灯颜色切换间隔时间，1000ms-10000ms
       * </pre>
       */
      public Builder clearColorSwitchTime() {
        bitField0_ = (bitField0_ & ~0x10000000);
        colorSwitchTime_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 devices_max = 47;
      private int devicesMax_ ;
      /**
       * <code>optional uint32 devices_max = 47;</code>
       *
       * <pre>
       *厂商可获取的did个数最大值
       * </pre>
       */
      public boolean hasDevicesMax() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional uint32 devices_max = 47;</code>
       *
       * <pre>
       *厂商可获取的did个数最大值
       * </pre>
       */
      public int getDevicesMax() {
        return devicesMax_;
      }
      /**
       * <code>optional uint32 devices_max = 47;</code>
       *
       * <pre>
       *厂商可获取的did个数最大值
       * </pre>
       */
      public Builder setDevicesMax(int value) {
        bitField0_ |= 0x20000000;
        devicesMax_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 devices_max = 47;</code>
       *
       * <pre>
       *厂商可获取的did个数最大值
       * </pre>
       */
      public Builder clearDevicesMax() {
        bitField0_ = (bitField0_ & ~0x20000000);
        devicesMax_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 devices_cur = 48;
      private int devicesCur_ ;
      /**
       * <code>optional uint32 devices_cur = 48;</code>
       *
       * <pre>
       *厂商获取的did个数的当前值
       * </pre>
       */
      public boolean hasDevicesCur() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional uint32 devices_cur = 48;</code>
       *
       * <pre>
       *厂商获取的did个数的当前值
       * </pre>
       */
      public int getDevicesCur() {
        return devicesCur_;
      }
      /**
       * <code>optional uint32 devices_cur = 48;</code>
       *
       * <pre>
       *厂商获取的did个数的当前值
       * </pre>
       */
      public Builder setDevicesCur(int value) {
        bitField0_ |= 0x40000000;
        devicesCur_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 devices_cur = 48;</code>
       *
       * <pre>
       *厂商获取的did个数的当前值
       * </pre>
       */
      public Builder clearDevicesCur() {
        bitField0_ = (bitField0_ & ~0x40000000);
        devicesCur_ = 0;
        onChanged();
        return this;
      }

      // optional bytes share_verification = 49;
      private com.google.protobuf.ByteString shareVerification_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes share_verification = 49;</code>
       *
       * <pre>
       *分享设备二维码时所需要的认证sig，通过添加二维码设备需要检验的sig
       * </pre>
       */
      public boolean hasShareVerification() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional bytes share_verification = 49;</code>
       *
       * <pre>
       *分享设备二维码时所需要的认证sig，通过添加二维码设备需要检验的sig
       * </pre>
       */
      public com.google.protobuf.ByteString getShareVerification() {
        return shareVerification_;
      }
      /**
       * <code>optional bytes share_verification = 49;</code>
       *
       * <pre>
       *分享设备二维码时所需要的认证sig，通过添加二维码设备需要检验的sig
       * </pre>
       */
      public Builder setShareVerification(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x80000000;
        shareVerification_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes share_verification = 49;</code>
       *
       * <pre>
       *分享设备二维码时所需要的认证sig，通过添加二维码设备需要检验的sig
       * </pre>
       */
      public Builder clearShareVerification() {
        bitField0_ = (bitField0_ & ~0x80000000);
        shareVerification_ = getDefaultInstance().getShareVerification();
        onChanged();
        return this;
      }

      // repeated .nodepp.Device devices = 50;
      private java.util.List<Device> devices_ =
        java.util.Collections.emptyList();
      private void ensureDevicesIsMutable() {
        if (!((bitField1_ & 0x00000001) == 0x00000001)) {
          devices_ = new java.util.ArrayList<Device>(devices_);
          bitField1_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          Device, Device.Builder, DeviceOrBuilder> devicesBuilder_;

      /**
       * <code>repeated .nodepp.Device devices = 50;</code>
       *
       * <pre>
       *新增，设备集合
       * </pre>
       */
      public java.util.List<Device> getDevicesList() {
        if (devicesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(devices_);
        } else {
          return devicesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .nodepp.Device devices = 50;</code>
       *
       * <pre>
       *新增，设备集合
       * </pre>
       */
      public int getDevicesCount() {
        if (devicesBuilder_ == null) {
          return devices_.size();
        } else {
          return devicesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .nodepp.Device devices = 50;</code>
       *
       * <pre>
       *新增，设备集合
       * </pre>
       */
      public Device getDevices(int index) {
        if (devicesBuilder_ == null) {
          return devices_.get(index);
        } else {
          return devicesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .nodepp.Device devices = 50;</code>
       *
       * <pre>
       *新增，设备集合
       * </pre>
       */
      public Builder setDevices(
          int index, Device value) {
        if (devicesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDevicesIsMutable();
          devices_.set(index, value);
          onChanged();
        } else {
          devicesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Device devices = 50;</code>
       *
       * <pre>
       *新增，设备集合
       * </pre>
       */
      public Builder setDevices(
          int index, Device.Builder builderForValue) {
        if (devicesBuilder_ == null) {
          ensureDevicesIsMutable();
          devices_.set(index, builderForValue.build());
          onChanged();
        } else {
          devicesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Device devices = 50;</code>
       *
       * <pre>
       *新增，设备集合
       * </pre>
       */
      public Builder addDevices(Device value) {
        if (devicesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDevicesIsMutable();
          devices_.add(value);
          onChanged();
        } else {
          devicesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Device devices = 50;</code>
       *
       * <pre>
       *新增，设备集合
       * </pre>
       */
      public Builder addDevices(
          int index, Device value) {
        if (devicesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDevicesIsMutable();
          devices_.add(index, value);
          onChanged();
        } else {
          devicesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Device devices = 50;</code>
       *
       * <pre>
       *新增，设备集合
       * </pre>
       */
      public Builder addDevices(
          Device.Builder builderForValue) {
        if (devicesBuilder_ == null) {
          ensureDevicesIsMutable();
          devices_.add(builderForValue.build());
          onChanged();
        } else {
          devicesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Device devices = 50;</code>
       *
       * <pre>
       *新增，设备集合
       * </pre>
       */
      public Builder addDevices(
          int index, Device.Builder builderForValue) {
        if (devicesBuilder_ == null) {
          ensureDevicesIsMutable();
          devices_.add(index, builderForValue.build());
          onChanged();
        } else {
          devicesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Device devices = 50;</code>
       *
       * <pre>
       *新增，设备集合
       * </pre>
       */
      public Builder addAllDevices(
          Iterable<? extends Device> values) {
        if (devicesBuilder_ == null) {
          ensureDevicesIsMutable();
          super.addAll(values, devices_);
          onChanged();
        } else {
          devicesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Device devices = 50;</code>
       *
       * <pre>
       *新增，设备集合
       * </pre>
       */
      public Builder clearDevices() {
        if (devicesBuilder_ == null) {
          devices_ = java.util.Collections.emptyList();
          bitField1_ = (bitField1_ & ~0x00000001);
          onChanged();
        } else {
          devicesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Device devices = 50;</code>
       *
       * <pre>
       *新增，设备集合
       * </pre>
       */
      public Builder removeDevices(int index) {
        if (devicesBuilder_ == null) {
          ensureDevicesIsMutable();
          devices_.remove(index);
          onChanged();
        } else {
          devicesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .nodepp.Device devices = 50;</code>
       *
       * <pre>
       *新增，设备集合
       * </pre>
       */
      public Device.Builder getDevicesBuilder(
          int index) {
        return getDevicesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .nodepp.Device devices = 50;</code>
       *
       * <pre>
       *新增，设备集合
       * </pre>
       */
      public DeviceOrBuilder getDevicesOrBuilder(
          int index) {
        if (devicesBuilder_ == null) {
          return devices_.get(index);  } else {
          return devicesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .nodepp.Device devices = 50;</code>
       *
       * <pre>
       *新增，设备集合
       * </pre>
       */
      public java.util.List<? extends DeviceOrBuilder>
           getDevicesOrBuilderList() {
        if (devicesBuilder_ != null) {
          return devicesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(devices_);
        }
      }
      /**
       * <code>repeated .nodepp.Device devices = 50;</code>
       *
       * <pre>
       *新增，设备集合
       * </pre>
       */
      public Device.Builder addDevicesBuilder() {
        return getDevicesFieldBuilder().addBuilder(
            Device.getDefaultInstance());
      }
      /**
       * <code>repeated .nodepp.Device devices = 50;</code>
       *
       * <pre>
       *新增，设备集合
       * </pre>
       */
      public Device.Builder addDevicesBuilder(
          int index) {
        return getDevicesFieldBuilder().addBuilder(
            index, Device.getDefaultInstance());
      }
      /**
       * <code>repeated .nodepp.Device devices = 50;</code>
       *
       * <pre>
       *新增，设备集合
       * </pre>
       */
      public java.util.List<Device.Builder>
           getDevicesBuilderList() {
        return getDevicesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          Device, Device.Builder, DeviceOrBuilder>
          getDevicesFieldBuilder() {
        if (devicesBuilder_ == null) {
          devicesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              Device, Device.Builder, DeviceOrBuilder>(
                  devices_,
                  ((bitField1_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          devices_ = null;
        }
        return devicesBuilder_;
      }

      // optional uint32 initialize_data = 51;
      private int initializeData_ ;
      /**
       * <code>optional uint32 initialize_data = 51;</code>
       *
       * <pre>
       *新增，是否需要设备初始化，根据上一次的device_identification和这一次来决定。0代表不需要，1代表需要
       * </pre>
       */
      public boolean hasInitializeData() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 initialize_data = 51;</code>
       *
       * <pre>
       *新增，是否需要设备初始化，根据上一次的device_identification和这一次来决定。0代表不需要，1代表需要
       * </pre>
       */
      public int getInitializeData() {
        return initializeData_;
      }
      /**
       * <code>optional uint32 initialize_data = 51;</code>
       *
       * <pre>
       *新增，是否需要设备初始化，根据上一次的device_identification和这一次来决定。0代表不需要，1代表需要
       * </pre>
       */
      public Builder setInitializeData(int value) {
        bitField1_ |= 0x00000002;
        initializeData_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 initialize_data = 51;</code>
       *
       * <pre>
       *新增，是否需要设备初始化，根据上一次的device_identification和这一次来决定。0代表不需要，1代表需要
       * </pre>
       */
      public Builder clearInitializeData() {
        bitField1_ = (bitField1_ & ~0x00000002);
        initializeData_ = 0;
        onChanged();
        return this;
      }

      // repeated uint64 dids = 52;
      private java.util.List<Long> dids_ = java.util.Collections.emptyList();
      private void ensureDidsIsMutable() {
        if (!((bitField1_ & 0x00000004) == 0x00000004)) {
          dids_ = new java.util.ArrayList<Long>(dids_);
          bitField1_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated uint64 dids = 52;</code>
       *
       * <pre>
       *当前用户的所有did
       * </pre>
       */
      public java.util.List<Long>
          getDidsList() {
        return java.util.Collections.unmodifiableList(dids_);
      }
      /**
       * <code>repeated uint64 dids = 52;</code>
       *
       * <pre>
       *当前用户的所有did
       * </pre>
       */
      public int getDidsCount() {
        return dids_.size();
      }
      /**
       * <code>repeated uint64 dids = 52;</code>
       *
       * <pre>
       *当前用户的所有did
       * </pre>
       */
      public long getDids(int index) {
        return dids_.get(index);
      }
      /**
       * <code>repeated uint64 dids = 52;</code>
       *
       * <pre>
       *当前用户的所有did
       * </pre>
       */
      public Builder setDids(
          int index, long value) {
        ensureDidsIsMutable();
        dids_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 dids = 52;</code>
       *
       * <pre>
       *当前用户的所有did
       * </pre>
       */
      public Builder addDids(long value) {
        ensureDidsIsMutable();
        dids_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 dids = 52;</code>
       *
       * <pre>
       *当前用户的所有did
       * </pre>
       */
      public Builder addAllDids(
          Iterable<? extends Long> values) {
        ensureDidsIsMutable();
        super.addAll(values, dids_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 dids = 52;</code>
       *
       * <pre>
       *当前用户的所有did
       * </pre>
       */
      public Builder clearDids() {
        dids_ = java.util.Collections.emptyList();
        bitField1_ = (bitField1_ & ~0x00000004);
        onChanged();
        return this;
      }

      // optional bytes user_data = 53;
      private com.google.protobuf.ByteString userData_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes user_data = 53;</code>
       *
       * <pre>
       *串口通讯传输的信息
       * </pre>
       */
      public boolean hasUserData() {
        return ((bitField1_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bytes user_data = 53;</code>
       *
       * <pre>
       *串口通讯传输的信息
       * </pre>
       */
      public com.google.protobuf.ByteString getUserData() {
        return userData_;
      }
      /**
       * <code>optional bytes user_data = 53;</code>
       *
       * <pre>
       *串口通讯传输的信息
       * </pre>
       */
      public Builder setUserData(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000008;
        userData_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes user_data = 53;</code>
       *
       * <pre>
       *串口通讯传输的信息
       * </pre>
       */
      public Builder clearUserData() {
        bitField1_ = (bitField1_ & ~0x00000008);
        userData_ = getDefaultInstance().getUserData();
        onChanged();
        return this;
      }

      // optional bytes random = 54;
      private com.google.protobuf.ByteString random_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes random = 54;</code>
       */
      public boolean hasRandom() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bytes random = 54;</code>
       */
      public com.google.protobuf.ByteString getRandom() {
        return random_;
      }
      /**
       * <code>optional bytes random = 54;</code>
       */
      public Builder setRandom(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000010;
        random_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes random = 54;</code>
       */
      public Builder clearRandom() {
        bitField1_ = (bitField1_ & ~0x00000010);
        random_ = getDefaultInstance().getRandom();
        onChanged();
        return this;
      }

      // optional .nodepp.Upgrade upgrade = 55;
      private Upgrade upgrade_ = Upgrade.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          Upgrade, Upgrade.Builder, UpgradeOrBuilder> upgradeBuilder_;
      /**
       * <code>optional .nodepp.Upgrade upgrade = 55;</code>
       *
       * <pre>
       *fw
       * </pre>
       */
      public boolean hasUpgrade() {
        return ((bitField1_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .nodepp.Upgrade upgrade = 55;</code>
       *
       * <pre>
       *fw
       * </pre>
       */
      public Upgrade getUpgrade() {
        if (upgradeBuilder_ == null) {
          return upgrade_;
        } else {
          return upgradeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .nodepp.Upgrade upgrade = 55;</code>
       *
       * <pre>
       *fw
       * </pre>
       */
      public Builder setUpgrade(Upgrade value) {
        if (upgradeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          upgrade_ = value;
          onChanged();
        } else {
          upgradeBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .nodepp.Upgrade upgrade = 55;</code>
       *
       * <pre>
       *fw
       * </pre>
       */
      public Builder setUpgrade(
          Upgrade.Builder builderForValue) {
        if (upgradeBuilder_ == null) {
          upgrade_ = builderForValue.build();
          onChanged();
        } else {
          upgradeBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .nodepp.Upgrade upgrade = 55;</code>
       *
       * <pre>
       *fw
       * </pre>
       */
      public Builder mergeUpgrade(Upgrade value) {
        if (upgradeBuilder_ == null) {
          if (((bitField1_ & 0x00000020) == 0x00000020) &&
              upgrade_ != Upgrade.getDefaultInstance()) {
            upgrade_ =
              Upgrade.newBuilder(upgrade_).mergeFrom(value).buildPartial();
          } else {
            upgrade_ = value;
          }
          onChanged();
        } else {
          upgradeBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .nodepp.Upgrade upgrade = 55;</code>
       *
       * <pre>
       *fw
       * </pre>
       */
      public Builder clearUpgrade() {
        if (upgradeBuilder_ == null) {
          upgrade_ = Upgrade.getDefaultInstance();
          onChanged();
        } else {
          upgradeBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .nodepp.Upgrade upgrade = 55;</code>
       *
       * <pre>
       *fw
       * </pre>
       */
      public Upgrade.Builder getUpgradeBuilder() {
        bitField1_ |= 0x00000020;
        onChanged();
        return getUpgradeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .nodepp.Upgrade upgrade = 55;</code>
       *
       * <pre>
       *fw
       * </pre>
       */
      public UpgradeOrBuilder getUpgradeOrBuilder() {
        if (upgradeBuilder_ != null) {
          return upgradeBuilder_.getMessageOrBuilder();
        } else {
          return upgrade_;
        }
      }
      /**
       * <code>optional .nodepp.Upgrade upgrade = 55;</code>
       *
       * <pre>
       *fw
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          Upgrade, Upgrade.Builder, UpgradeOrBuilder>
          getUpgradeFieldBuilder() {
        if (upgradeBuilder_ == null) {
          upgradeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              Upgrade, Upgrade.Builder, UpgradeOrBuilder>(
                  upgrade_,
                  getParentForChildren(),
                  isClean());
          upgrade_ = null;
        }
        return upgradeBuilder_;
      }

      // optional bytes key_client = 56;
      private com.google.protobuf.ByteString keyClient_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes key_client = 56;</code>
       */
      public boolean hasKeyClient() {
        return ((bitField1_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bytes key_client = 56;</code>
       */
      public com.google.protobuf.ByteString getKeyClient() {
        return keyClient_;
      }
      /**
       * <code>optional bytes key_client = 56;</code>
       */
      public Builder setKeyClient(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000040;
        keyClient_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes key_client = 56;</code>
       */
      public Builder clearKeyClient() {
        bitField1_ = (bitField1_ & ~0x00000040);
        keyClient_ = getDefaultInstance().getKeyClient();
        onChanged();
        return this;
      }

      // optional uint32 bright_dark = 57;
      private int brightDark_ ;
      /**
       * <code>optional uint32 bright_dark = 57;</code>
       *
       * <pre>
       *彩灯的亮暗值
       * </pre>
       */
      public boolean hasBrightDark() {
        return ((bitField1_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 bright_dark = 57;</code>
       *
       * <pre>
       *彩灯的亮暗值
       * </pre>
       */
      public int getBrightDark() {
        return brightDark_;
      }
      /**
       * <code>optional uint32 bright_dark = 57;</code>
       *
       * <pre>
       *彩灯的亮暗值
       * </pre>
       */
      public Builder setBrightDark(int value) {
        bitField1_ |= 0x00000080;
        brightDark_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 bright_dark = 57;</code>
       *
       * <pre>
       *彩灯的亮暗值
       * </pre>
       */
      public Builder clearBrightDark() {
        bitField1_ = (bitField1_ & ~0x00000080);
        brightDark_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 su_yan = 58;
      private int suYan_ ;
      /**
       * <code>optional uint32 su_yan = 58;</code>
       *
       * <pre>
       *彩灯的素艳值
       * </pre>
       */
      public boolean hasSuYan() {
        return ((bitField1_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 su_yan = 58;</code>
       *
       * <pre>
       *彩灯的素艳值
       * </pre>
       */
      public int getSuYan() {
        return suYan_;
      }
      /**
       * <code>optional uint32 su_yan = 58;</code>
       *
       * <pre>
       *彩灯的素艳值
       * </pre>
       */
      public Builder setSuYan(int value) {
        bitField1_ |= 0x00000100;
        suYan_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 su_yan = 58;</code>
       *
       * <pre>
       *彩灯的素艳值
       * </pre>
       */
      public Builder clearSuYan() {
        bitField1_ = (bitField1_ & ~0x00000100);
        suYan_ = 0;
        onChanged();
        return this;
      }

      // optional bytes mac_id = 59;
      private com.google.protobuf.ByteString macId_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes mac_id = 59;</code>
       *
       * <pre>
       *mac数量统计
       * </pre>
       */
      public boolean hasMacId() {
        return ((bitField1_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional bytes mac_id = 59;</code>
       *
       * <pre>
       *mac数量统计
       * </pre>
       */
      public com.google.protobuf.ByteString getMacId() {
        return macId_;
      }
      /**
       * <code>optional bytes mac_id = 59;</code>
       *
       * <pre>
       *mac数量统计
       * </pre>
       */
      public Builder setMacId(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000200;
        macId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes mac_id = 59;</code>
       *
       * <pre>
       *mac数量统计
       * </pre>
       */
      public Builder clearMacId() {
        bitField1_ = (bitField1_ & ~0x00000200);
        macId_ = getDefaultInstance().getMacId();
        onChanged();
        return this;
      }

      // optional uint32 device_mode = 60;
      private int deviceMode_ ;
      /**
       * <code>optional uint32 device_mode = 60;</code>
       *
       * <pre>
       *设备工作模式，0表示自锁，1表示点动，2表示互锁模式
       * </pre>
       */
      public boolean hasDeviceMode() {
        return ((bitField1_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional uint32 device_mode = 60;</code>
       *
       * <pre>
       *设备工作模式，0表示自锁，1表示点动，2表示互锁模式
       * </pre>
       */
      public int getDeviceMode() {
        return deviceMode_;
      }
      /**
       * <code>optional uint32 device_mode = 60;</code>
       *
       * <pre>
       *设备工作模式，0表示自锁，1表示点动，2表示互锁模式
       * </pre>
       */
      public Builder setDeviceMode(int value) {
        bitField1_ |= 0x00000400;
        deviceMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 device_mode = 60;</code>
       *
       * <pre>
       *设备工作模式，0表示自锁，1表示点动，2表示互锁模式
       * </pre>
       */
      public Builder clearDeviceMode() {
        bitField1_ = (bitField1_ & ~0x00000400);
        deviceMode_ = 0;
        onChanged();
        return this;
      }

      // optional bytes key_client_wan = 61;
      private com.google.protobuf.ByteString keyClientWan_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes key_client_wan = 61;</code>
       *
       * <pre>
       *client-server key
       * </pre>
       */
      public boolean hasKeyClientWan() {
        return ((bitField1_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional bytes key_client_wan = 61;</code>
       *
       * <pre>
       *client-server key
       * </pre>
       */
      public com.google.protobuf.ByteString getKeyClientWan() {
        return keyClientWan_;
      }
      /**
       * <code>optional bytes key_client_wan = 61;</code>
       *
       * <pre>
       *client-server key
       * </pre>
       */
      public Builder setKeyClientWan(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000800;
        keyClientWan_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes key_client_wan = 61;</code>
       *
       * <pre>
       *client-server key
       * </pre>
       */
      public Builder clearKeyClientWan() {
        bitField1_ = (bitField1_ & ~0x00000800);
        keyClientWan_ = getDefaultInstance().getKeyClientWan();
        onChanged();
        return this;
      }

      // optional uint32 app_protocol = 62;
      private int appProtocol_ ;
      /**
       * <code>optional uint32 app_protocol = 62;</code>
       */
      public boolean hasAppProtocol() {
        return ((bitField1_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional uint32 app_protocol = 62;</code>
       */
      public int getAppProtocol() {
        return appProtocol_;
      }
      /**
       * <code>optional uint32 app_protocol = 62;</code>
       */
      public Builder setAppProtocol(int value) {
        bitField1_ |= 0x00001000;
        appProtocol_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 app_protocol = 62;</code>
       */
      public Builder clearAppProtocol() {
        bitField1_ = (bitField1_ & ~0x00001000);
        appProtocol_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:nodepp.Msg)
    }

    static {
      defaultInstance = new Msg(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:nodepp.Msg)
  }



  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nodepp_Head_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nodepp_Head_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nodepp_Timer_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nodepp_Timer_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nodepp_Rgb_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nodepp_Rgb_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nodepp_Device_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nodepp_Device_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nodepp_Upgrade_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nodepp_Upgrade_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nodepp_Msg_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nodepp_Msg_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\014nodepp.proto\022\006nodepp\"\203\002\n\004Head\022\r\n\005magic" +
      "\030\001 \001(\r\022\013\n\003seq\030\002 \001(\r\022\013\n\003cmd\030\003 \001(\r\022\017\n\007sub_" +
      "cmd\030\004 \001(\r\022\017\n\007version\030\005 \001(\r\022\013\n\003uid\030\006 \001(\004\022" +
      "\013\n\003did\030\007 \001(\004\022\014\n\004time\030\010 \001(\r\022\016\n\006result\030\n \001" +
      "(\r\022\014\n\004usig\030\013 \001(\014\022\014\n\004dsig\030\014 \001(\014\022\013\n\003tid\030\r " +
      "\001(\004\022\017\n\007session\030\016 \001(\004\022\017\n\007special\030\017 \001(\r\022\035\n" +
      "\025device_identification\030\020 \001(\014\022\016\n\006random\030\021" +
      " \001(\014\"\204\001\n\005Timer\022\020\n\010time_set\030\001 \001(\r\022\023\n\013time" +
      "_repeat\030\002 \001(\r\022\024\n\014time_operate\030\003 \001(\r\022\022\n\nt" +
      "ime_stamp\030\004 \003(\r\022\023\n\013time_isopen\030\005 \001(\r\022\025\n\r",
      "operate_index\030\006 \001(\r\"1\n\003Rgb\022\t\n\001w\030\001 \001(\r\022\t\n" +
      "\001r\030\002 \001(\r\022\t\n\001g\030\003 \001(\r\022\t\n\001b\030\004 \001(\r\"\253\002\n\006Devic" +
      "e\022\023\n\013device_name\030\001 \001(\014\022\024\n\014pictureIndex\030\002" +
      " \001(\r\022\013\n\003did\030\003 \001(\004\022\013\n\003tid\030\004 \001(\004\022\023\n\013device" +
      "_type\030\005 \001(\r\022\025\n\rconneted_mode\030\006 \001(\r\022\020\n\010is" +
      "_group\030\007 \001(\r\022\031\n\021device_group_tids\030\010 \001(\014\022" +
      "\031\n\021device_group_dids\030\t \001(\014\022\021\n\tdevice_ip\030" +
      "\n \001(\014\022\022\n\ndevice_ips\030\013 \001(\014\022\021\n\trouterMac\030\014" +
      " \001(\014\022\017\n\007special\030\r \001(\r\022\035\n\006timers\030\016 \003(\0132\r." +
      "nodepp.Timer\"P\n\007Upgrade\022\014\n\004name\030\001 \001(\014\022\014\n",
      "\004info\030\002 \001(\014\022\014\n\004size\030\003 \001(\r\022\r\n\005start\030\004 \001(\r" +
      "\022\014\n\004data\030\005 \001(\014\"\371\006\n\003Msg\022\032\n\004head\030\001 \001(\0132\014.n" +
      "odepp.Head\022\025\n\rtime_interval\030\n \001(\r\022\017\n\007ope" +
      "rate\030\013 \001(\r\022\r\n\005state\030\014 \001(\r\022\021\n\twifi_name\030\r" +
      " \001(\014\022\023\n\013wifi_passwd\030\016 \001(\014\022\022\n\nwifi_state\030" +
      "\017 \001(\r\022\021\n\tuser_type\030\020 \001(\r\022\014\n\004user\030\021 \001(\014\022\013" +
      "\n\003key\030\022 \001(\014\022\017\n\007ver_cur\030\023 \001(\r\022\017\n\007ver_new\030" +
      "\024 \001(\r\022\020\n\010ver_info\030\025 \001(\014\022\017\n\007ver_url\030\026 \001(\014" +
      "\022\r\n\005appid\030\030 \001(\004\022\035\n\006timers\030\035 \003(\0132\r.nodepp" +
      ".Timer\022\013\n\003uid\030\036 \001(\004\022\014\n\004usig\030\037 \001(\014\022\013\n\003mid",
      "\030  \001(\004\022\017\n\007sub_mid\030! \001(\004\022\014\n\004msig\030\" \001(\014\022\013\n" +
      "\003did\030# \001(\004\022\014\n\004dsig\030$ \001(\014\022\013\n\003tid\030% \001(\004\022\023\n" +
      "\013device_type\030* \001(\r\022\025\n\rconneted_mode\030+ \001(" +
      "\r\022\020\n\010platform\030, \001(\r\022\033\n\006colors\030- \003(\0132\013.no" +
      "depp.Rgb\022\031\n\021color_switch_time\030. \001(\r\022\023\n\013d" +
      "evices_max\030/ \001(\r\022\023\n\013devices_cur\0300 \001(\r\022\032\n" +
      "\022share_verification\0301 \001(\014\022\037\n\007devices\0302 \003" +
      "(\0132\016.nodepp.Device\022\027\n\017initialize_data\0303 " +
      "\001(\r\022\014\n\004dids\0304 \003(\004\022\021\n\tuser_data\0305 \001(\014\022\016\n\006" +
      "random\0306 \001(\014\022 \n\007upgrade\0307 \001(\0132\017.nodepp.U",
      "pgrade\022\022\n\nkey_client\0308 \001(\014\022\023\n\013bright_dar" +
      "k\0309 \001(\r\022\016\n\006su_yan\030: \001(\r\022\016\n\006mac_id\030; \001(\014\022" +
      "\023\n\013device_mode\030< \001(\r\022\026\n\016key_client_wan\030=" +
      " \001(\014\022\024\n\014app_protocol\030> \001(\r"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_nodepp_Head_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_nodepp_Head_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nodepp_Head_descriptor,
              new String[] { "Magic", "Seq", "Cmd", "SubCmd", "Version", "Uid", "Did", "Time", "Result", "Usig", "Dsig", "Tid", "Session", "Special", "DeviceIdentification", "Random", });
          internal_static_nodepp_Timer_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_nodepp_Timer_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nodepp_Timer_descriptor,
              new String[] { "TimeSet", "TimeRepeat", "TimeOperate", "TimeStamp", "TimeIsopen", "OperateIndex", });
          internal_static_nodepp_Rgb_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_nodepp_Rgb_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nodepp_Rgb_descriptor,
              new String[] { "W", "R", "G", "B", });
          internal_static_nodepp_Device_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_nodepp_Device_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nodepp_Device_descriptor,
              new String[] { "DeviceName", "PictureIndex", "Did", "Tid", "DeviceType", "ConnetedMode", "IsGroup", "DeviceGroupTids", "DeviceGroupDids", "DeviceIp", "DeviceIps", "RouterMac", "Special", "Timers", });
          internal_static_nodepp_Upgrade_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_nodepp_Upgrade_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nodepp_Upgrade_descriptor,
              new String[] { "Name", "Info", "Size", "Start", "Data", });
          internal_static_nodepp_Msg_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_nodepp_Msg_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nodepp_Msg_descriptor,
              new String[] { "Head", "TimeInterval", "Operate", "State", "WifiName", "WifiPasswd", "WifiState", "UserType", "User", "Key", "VerCur", "VerNew", "VerInfo", "VerUrl", "Appid", "Timers", "Uid", "Usig", "Mid", "SubMid", "Msig", "Did", "Dsig", "Tid", "DeviceType", "ConnetedMode", "Platform", "Colors", "ColorSwitchTime", "DevicesMax", "DevicesCur", "ShareVerification", "Devices", "InitializeData", "Dids", "UserData", "Random", "Upgrade", "KeyClient", "BrightDark", "SuYan", "MacId", "DeviceMode", "KeyClientWan", "AppProtocol", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
